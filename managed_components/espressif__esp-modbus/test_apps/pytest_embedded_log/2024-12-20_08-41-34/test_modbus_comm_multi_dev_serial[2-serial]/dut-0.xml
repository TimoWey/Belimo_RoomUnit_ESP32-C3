<testsuite errors="0" failures="0" skipped="0" tests="2"><testcase file="./main/test_modbus_rs485_comm_master_slave.c" line="126" name="Modbus RS485 RTU multi device master - slave case." time="13.297"><system-out>Please press "Enter" key once any board send this signal.

D (1045) TEST_COMMON: Notify task start 0x3ffba8e4
D (1045) TEST_COMMON: Task: 0x3ffba8e4, get notify value = 1
D (1105) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (1105) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (1105) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (1115) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (1115) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (1125) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (1125) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 00 00 01 02 11 11 6a 0c 
D (1135) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 477712
D (1145) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 00 00 01 02 11 11 
D (1145) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (1155) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (1155) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (1165) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2984, 1
D (1175) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 00 00 01 
D (1185) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (1185) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (1195) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (1195) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 00 00 01 01 c9 
D (1205) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (1205) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93476
I (1225) SLAVE: OBJ 0x3ffaff70, WRITE (521927 us), SL: 0, REG:0, TYPE:1, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (1305) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (1315) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (1315) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (1315) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (1325) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (1325) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (1335) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 01 00 01 02 22 22 3f 38 
D (1345) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 124972
D (1345) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 01 00 01 02 22 22 
D (1355) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (1355) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (1365) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (1375) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2986, 1
D (1385) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 01 00 01 
D (1385) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (1395) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (1395) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (1405) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 01 00 01 50 09 
D (1415) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (1415) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93476
I (1425) SLAVE: OBJ 0x3ffaff70, WRITE (728858 us), SL: 0, REG:1, TYPE:1, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (1515) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (1515) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (1515) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (1525) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (1535) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (1535) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (1545) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 02 00 01 02 33 33 f3 57 
D (1545) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 125616
D (1555) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 02 00 01 02 33 33 
D (1565) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (1565) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (1575) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (1585) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2988, 1
D (1585) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 02 00 01 
D (1595) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (1595) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (1605) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (1615) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 02 00 01 a0 09 
D (1615) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (1625) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93476
I (1645) SLAVE: OBJ 0x3ffaff70, WRITE (936441 us), SL: 0, REG:2, TYPE:1, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (1725) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (1725) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (1725) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (1735) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (1735) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (1745) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (1745) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 03 00 01 02 44 44 95 50 
D (1755) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 124845
D (1765) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 03 00 01 02 44 44 
D (1765) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (1775) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (1785) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (1785) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298a, 1
D (1795) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 03 00 01 
D (1805) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (1805) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (1815) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (1815) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 03 00 01 f1 c9 
D (1825) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (1835) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93475
I (1835) SLAVE: OBJ 0x3ffaff70, WRITE (1143245 us), SL: 0, REG:3, TYPE:1, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (1925) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (1935) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (1935) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (1935) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (1945) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (1945) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (1955) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 00 00 01 84 0a 
D (1965) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 123577
D (1965) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 00 00 01 
D (1975) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (1975) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (1985) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (1995) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2984, 1
D (1995) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 11 11 
D (2005) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (2015) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (2015) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (2025) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 11 11 74 18 
D (2025) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (2035) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 91219
I (2055) SLAVE: OBJ 0x3ffaff70, READ (1347045 us), SL: 0, REG:0, TYPE:2, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (2135) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (2135) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (2135) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (2145) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (2155) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (2155) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (2165) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 01 00 01 d5 ca 
D (2165) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 127996
D (2175) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 01 00 01 
D (2185) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (2185) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (2195) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (2195) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2986, 1
D (2205) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 22 22 
D (2215) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (2215) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (2225) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (2235) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 22 22 20 fd 
D (2235) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (2245) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 91219
I (2245) SLAVE: OBJ 0x3ffaff70, READ (1554747 us), SL: 0, REG:1, TYPE:2, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (2345) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (2345) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (2345) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (2355) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (2355) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (2365) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (2375) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 02 00 01 25 ca 
D (2375) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 127943
D (2385) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 02 00 01 
D (2385) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (2395) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (2405) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (2405) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2988, 1
D (2415) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 33 33 
D (2425) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (2425) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (2435) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (2435) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 33 33 ec a1 
D (2445) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (2445) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 91219
I (2455) SLAVE: OBJ 0x3ffaff70, READ (1762396 us), SL: 0, REG:2, TYPE:2, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (2555) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (2555) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (2555) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (2565) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (2565) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (2575) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (2575) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 03 00 01 74 0a 
D (2585) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 128004
D (2595) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 03 00 01 
D (2595) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (2605) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (2605) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (2615) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb298a, 1
D (2625) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 44 44 
D (2625) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (2635) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (2635) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (2645) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 44 44 8b 77 
D (2655) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (2655) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 91219
I (2665) SLAVE: OBJ 0x3ffaff70, READ (1970106 us), SL: 0, REG:3, TYPE:2, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (2765) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (2765) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (2765) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (2765) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (2775) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (2785) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (2785) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 02 00 00 a7 d4 
D (2795) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129227
D (2805) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 00 
D (2805) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (2815) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (2815) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (2825) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (2835) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (2835) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (2845) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (2845) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (2855) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 40 08 
D (2865) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (2865) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93475
I (2875) SLAVE: OBJ 0x3ffaff70, WRITE (2180783 us), SL: 0, REG:4, TYPE:1, INST_ADDR:0x3ffb298c(0x0), SIZE:1
D (3015) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (3015) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (3015) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (3025) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (3025) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (3035) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (3045) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 00 00 01 02 11 11 6a 0c 
D (3045) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 172315
D (3055) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 00 00 01 02 11 11 
D (3065) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (3065) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (3075) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (3075) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2984, 1
D (3085) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 00 00 01 
D (3095) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (3095) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (3105) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (3115) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 00 00 01 01 c9 
D (3115) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (3125) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93476
I (3125) SLAVE: OBJ 0x3ffaff70, WRITE (2435057 us), SL: 0, REG:0, TYPE:1, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (3225) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (3225) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (3225) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (3235) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (3245) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (3245) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (3255) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 01 00 01 02 22 22 3f 38 
D (3255) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129641
D (3265) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 01 00 01 02 22 22 
D (3275) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (3275) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (3285) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (3295) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2986, 1
D (3295) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 01 00 01 
D (3305) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (3315) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (3315) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (3325) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 01 00 01 50 09 
D (3325) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (3335) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93476
I (3345) SLAVE: OBJ 0x3ffaff70, WRITE (2646666 us), SL: 0, REG:1, TYPE:1, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (3435) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (3435) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (3445) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (3445) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (3455) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (3455) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (3465) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 02 00 01 02 33 33 f3 57 
D (3475) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129633
D (3475) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 02 00 01 02 33 33 
D (3485) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (3485) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (3495) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (3505) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2988, 1
D (3515) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 02 00 01 
D (3515) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (3525) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (3525) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (3535) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 02 00 01 a0 09 
D (3545) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (3545) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93476
I (3565) SLAVE: OBJ 0x3ffaff70, WRITE (2858258 us), SL: 0, REG:2, TYPE:1, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (3655) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (3655) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (3655) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (3655) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (3665) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (3665) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (3675) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 03 00 01 02 44 44 95 50 
D (3685) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129641
D (3695) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 03 00 01 02 44 44 
D (3695) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (3705) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (3705) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (3715) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298a, 1
D (3725) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 03 00 01 
D (3725) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (3735) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (3735) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (3745) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 03 00 01 f1 c9 
D (3755) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (3755) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93476
I (3765) SLAVE: OBJ 0x3ffaff70, WRITE (3069867 us), SL: 0, REG:3, TYPE:1, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (3865) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (3865) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (3865) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (3865) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (3875) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (3885) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (3885) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 02 00 01 66 14 
D (3895) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129633
D (3905) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 01 
D (3905) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (3915) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (3915) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (3925) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (3935) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (3935) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (3945) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (3955) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (3955) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 40 08 
D (3965) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (3965) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93476
I (3975) SLAVE: OBJ 0x3ffaff70, WRITE (3281460 us), SL: 0, REG:4, TYPE:1, INST_ADDR:0x3ffb298c(0x1), SIZE:1
D (4115) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (4115) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (4115) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (4125) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (4125) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (4135) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (4145) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 00 00 01 84 0a 
D (4145) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 170483
D (4155) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 00 00 01 
D (4155) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (4165) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (4165) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (4175) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2984, 1
D (4185) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 11 11 
D (4185) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (4195) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (4205) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (4205) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 11 11 74 18 
D (4215) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (4215) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 91218
I (4225) SLAVE: OBJ 0x3ffaff70, READ (3532165 us), SL: 0, REG:0, TYPE:2, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (4325) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (4325) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (4325) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (4325) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (4335) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (4345) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (4345) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 01 00 01 d5 ca 
D (4355) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 128004
D (4365) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 01 00 01 
D (4365) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (4375) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (4375) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (4385) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2986, 1
D (4395) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 22 22 
D (4395) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (4405) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (4405) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (4415) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 22 22 20 fd 
D (4425) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (4425) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 91219
I (4435) SLAVE: OBJ 0x3ffaff70, READ (3739875 us), SL: 0, REG:1, TYPE:2, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (4535) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (4535) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (4535) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (4535) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (4545) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (4545) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (4555) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 02 00 01 25 ca 
D (4565) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 127942
D (4565) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 02 00 01 
D (4575) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (4575) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (4585) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (4595) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2988, 1
D (4605) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 33 33 
D (4605) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (4615) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (4615) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (4625) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 33 33 ec a1 
D (4625) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (4635) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 91219
I (4645) SLAVE: OBJ 0x3ffaff70, READ (3947524 us), SL: 0, REG:2, TYPE:2, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (4735) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (4735) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (4735) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (4745) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (4755) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (4755) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (4765) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 03 00 01 74 0a 
D (4765) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 128004
D (4775) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 03 00 01 
D (4785) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (4785) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (4795) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (4795) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb298a, 1
D (4805) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 44 44 
D (4815) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (4815) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (4825) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (4835) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 44 44 8b 77 
D (4835) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (4845) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 91219
I (4855) SLAVE: OBJ 0x3ffaff70, READ (4155235 us), SL: 0, REG:3, TYPE:2, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (4945) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (4945) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (4945) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (4955) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (4955) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (4965) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (4975) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 02 00 02 26 15 
D (4975) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129296
D (4985) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 02 
D (4995) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (4995) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (5005) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (5015) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (5015) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (5025) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (5025) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (5035) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (5045) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 40 08 
D (5045) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (5055) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93475
I (5065) SLAVE: OBJ 0x3ffaff70, WRITE (4365982 us), SL: 0, REG:4, TYPE:1, INST_ADDR:0x3ffb298c(0x2), SIZE:1
D (5195) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (5195) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (5195) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (5205) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (5205) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (5215) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (5225) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 00 00 01 02 11 11 6a 0c 
D (5225) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 167110
D (5235) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 00 00 01 02 11 11 
D (5245) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (5245) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (5255) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (5255) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2984, 1
D (5265) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 00 00 01 
D (5275) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (5275) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (5285) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (5295) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 00 00 01 01 c9 
D (5295) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (5305) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93476
I (5305) SLAVE: OBJ 0x3ffaff70, WRITE (4615050 us), SL: 0, REG:0, TYPE:1, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (5405) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (5405) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (5405) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (5415) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (5425) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (5425) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (5435) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 01 00 01 02 22 22 3f 38 
D (5435) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129641
D (5445) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 01 00 01 02 22 22 
D (5455) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (5455) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (5465) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (5475) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2986, 1
D (5475) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 01 00 01 
D (5485) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (5495) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (5495) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (5505) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 01 00 01 50 09 
D (5505) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (5515) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93476
I (5525) SLAVE: OBJ 0x3ffaff70, WRITE (4826658 us), SL: 0, REG:1, TYPE:1, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (5615) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (5615) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (5625) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (5625) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (5635) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (5635) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (5645) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 02 00 01 02 33 33 f3 57 
D (5655) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129634
D (5655) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 02 00 01 02 33 33 
D (5665) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (5665) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (5675) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (5685) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2988, 1
D (5695) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 02 00 01 
D (5695) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (5705) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (5705) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (5715) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 02 00 01 a0 09 
D (5725) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (5725) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93476
I (5745) SLAVE: OBJ 0x3ffaff70, WRITE (5038251 us), SL: 0, REG:2, TYPE:1, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (5835) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (5835) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (5835) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (5835) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (5845) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (5845) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (5855) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 03 00 01 02 44 44 95 50 
D (5865) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129641
D (5875) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 03 00 01 02 44 44 
D (5875) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (5885) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (5885) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (5895) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298a, 1
D (5905) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 03 00 01 
D (5905) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (5915) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (5915) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (5925) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 03 00 01 f1 c9 
D (5935) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (5935) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93476
I (5945) SLAVE: OBJ 0x3ffaff70, WRITE (5249860 us), SL: 0, REG:3, TYPE:1, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (6045) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (6045) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (6045) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (6045) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (6055) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (6065) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (6065) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 02 00 03 e7 d5 
D (6075) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129633
D (6085) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 03 
D (6085) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (6095) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (6095) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (6105) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (6115) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (6115) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (6125) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (6135) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (6135) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 40 08 
D (6145) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (6145) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93475
I (6155) SLAVE: OBJ 0x3ffaff70, WRITE (5461452 us), SL: 0, REG:4, TYPE:1, INST_ADDR:0x3ffb298c(0x3), SIZE:1
D (6295) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (6295) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (6295) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (6305) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (6305) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (6315) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (6325) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 00 00 01 84 0a 
D (6325) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 170483
D (6335) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 00 00 01 
D (6335) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (6345) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (6345) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (6355) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2984, 1
D (6365) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 11 11 
D (6365) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (6375) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (6385) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (6385) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 11 11 74 18 
D (6395) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (6395) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 91219
I (6405) SLAVE: OBJ 0x3ffaff70, READ (5712158 us), SL: 0, REG:0, TYPE:2, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (6505) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (6505) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (6505) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (6505) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (6515) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (6525) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (6525) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 01 00 01 d5 ca 
D (6535) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 128004
D (6545) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 01 00 01 
D (6545) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (6555) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (6555) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (6565) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2986, 1
D (6575) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 22 22 
D (6575) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (6585) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (6585) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (6595) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 22 22 20 fd 
D (6605) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (6605) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 91218
I (6615) SLAVE: OBJ 0x3ffaff70, READ (5919868 us), SL: 0, REG:1, TYPE:2, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (6715) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (6715) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (6715) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (6715) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (6725) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (6725) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (6735) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 02 00 01 25 ca 
D (6745) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 127943
D (6745) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 02 00 01 
D (6755) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (6755) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (6765) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (6775) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2988, 1
D (6785) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 33 33 
D (6785) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (6795) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (6795) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (6805) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 33 33 ec a1 
D (6805) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (6815) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 91219
I (6825) SLAVE: OBJ 0x3ffaff70, READ (6127517 us), SL: 0, REG:2, TYPE:2, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (6915) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (6915) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (6915) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (6925) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (6935) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (6935) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (6945) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 03 00 01 74 0a 
D (6945) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 128004
D (6955) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 03 00 01 
D (6965) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (6965) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (6975) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (6975) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb298a, 1
D (6985) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 44 44 
D (6995) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (6995) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (7005) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (7015) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 44 44 8b 77 
D (7015) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (7025) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 91219
I (7035) SLAVE: OBJ 0x3ffaff70, READ (6335227 us), SL: 0, REG:3, TYPE:2, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (7125) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (7125) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (7125) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (7135) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (7135) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (7145) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (7155) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 02 00 04 a6 17 
D (7155) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129297
D (7165) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 04 
D (7175) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (7175) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (7185) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (7195) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (7195) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (7205) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (7205) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (7215) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (7225) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 40 08 
D (7225) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (7235) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93476
I (7245) SLAVE: OBJ 0x3ffaff70, WRITE (6545982 us), SL: 0, REG:4, TYPE:1, INST_ADDR:0x3ffb298c(0x4), SIZE:1
D (7375) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (7375) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (7375) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (7385) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (7385) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (7395) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (7405) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 00 00 01 02 11 11 6a 0c 
D (7405) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 167179
D (7415) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 00 00 01 02 11 11 
D (7425) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (7425) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (7435) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (7435) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2984, 1
D (7445) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 00 00 01 
D (7455) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (7455) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (7465) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (7475) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 00 00 01 01 c9 
D (7475) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (7485) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93476
I (7485) SLAVE: OBJ 0x3ffaff70, WRITE (6795112 us), SL: 0, REG:0, TYPE:1, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (7585) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (7585) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (7585) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (7595) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (7605) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (7605) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (7615) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 01 00 01 02 22 22 3f 38 
D (7615) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129641
D (7625) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 01 00 01 02 22 22 
D (7635) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (7635) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (7645) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (7655) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2986, 1
D (7655) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 01 00 01 
D (7665) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (7675) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (7675) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (7685) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 01 00 01 50 09 
D (7685) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (7695) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93476
I (7705) SLAVE: OBJ 0x3ffaff70, WRITE (7006721 us), SL: 0, REG:1, TYPE:1, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (7795) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (7795) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (7805) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (7805) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (7815) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (7815) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (7825) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 02 00 01 02 33 33 f3 57 
D (7835) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129633
D (7835) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 02 00 01 02 33 33 
D (7845) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (7845) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (7855) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (7865) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2988, 1
D (7875) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 02 00 01 
D (7875) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (7885) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (7885) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (7895) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 02 00 01 a0 09 
D (7905) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (7905) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93476
I (7925) SLAVE: OBJ 0x3ffaff70, WRITE (7218313 us), SL: 0, REG:2, TYPE:1, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (8015) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (8015) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (8015) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (8015) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (8025) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (8025) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (8035) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 03 00 01 02 44 44 95 50 
D (8045) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129642
D (8055) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 03 00 01 02 44 44 
D (8055) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (8065) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (8065) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (8075) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298a, 1
D (8085) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 03 00 01 
D (8085) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (8095) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (8095) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (8105) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 03 00 01 f1 c9 
D (8115) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (8115) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93476
I (8125) SLAVE: OBJ 0x3ffaff70, WRITE (7429922 us), SL: 0, REG:3, TYPE:1, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (8225) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (8225) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (8225) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (8225) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (8235) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (8245) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (8245) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 02 00 05 67 d7 
D (8255) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129633
D (8265) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 05 
D (8265) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (8275) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (8275) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (8285) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (8295) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (8295) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (8305) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (8315) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (8315) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 40 08 
D (8325) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (8325) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93476
I (8335) SLAVE: OBJ 0x3ffaff70, WRITE (7641515 us), SL: 0, REG:4, TYPE:1, INST_ADDR:0x3ffb298c(0x5), SIZE:1
D (8475) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (8475) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (8475) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (8485) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (8485) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (8495) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (8505) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 00 00 01 84 0a 
D (8505) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 170413
D (8515) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 00 00 01 
D (8515) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (8525) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (8525) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (8535) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2984, 1
D (8545) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 11 11 
D (8545) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (8555) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (8565) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (8565) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 11 11 74 18 
D (8575) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (8575) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 91219
I (8585) SLAVE: OBJ 0x3ffaff70, READ (7892151 us), SL: 0, REG:0, TYPE:2, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (8685) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (8685) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (8685) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (8685) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (8695) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (8705) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (8705) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 01 00 01 d5 ca 
D (8715) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 128004
D (8725) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 01 00 01 
D (8725) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (8735) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (8735) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (8745) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2986, 1
D (8755) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 22 22 
D (8755) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (8765) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (8765) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (8775) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 22 22 20 fd 
D (8785) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (8785) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 91218
I (8795) SLAVE: OBJ 0x3ffaff70, READ (8099861 us), SL: 0, REG:1, TYPE:2, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (8895) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (8895) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (8895) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (8895) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (8905) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (8905) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (8915) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 02 00 01 25 ca 
D (8925) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 127943
D (8925) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 02 00 01 
D (8935) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (8935) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (8945) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (8955) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2988, 1
D (8965) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 33 33 
D (8965) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (8975) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (8975) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (8985) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 33 33 ec a1 
D (8985) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (8995) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 91219
I (9005) SLAVE: OBJ 0x3ffaff70, READ (8307510 us), SL: 0, REG:2, TYPE:2, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (9095) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (9095) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (9095) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (9105) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (9115) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (9115) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (9125) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 03 00 01 74 0a 
D (9125) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 128004
D (9135) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 03 00 01 
D (9145) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (9145) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (9155) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (9155) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb298a, 1
D (9165) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 44 44 
D (9175) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (9175) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (9185) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (9195) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 44 44 8b 77 
D (9195) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (9205) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 91219
I (9215) SLAVE: OBJ 0x3ffaff70, READ (8515220 us), SL: 0, REG:3, TYPE:2, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (9305) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (9305) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (9305) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (9315) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (9315) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (9325) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (9335) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 02 00 06 27 d6 
D (9335) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129227
D (9345) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 06 
D (9355) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (9355) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (9365) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (9365) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (9375) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (9385) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (9385) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (9395) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (9405) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 40 08 
D (9405) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (9415) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93476
I (9425) SLAVE: OBJ 0x3ffaff70, WRITE (8725897 us), SL: 0, REG:4, TYPE:1, INST_ADDR:0x3ffb298c(0x6), SIZE:1
D (9555) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (9555) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (9555) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (9565) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (9565) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (9575) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (9585) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 00 00 01 02 11 11 6a 0c 
D (9585) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 167248
D (9595) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 00 00 01 02 11 11 
D (9605) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (9605) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (9615) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (9615) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2984, 1
D (9625) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 00 00 01 
D (9635) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (9635) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (9645) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (9655) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 00 00 01 01 c9 
D (9655) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (9665) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93476
I (9665) SLAVE: OBJ 0x3ffaff70, WRITE (8975105 us), SL: 0, REG:0, TYPE:1, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (9765) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (9765) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (9765) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (9775) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (9785) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (9785) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (9795) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 01 00 01 02 22 22 3f 38 
D (9795) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129641
D (9805) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 01 00 01 02 22 22 
D (9815) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (9815) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (9825) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (9835) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2986, 1
D (9835) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 01 00 01 
D (9845) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (9855) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (9855) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (9865) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 01 00 01 50 09 
D (9865) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (9875) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 93476
I (9885) SLAVE: OBJ 0x3ffaff70, WRITE (9186714 us), SL: 0, REG:1, TYPE:1, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (9975) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (9975) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (9985) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (9985) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (9995) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (9995) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (10005) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 02 00 01 02 33 33 f3 57 
D (10015) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129633
D (10015) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 02 00 01 02 33 33 
D (10025) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (10025) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (10035) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (10045) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2988, 1
D (10055) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 02 00 01 
D (10055) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (10065) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (10065) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (10075) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 02 00 01 a0 09 
D (10085) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (10085) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 94518
I (10105) SLAVE: OBJ 0x3ffaff70, WRITE (9398827 us), SL: 0, REG:2, TYPE:1, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (10195) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (10195) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (10195) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (10205) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (10205) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (10215) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (10215) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 03 00 01 02 44 44 95 50 
D (10225) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 130770
D (10235) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 03 00 01 02 44 44 
D (10235) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (10245) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (10255) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (10255) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298a, 1
D (10265) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 03 00 01 
D (10275) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (10275) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (10285) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (10285) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 03 00 01 f1 c9 
D (10295) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (10305) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 94778
I (10305) SLAVE: OBJ 0x3ffaff70, WRITE (9612693 us), SL: 0, REG:3, TYPE:1, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (10405) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (10405) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (10405) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (10415) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (10425) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (10425) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (10435) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 02 00 07 e6 16 
D (10445) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 131698
D (10445) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 07 
D (10455) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (10455) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (10465) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (10475) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (10485) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (10485) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (10495) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (10495) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (10505) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 40 08 
D (10505) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (10515) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 94777
I (10525) SLAVE: OBJ 0x3ffaff70, WRITE (9827478 us), SL: 0, REG:4, TYPE:1, INST_ADDR:0x3ffb298c(0x7), SIZE:1
D (10665) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (10665) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (10665) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (10675) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (10675) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (10685) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (10695) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 00 00 01 84 0a 
D (10695) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 174629
D (10705) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 00 00 01 
D (10705) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (10715) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (10725) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (10725) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2984, 1
D (10735) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 11 11 
D (10745) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (10745) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (10755) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (10755) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 11 11 74 18 
D (10765) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (10775) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 92521
I (10775) SLAVE: OBJ 0x3ffaff70, READ (10083458 us), SL: 0, REG:0, TYPE:2, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (10875) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (10875) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (10875) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (10885) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (10885) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (10895) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (10905) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 01 00 01 d5 ca 
D (10905) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129998
D (10915) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 01 00 01 
D (10925) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (10925) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (10935) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (10935) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2986, 1
D (10945) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 22 22 
D (10955) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (10955) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (10965) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (10975) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 22 22 20 fd 
D (10975) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (10985) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 92521
I (10985) SLAVE: OBJ 0x3ffaff70, READ (10294291 us), SL: 0, REG:1, TYPE:2, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (11085) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (11085) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (11085) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (11095) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (11095) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (11105) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (11115) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 02 00 01 25 ca 
D (11115) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 130006
D (11125) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 02 00 01 
D (11135) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (11135) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (11145) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (11145) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2988, 1
D (11155) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 33 33 
D (11165) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (11165) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (11175) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (11185) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 33 33 ec a1 
D (11185) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (11195) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 92521
I (11195) SLAVE: OBJ 0x3ffaff70, READ (10505132 us), SL: 0, REG:2, TYPE:2, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (11295) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (11295) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (11295) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (11305) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (11315) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (11315) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (11325) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 03 00 01 74 0a 
D (11325) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129998
D (11335) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 03 00 01 
D (11345) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (11345) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (11355) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (11365) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb298a, 1
D (11365) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 44 44 
D (11375) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (11375) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (11385) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (11395) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 44 44 8b 77 
D (11395) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (11405) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 92521
I (11415) SLAVE: OBJ 0x3ffaff70, READ (10715973 us), SL: 0, REG:3, TYPE:2, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (11505) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (11505) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (11515) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (11515) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (11525) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (11525) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (11535) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 02 00 08 a6 12 
D (11545) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 131222
D (11555) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 08 
D (11555) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (11565) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (11565) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (11575) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (11585) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (11585) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (11595) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (11595) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (11605) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 40 08 
D (11615) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (11615) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 94778
I (11635) SLAVE: OBJ 0x3ffaff70, WRITE (10929766 us), SL: 0, REG:4, TYPE:1, INST_ADDR:0x3ffb298c(0x8), SIZE:1
D (11765) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (11765) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (11765) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (11775) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (11775) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (11785) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (11795) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 00 00 01 02 11 11 6a 0c 
D (11795) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 173545
D (11805) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 00 00 01 02 11 11 
D (11815) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (11815) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (11825) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (11835) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2984, 1
D (11835) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 00 00 01 
D (11845) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (11855) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (11855) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (11865) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 00 00 01 01 c9 
D (11865) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (11875) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 94778
I (11895) SLAVE: OBJ 0x3ffaff70, WRITE (11186399 us), SL: 0, REG:0, TYPE:1, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (11985) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (11985) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (11985) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (11985) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (11995) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (12005) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (12005) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 01 00 01 02 22 22 3f 38 
D (12015) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 131705
D (12025) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 01 00 01 02 22 22 
D (12025) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (12035) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (12035) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (12045) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2986, 1
D (12055) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 01 00 01 
D (12055) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (12065) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (12075) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (12075) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 01 00 01 50 09 
D (12085) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (12085) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 94778
I (12095) SLAVE: OBJ 0x3ffaff70, WRITE (11401200 us), SL: 0, REG:1, TYPE:1, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (12195) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (12195) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (12195) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (12205) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (12205) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (12215) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (12225) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 02 00 01 02 33 33 f3 57 
D (12225) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 131697
D (12235) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 02 00 01 02 33 33 
D (12245) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (12245) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (12255) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (12265) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2988, 1
D (12265) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 02 00 01 
D (12275) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (12275) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (12285) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (12295) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 02 00 01 a0 09 
D (12295) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (12305) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 94778
I (12315) SLAVE: OBJ 0x3ffaff70, WRITE (11615985 us), SL: 0, REG:2, TYPE:1, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (12415) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (12415) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (12415) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (12415) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (12425) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (12435) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (12435) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 03 00 01 02 44 44 95 50 
D (12445) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 131706
D (12455) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 03 00 01 02 44 44 
D (12455) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (12465) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (12465) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (12475) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298a, 1
D (12485) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 03 00 01 
D (12485) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (12495) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (12505) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (12505) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 03 00 01 f1 c9 
D (12515) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (12515) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 94778
I (12525) SLAVE: OBJ 0x3ffaff70, WRITE (11830786 us), SL: 0, REG:3, TYPE:1, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (12625) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (12625) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (12625) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (12635) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (12635) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (12645) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (12655) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 02 00 09 67 d2 
D (12655) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 131628
D (12665) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 09 
D (12675) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (12675) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (12685) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (12685) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (12695) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (12705) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (12705) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (12715) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (12725) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 40 08 
D (12725) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (12735) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 94777
I (12745) SLAVE: OBJ 0x3ffaff70, WRITE (12045502 us), SL: 0, REG:4, TYPE:1, INST_ADDR:0x3ffb298c(0x9), SIZE:1
D (12885) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (12885) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (12885) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (12895) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (12895) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (12905) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (12915) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 00 00 01 84 0a 
D (12915) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 176572
D (12925) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 00 00 01 
D (12925) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (12935) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (12945) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (12945) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2984, 1
D (12955) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 11 11 
D (12965) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (12965) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (12975) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (12975) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 11 11 74 18 
D (12985) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (12995) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 92521
I (12995) SLAVE: OBJ 0x3ffaff70, READ (12303425 us), SL: 0, REG:0, TYPE:2, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (13095) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (13095) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (13095) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (13105) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (13105) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (13115) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (13125) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 01 00 01 d5 ca 
D (13125) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129998
D (13135) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 01 00 01 
D (13145) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (13145) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (13155) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (13155) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2986, 1
D (13165) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 22 22 
D (13175) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (13175) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (13185) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (13195) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 22 22 20 fd 
D (13195) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (13205) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 92521
I (13205) SLAVE: OBJ 0x3ffaff70, READ (12514258 us), SL: 0, REG:1, TYPE:2, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (13305) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (13305) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (13305) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (13315) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (13315) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (13325) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (13335) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 02 00 01 25 ca 
D (13335) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 130007
D (13345) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 02 00 01 
D (13355) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (13355) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (13365) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (13365) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2988, 1
D (13375) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 33 33 
D (13385) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (13385) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (13395) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (13405) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 33 33 ec a1 
D (13405) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (13415) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 92521
I (13415) SLAVE: OBJ 0x3ffaff70, READ (12725099 us), SL: 0, REG:2, TYPE:2, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (13515) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (13515) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 8.
D (13515) mb_port.serial: mbs_rtu@0x3ffaff70, frame 8 bytes is ready.
D (13525) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (13535) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (13535) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 8 bytes.
D (13545) mbs_rtu@0x3ffaff70:PORT_RECV: 01 03 00 03 00 01 74 0a 
D (13545) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 129999
D (13555) mbs_rtu@0x3ffaff70:MB_RECV: 03 00 03 00 01 
D (13565) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (13565) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (13575) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (13575) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb298a, 1
D (13585) mbs_rtu@0x3ffaff70:MB_SEND: 03 02 44 44 
D (13595) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (13595) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (13605) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (7) bytes.
D (13615) mbs_rtu@0x3ffaff70:PORT_SEND: 01 03 02 44 44 8b 77 
D (13615) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (13625) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 92521
I (13635) SLAVE: OBJ 0x3ffaff70, READ (12935933 us), SL: 0, REG:3, TYPE:2, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (13725) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (13725) mb_port.serial: mbs_rtu@0x3ffaff70, data event, len: 11.
D (13735) mb_port.serial: mbs_rtu@0x3ffaff70, frame 11 bytes is ready.
D (13735) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (13745) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (13745) mb_port.serial: mbs_rtu@0x3ffaff70, received data: 11 bytes.
D (13755) mbs_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 02 00 0a 27 d3 
D (13765) mb_port.serial: mbs_rtu@0x3ffaff70, serial processing time[us] = 131222
D (13775) mbs_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 0a 
D (13775) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (13785) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (13785) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (13795) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (13805) mbs_rtu@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (13805) mb_port.serial: mbs_rtu@0x3ffaff70, UART[1] event:
D (13815) mb_port.serial: mbs_rtu@0x3ffaff70, uart rx break.
D (13815) mb_port.serial: mbs_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (13825) mbs_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 40 08 
D (13835) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (13835) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 94778
I (13855) SLAVE: OBJ 0x3ffaff70, WRITE (13149733 us), SL: 0, REG:4, TYPE:1, INST_ADDR:0x3ffb298c(0xa), SIZE:1
D (13915) TEST_COMMON: Stop slave: 0x3ffaff70.
I (13975) TEST_COMMON: Destroy slave, inst: 0x3ffaff70.
D (13975) mb_port.serial: mbs_rtu@0x3ffaff70, suspend port.
D (13975) mb_port.timer: mbs_rtu@0x3ffaff70, timer stop, returns 259.
D (13985) TEST_COMMON: Notify task done, inst: 0x3ffba8e4.
./main/test_modbus_rs485_comm_master_slave.c:126:Modbus RS485 RTU multi device master - slave case.:PASS
Test ran in 13216ms

&amp;lt;-------------------&amp;gt;

I (895) uart: queue free spaces: 20
D (895) intr_alloc: Connected src 35 to int 13 (cpu 0)
I (895) mb_port.serial: mbm_rtu@0x3ffaff70, suspend port from task.
D (895) mb_port.serial: created object @0x3ffb72d0
D (905) mb_port.timer: initialized mb_port.timer object @0x3ffb8dc8
D (905) mb_port.event: initialized object @0x3ffb8e00
D (915) mb_transp.rtu_master: created mb_transp.rtu_master object @0x3ffb701c
D (925) mb_object.master: created object mbm_rtu@0x3ffaff70
I (925) TEST_COMMON: 0x3ffaff70, modbus master stack is initialized
D (935) mb_port.serial: mbm_rtu@0x3ffaff70, resume port.
D (935) mb_port.timerD (945) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (945) mb_port.timer: timer mode: (0) triggered
: mbm_rtu@0x3ffaff70, start timer (1750).
I (955) TEST_COMMON: 0x3ffaff70, modbus master start...
D (965) mb_object.master: 0x3ffaff70:EV_READY
D (975) TEST_COMMON: Notify task start 0x3ffba6b8
D (975) TEST_COMMON: Task: 0x3ffba6b8, get notify value = 1
D (975) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (995) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (995) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 00 00 01 02 11 11 
D (995) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (1005) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (1005) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (1015) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 00 00 01 02 11 11 6a 0c 
D (1025) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (1025) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (1075) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (1075) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (1075) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (1085) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (1085) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (1095) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 00 00 01 01 c9 
D (1105) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 67279
D (1105) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (1115) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 00 00 01 
D (1115) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (1125) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (1135) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (1135) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (1145) mbm_error_cb_request_success: 10 00 00 00 01 02 11 11 
D (1145) mb_object.master: 0x3ffaff70, transaction processing time(us) = 139946
D (1165) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (1165) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(0) = ESP_OK
I (1185) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111), write successful.
D (1185) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (1185) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (1205) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 01 00 01 02 22 22 
D (1205) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (1205) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (1215) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (1225) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 01 00 01 02 22 22 3f 38 
D (1225) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (1235) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (1285) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (1285) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (1285) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (1285) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (1295) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (1305) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 01 00 01 50 09 
D (1305) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66942
D (1315) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (1325) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 01 00 01 
D (1325) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (1335) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (1335) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (1345) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (1345) mbm_error_cb_request_success: 10 00 01 00 01 02 22 22 
D (1355) mb_object.master: 0x3ffaff70, transaction processing time(us) = 136950
D (1375) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (1375) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(1) = ESP_OK
I (1395) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222), write successful.
D (1395) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (1395) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (1415) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 02 00 01 02 33 33 
D (1415) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (1415) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (1425) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (1425) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 02 00 01 02 33 33 f3 57 
D (1435) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (1445) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (1485) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (1485) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (1495) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (1495) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (1505) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (1505) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 02 00 01 a0 09 
D (1515) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 67717
D (1525) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (1525) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 02 00 01 
D (1535) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (1535) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (1545) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (1545) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (1555) mbm_error_cb_request_success: 10 00 02 00 01 02 33 33 
D (1565) mb_object.master: 0x3ffaff70, transaction processing time(us) = 134552
D (1575) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (1575) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(2) = ESP_OK
I (1595) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333), write successful.
D (1595) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (1615) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (1615) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 03 00 01 02 44 44 
D (1615) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (1625) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (1625) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (1635) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 03 00 01 02 44 44 95 50 
D (1645) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (1645) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (1695) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (1695) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (1695) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (1705) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (1705) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (1715) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 03 00 01 f1 c9 
D (1725) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66943
D (1725) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (1735) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 03 00 01 
D (1745) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (1745) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (1755) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (1755) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (1765) mbm_error_cb_request_success: 10 00 03 00 01 02 44 44 
D (1765) mb_object.master: 0x3ffaff70, transaction processing time(us) = 140275
D (1785) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (1785) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(3) = ESP_OK
I (1805) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444), write successful.
D (1805) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (1825) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (1825) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 00 00 01 
D (1825) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (1825) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (1835) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (1845) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 00 00 01 84 0a 
D (1845) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (1855) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (1905) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (1905) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (1905) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (1905) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (1915) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (1915) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 11 11 74 18 
D (1925) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 65284
D (1935) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (1935) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 11 11 
D (1945) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (1945) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (1955) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (1955) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (1965) mbm_error_cb_request_success: 03 00 00 00 01 
D (1975) mb_object.master: 0x3ffaff70, transaction processing time(us) = 134124
D (1985) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (1985) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(0) = ESP_OK
I (2005) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111) parameter read successful.
I (2005) TEST_COMMON: CHAR #0, value is ok.
D (2025) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (2025) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (2025) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 01 00 01 
D (2035) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (2035) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (2045) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (2045) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 01 00 01 d5 ca 
D (2055) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (2065) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (2105) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (2105) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (2105) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (2115) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (2125) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (2125) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 22 22 20 fd 
D (2135) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 65191
D (2135) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (2145) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 22 22 
D (2155) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (2155) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (2165) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (2165) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (2175) mbm_error_cb_request_success: 03 00 01 00 01 
D (2175) mb_object.master: 0x3ffaff70, transaction processing time(us) = 136342
D (2195) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (2195) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(1) = ESP_OK
I (2215) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222) parameter read successful.
I (2215) TEST_COMMON: CHAR #1, value is ok.
D (2215) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (2235) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (2235) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 02 00 01 
D (2235) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (2245) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (2255) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (2255) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 02 00 01 25 ca 
D (2265) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (2265) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (2315) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (2315) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (2315) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (2325) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (2325) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (2335) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 33 33 ec a1 
D (2345) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 65244
D (2345) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (2355) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 33 33 
D (2355) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (2365) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (2365) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (2375) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (2385) mbm_error_cb_request_success: 03 00 02 00 01 
D (2385) mb_object.master: 0x3ffaff70, transaction processing time(us) = 136395
D (2405) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (2405) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(2) = ESP_OK
I (2425) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333) parameter read successful.
I (2425) TEST_COMMON: CHAR #2, value is ok.
D (2425) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (2445) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (2445) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 03 00 01 
D (2445) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (2455) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (2455) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (2465) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 03 00 01 74 0a 
D (2475) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (2475) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (2525) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (2525) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (2525) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (2535) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (2535) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (2545) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 44 44 8b 77 
D (2545) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 65272
D (2555) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (2565) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 44 44 
D (2565) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (2575) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (2575) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (2585) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (2585) mbm_error_cb_request_success: 03 00 03 00 01 
D (2595) mb_object.master: 0x3ffaff70, transaction processing time(us) = 136419
D (2615) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (2615) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(3) = ESP_OK
I (2615) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444) parameter read successful.
I (2635) TEST_COMMON: CHAR #3, value is ok.
D (2635) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (2655) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (2655) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 00 
D (2655) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (2665) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (2665) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (2675) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 02 00 00 a7 d4 
D (2675) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (2685) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (2735) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (2735) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (2735) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (2745) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (2745) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (2755) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 40 08 
D (2755) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66861
D (2765) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (2775) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (2775) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (2785) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (2785) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (2795) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (2805) mbm_error_cb_request_success: 10 00 04 00 01 02 00 00 
D (2805) mb_object.master: 0x3ffaff70, transaction processing time(us) = 138687
D (2825) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (2825) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (2845) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x0000), write successful.
D (2905) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (2905) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (2905) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 00 00 01 02 11 11 
D (2905) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (2915) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (2925) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (2925) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 00 00 01 02 11 11 6a 0c 
D (2935) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (2945) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (2985) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (2985) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (2985) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (2995) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (3005) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (3005) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 00 00 01 01 c9 
D (3015) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66866
D (3025) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (3025) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 00 00 01 
D (3035) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (3035) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (3045) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (3045) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (3055) mbm_error_cb_request_success: 10 00 00 00 01 02 11 11 
D (3065) mb_object.master: 0x3ffaff70, transaction processing time(us) = 140199
D (3075) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (3075) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(0) = ESP_OK
I (3095) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111), write successful.
I (3095) TEST_COMMON: CHAR #0, value is ok.
D (3115) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (3115) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (3115) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 01 00 01 02 22 22 
D (3125) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (3125) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (3135) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (3135) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 01 00 01 02 22 22 3f 38 
D (3145) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (3155) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (3205) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (3205) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (3205) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (3205) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (3215) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (3215) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 01 00 01 50 09 
D (3225) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66886
D (3235) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (3235) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 01 00 01 
D (3245) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (3245) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (3255) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (3265) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (3265) mbm_error_cb_request_success: 10 00 01 00 01 02 22 22 
D (3275) mb_object.master: 0x3ffaff70, transaction processing time(us) = 140215
D (3285) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (3285) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(1) = ESP_OK
I (3305) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222), write successful.
I (3305) TEST_COMMON: CHAR #1, value is ok.
D (3325) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (3325) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (3325) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 02 00 01 02 33 33 
D (3335) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (3335) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (3345) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (3355) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 02 00 01 02 33 33 f3 57 
D (3355) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (3365) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (3415) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (3415) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (3415) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (3415) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (3425) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (3435) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 02 00 01 a0 09 
D (3435) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66872
D (3445) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (3455) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 02 00 01 
D (3455) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (3465) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (3465) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (3475) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (3475) mbm_error_cb_request_success: 10 00 02 00 01 02 33 33 
D (3485) mb_object.master: 0x3ffaff70, transaction processing time(us) = 140206
D (3505) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (3505) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(2) = ESP_OK
I (3505) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333), write successful.
I (3525) TEST_COMMON: CHAR #2, value is ok.
D (3525) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (3545) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (3545) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 03 00 01 02 44 44 
D (3545) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (3545) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (3555) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (3565) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 03 00 01 02 44 44 95 50 
D (3565) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (3575) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (3625) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (3625) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (3625) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (3635) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (3635) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (3645) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 03 00 01 f1 c9 
D (3645) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66890
D (3655) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (3665) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 03 00 01 
D (3665) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (3675) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (3675) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (3685) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (3685) mbm_error_cb_request_success: 10 00 03 00 01 02 44 44 
D (3695) mb_object.master: 0x3ffaff70, transaction processing time(us) = 137807
D (3715) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (3715) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(3) = ESP_OK
I (3735) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444), write successful.
I (3735) TEST_COMMON: CHAR #3, value is ok.
D (3735) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (3755) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (3755) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 01 
D (3755) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (3765) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (3765) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (3775) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 02 00 01 66 14 
D (3785) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (3785) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (3835) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (3835) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (3835) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (3845) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (3845) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (3855) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 40 08 
D (3855) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66869
D (3865) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (3875) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (3875) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (3885) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (3885) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (3895) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (3905) mbm_error_cb_request_success: 10 00 04 00 01 02 00 01 
D (3905) mb_object.master: 0x3ffaff70, transaction processing time(us) = 139373
D (3925) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (3925) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (3945) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x0001), write successful.
D (4005) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (4005) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (4005) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 00 00 01 
D (4005) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (4015) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (4015) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (4025) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 00 00 01 84 0a 
D (4035) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (4035) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (4085) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (4085) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (4085) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (4095) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (4095) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (4105) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 11 11 74 18 
D (4105) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 65301
D (4115) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (4125) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 11 11 
D (4125) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (4135) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (4135) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (4145) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (4155) mbm_error_cb_request_success: 03 00 00 00 01 
D (4155) mb_object.master: 0x3ffaff70, transaction processing time(us) = 136449
D (4175) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (4175) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(0) = ESP_OK
I (4195) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111) parameter read successful.
I (4195) TEST_COMMON: CHAR #0, value is ok.
D (4195) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (4215) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (4215) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 01 00 01 
D (4215) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (4225) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (4225) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (4235) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 01 00 01 d5 ca 
D (4245) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (4245) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (4295) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (4295) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (4295) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (4295) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (4305) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (4315) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 22 22 20 fd 
D (4315) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 65191
D (4325) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (4335) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 22 22 
D (4335) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (4345) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (4345) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (4355) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (4355) mbm_error_cb_request_success: 03 00 01 00 01 
D (4365) mb_object.master: 0x3ffaff70, transaction processing time(us) = 136342
D (4385) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (4385) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(1) = ESP_OK
I (4385) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222) parameter read successful.
I (4405) TEST_COMMON: CHAR #1, value is ok.
D (4405) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (4425) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (4425) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 02 00 01 
D (4425) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (4425) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (4435) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (4445) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 02 00 01 25 ca 
D (4445) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (4455) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (4505) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (4505) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (4505) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (4505) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (4515) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (4515) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 33 33 ec a1 
D (4525) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 65252
D (4535) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (4535) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 33 33 
D (4545) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (4545) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (4555) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (4565) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (4565) mbm_error_cb_request_success: 03 00 02 00 01 
D (4575) mb_object.master: 0x3ffaff70, transaction processing time(us) = 134615
D (4585) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (4585) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(2) = ESP_OK
I (4605) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333) parameter read successful.
I (4605) TEST_COMMON: CHAR #2, value is ok.
D (4625) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (4625) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (4625) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 03 00 01 
D (4635) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (4635) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (4645) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (4645) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 03 00 01 74 0a 
D (4655) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (4665) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (4705) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (4705) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (4705) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (4715) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (4725) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (4725) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 44 44 8b 77 
D (4735) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 65256
D (4745) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (4745) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 44 44 
D (4755) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (4755) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (4765) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (4765) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (4775) mbm_error_cb_request_success: 03 00 03 00 01 
D (4775) mb_object.master: 0x3ffaff70, transaction processing time(us) = 136403
D (4795) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (4795) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(3) = ESP_OK
I (4815) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444) parameter read successful.
I (4815) TEST_COMMON: CHAR #3, value is ok.
D (4835) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (4835) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (4835) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 02 
D (4845) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (4845) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (4855) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (4855) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 02 00 02 26 15 
D (4865) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (4875) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (4915) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (4915) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (4925) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (4925) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (4935) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (4935) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 40 08 
D (4945) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66946
D (4955) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (4955) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (4965) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (4965) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (4975) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (4975) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (4985) mbm_error_cb_request_success: 10 00 04 00 01 02 00 02 
D (4995) mb_object.master: 0x3ffaff70, transaction processing time(us) = 140263
D (5005) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (5005) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (5025) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x0002), write successful.
D (5085) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (5085) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (5085) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 00 00 01 02 11 11 
D (5085) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (5095) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (5105) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (5105) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 00 00 01 02 11 11 6a 0c 
D (5115) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (5125) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (5165) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (5165) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (5165) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (5175) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (5185) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (5185) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 00 00 01 01 c9 
D (5195) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66862
D (5205) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (5205) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 00 00 01 
D (5215) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (5215) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (5225) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (5225) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (5235) mbm_error_cb_request_success: 10 00 00 00 01 02 11 11 
D (5245) mb_object.master: 0x3ffaff70, transaction processing time(us) = 140196
D (5255) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (5255) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(0) = ESP_OK
I (5275) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111), write successful.
I (5275) TEST_COMMON: CHAR #0, value is ok.
D (5295) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (5295) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (5295) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 01 00 01 02 22 22 
D (5305) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (5305) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (5315) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (5315) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 01 00 01 02 22 22 3f 38 
D (5325) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (5335) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (5385) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (5385) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (5385) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (5385) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (5395) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (5395) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 01 00 01 50 09 
D (5405) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66886
D (5415) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (5415) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 01 00 01 
D (5425) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (5425) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (5435) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (5445) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (5445) mbm_error_cb_request_success: 10 00 01 00 01 02 22 22 
D (5455) mb_object.master: 0x3ffaff70, transaction processing time(us) = 140215
D (5465) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (5465) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(1) = ESP_OK
I (5485) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222), write successful.
I (5485) TEST_COMMON: CHAR #1, value is ok.
D (5505) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (5505) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (5505) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 02 00 01 02 33 33 
D (5515) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (5515) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (5525) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (5535) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 02 00 01 02 33 33 f3 57 
D (5535) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (5545) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (5595) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (5595) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (5595) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (5595) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (5605) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (5615) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 02 00 01 a0 09 
D (5615) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66873
D (5625) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (5635) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 02 00 01 
D (5635) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (5645) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (5645) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (5655) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (5655) mbm_error_cb_request_success: 10 00 02 00 01 02 33 33 
D (5665) mb_object.master: 0x3ffaff70, transaction processing time(us) = 140206
D (5685) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (5685) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(2) = ESP_OK
I (5685) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333), write successful.
I (5705) TEST_COMMON: CHAR #2, value is ok.
D (5705) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (5725) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (5725) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 03 00 01 02 44 44 
D (5725) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (5725) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (5735) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (5745) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 03 00 01 02 44 44 95 50 
D (5745) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (5755) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (5805) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (5805) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (5805) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (5815) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (5815) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (5825) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 03 00 01 f1 c9 
D (5825) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66890
D (5835) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (5845) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 03 00 01 
D (5845) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (5855) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (5855) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (5865) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (5865) mbm_error_cb_request_success: 10 00 03 00 01 02 44 44 
D (5875) mb_object.master: 0x3ffaff70, transaction processing time(us) = 137804
D (5895) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (5895) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(3) = ESP_OK
I (5915) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444), write successful.
I (5915) TEST_COMMON: CHAR #3, value is ok.
D (5915) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (5935) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (5935) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 03 
D (5935) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (5945) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (5945) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (5955) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 02 00 03 e7 d5 
D (5965) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (5965) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (6015) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (6015) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (6015) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (6025) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (6025) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (6035) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 40 08 
D (6035) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66869
D (6045) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (6055) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (6055) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (6065) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (6065) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (6075) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (6085) mbm_error_cb_request_success: 10 00 04 00 01 02 00 03 
D (6085) mb_object.master: 0x3ffaff70, transaction processing time(us) = 139370
D (6105) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (6105) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (6125) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x0003), write successful.
D (6185) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (6185) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (6185) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 00 00 01 
D (6185) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (6195) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (6195) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (6205) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 00 00 01 84 0a 
D (6215) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (6215) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (6265) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (6265) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (6265) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (6275) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (6275) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (6285) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 11 11 74 18 
D (6285) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 65293
D (6295) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (6305) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 11 11 
D (6305) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (6315) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (6315) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (6325) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (6335) mbm_error_cb_request_success: 03 00 00 00 01 
D (6335) mb_object.master: 0x3ffaff70, transaction processing time(us) = 136441
D (6355) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (6355) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(0) = ESP_OK
I (6375) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111) parameter read successful.
I (6375) TEST_COMMON: CHAR #0, value is ok.
D (6375) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (6395) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (6395) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 01 00 01 
D (6395) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (6405) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (6405) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (6415) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 01 00 01 d5 ca 
D (6425) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (6425) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (6475) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (6475) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (6475) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (6475) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (6485) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (6495) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 22 22 20 fd 
D (6495) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 65198
D (6505) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (6515) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 22 22 
D (6515) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (6525) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (6525) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (6535) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (6535) mbm_error_cb_request_success: 03 00 01 00 01 
D (6545) mb_object.master: 0x3ffaff70, transaction processing time(us) = 136349
D (6565) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (6565) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(1) = ESP_OK
I (6565) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222) parameter read successful.
I (6585) TEST_COMMON: CHAR #1, value is ok.
D (6585) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (6605) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (6605) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 02 00 01 
D (6605) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (6605) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (6615) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (6625) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 02 00 01 25 ca 
D (6625) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (6635) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (6685) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (6685) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (6685) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (6685) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (6695) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (6695) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 33 33 ec a1 
D (6705) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 65245
D (6715) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (6715) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 33 33 
D (6725) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (6725) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (6735) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (6745) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (6745) mbm_error_cb_request_success: 03 00 02 00 01 
D (6755) mb_object.master: 0x3ffaff70, transaction processing time(us) = 134604
D (6765) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (6765) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(2) = ESP_OK
I (6785) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333) parameter read successful.
I (6785) TEST_COMMON: CHAR #2, value is ok.
D (6805) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (6805) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (6805) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 03 00 01 
D (6815) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (6815) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (6825) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (6825) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 03 00 01 74 0a 
D (6835) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (6845) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (6885) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (6885) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (6885) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (6895) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (6905) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (6905) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 44 44 8b 77 
D (6915) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 65264
D (6925) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (6925) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 44 44 
D (6935) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (6935) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (6945) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (6945) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (6955) mbm_error_cb_request_success: 03 00 03 00 01 
D (6955) mb_object.master: 0x3ffaff70, transaction processing time(us) = 136411
D (6975) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (6975) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(3) = ESP_OK
I (6995) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444) parameter read successful.
I (6995) TEST_COMMON: CHAR #3, value is ok.
D (7015) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (7015) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (7015) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 04 
D (7025) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (7025) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (7035) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (7035) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 02 00 04 a6 17 
D (7045) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (7055) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (7095) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (7095) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (7105) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (7105) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (7115) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (7115) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 40 08 
D (7125) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66938
D (7135) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (7135) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (7145) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (7145) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (7155) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (7155) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (7165) mbm_error_cb_request_success: 10 00 04 00 01 02 00 04 
D (7175) mb_object.master: 0x3ffaff70, transaction processing time(us) = 140255
D (7185) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (7185) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (7205) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x0004), write successful.
D (7265) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (7265) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (7265) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 00 00 01 02 11 11 
D (7265) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (7275) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (7285) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (7285) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 00 00 01 02 11 11 6a 0c 
D (7295) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (7305) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (7345) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (7345) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (7345) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (7355) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (7365) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (7365) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 00 00 01 01 c9 
D (7375) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66920
D (7385) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (7385) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 00 00 01 
D (7395) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (7395) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (7405) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (7405) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (7415) mbm_error_cb_request_success: 10 00 00 00 01 02 11 11 
D (7425) mb_object.master: 0x3ffaff70, transaction processing time(us) = 140254
D (7435) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (7435) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(0) = ESP_OK
I (7455) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111), write successful.
I (7455) TEST_COMMON: CHAR #0, value is ok.
D (7475) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (7475) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (7475) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 01 00 01 02 22 22 
D (7485) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (7485) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (7495) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (7495) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 01 00 01 02 22 22 3f 38 
D (7505) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (7515) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (7565) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (7565) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (7565) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (7565) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (7575) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (7575) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 01 00 01 50 09 
D (7585) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66882
D (7595) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (7595) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 01 00 01 
D (7605) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (7605) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (7615) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (7625) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (7625) mbm_error_cb_request_success: 10 00 01 00 01 02 22 22 
D (7635) mb_object.master: 0x3ffaff70, transaction processing time(us) = 140211
D (7645) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (7645) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(1) = ESP_OK
I (7665) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222), write successful.
I (7665) TEST_COMMON: CHAR #1, value is ok.
D (7685) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (7685) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (7685) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 02 00 01 02 33 33 
D (7695) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (7695) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (7705) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (7715) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 02 00 01 02 33 33 f3 57 
D (7715) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (7725) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (7775) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (7775) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (7775) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (7775) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (7785) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (7795) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 02 00 01 a0 09 
D (7795) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66877
D (7805) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (7815) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 02 00 01 
D (7815) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (7825) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (7825) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (7835) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (7835) mbm_error_cb_request_success: 10 00 02 00 01 02 33 33 
D (7845) mb_object.master: 0x3ffaff70, transaction processing time(us) = 140210
D (7865) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (7865) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(2) = ESP_OK
I (7865) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333), write successful.
I (7885) TEST_COMMON: CHAR #2, value is ok.
D (7885) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (7905) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (7905) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 03 00 01 02 44 44 
D (7905) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (7905) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (7915) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (7925) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 03 00 01 02 44 44 95 50 
D (7925) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (7935) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (7985) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (7985) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (7985) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (7995) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (7995) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (8005) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 03 00 01 f1 c9 
D (8005) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66889
D (8015) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (8025) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 03 00 01 
D (8025) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (8035) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (8035) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (8045) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (8045) mbm_error_cb_request_success: 10 00 03 00 01 02 44 44 
D (8055) mb_object.master: 0x3ffaff70, transaction processing time(us) = 137861
D (8075) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (8075) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(3) = ESP_OK
I (8095) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444), write successful.
I (8095) TEST_COMMON: CHAR #3, value is ok.
D (8095) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (8115) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (8115) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 05 
D (8115) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (8125) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (8125) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (8135) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 02 00 05 67 d7 
D (8145) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (8145) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (8195) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (8195) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (8195) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (8205) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (8205) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (8215) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 40 08 
D (8215) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66883
D (8225) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (8235) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (8235) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (8245) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (8245) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (8255) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (8265) mbm_error_cb_request_success: 10 00 04 00 01 02 00 05 
D (8265) mb_object.master: 0x3ffaff70, transaction processing time(us) = 139428
D (8285) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (8285) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (8305) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x0005), write successful.
D (8365) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (8365) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (8365) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 00 00 01 
D (8365) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (8375) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (8375) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (8385) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 00 00 01 84 0a 
D (8395) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (8395) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (8445) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (8445) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (8445) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (8455) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (8455) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (8465) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 11 11 74 18 
D (8465) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 65286
D (8475) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (8485) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 11 11 
D (8485) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (8495) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (8495) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (8505) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (8515) mbm_error_cb_request_success: 03 00 00 00 01 
D (8515) mb_object.master: 0x3ffaff70, transaction processing time(us) = 136433
D (8535) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (8535) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(0) = ESP_OK
I (8555) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111) parameter read successful.
I (8555) TEST_COMMON: CHAR #0, value is ok.
D (8555) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (8575) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (8575) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 01 00 01 
D (8575) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (8585) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (8585) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (8595) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 01 00 01 d5 ca 
D (8605) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (8605) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (8655) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (8655) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (8655) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (8655) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (8665) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (8675) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 22 22 20 fd 
D (8675) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 65191
D (8685) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (8695) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 22 22 
D (8695) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (8705) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (8705) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (8715) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (8715) mbm_error_cb_request_success: 03 00 01 00 01 
D (8725) mb_object.master: 0x3ffaff70, transaction processing time(us) = 136342
D (8745) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (8745) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(1) = ESP_OK
I (8745) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222) parameter read successful.
I (8765) TEST_COMMON: CHAR #1, value is ok.
D (8765) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (8785) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (8785) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 02 00 01 
D (8785) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (8785) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (8795) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (8805) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 02 00 01 25 ca 
D (8805) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (8815) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (8865) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (8865) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (8865) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (8865) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (8875) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (8875) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 33 33 ec a1 
D (8885) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 65252
D (8895) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (8895) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 33 33 
D (8905) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (8905) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (8915) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (8925) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (8925) mbm_error_cb_request_success: 03 00 02 00 01 
D (8935) mb_object.master: 0x3ffaff70, transaction processing time(us) = 134600
D (8945) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (8945) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(2) = ESP_OK
I (8965) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333) parameter read successful.
I (8965) TEST_COMMON: CHAR #2, value is ok.
D (8985) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (8985) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (8985) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 03 00 01 
D (8995) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (8995) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (9005) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (9005) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 03 00 01 74 0a 
D (9015) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (9025) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (9065) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (9065) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (9065) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (9075) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (9085) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (9085) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 44 44 8b 77 
D (9095) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 65256
D (9105) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (9105) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 44 44 
D (9115) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (9115) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (9125) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (9125) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (9135) mbm_error_cb_request_success: 03 00 03 00 01 
D (9135) mb_object.master: 0x3ffaff70, transaction processing time(us) = 136404
D (9155) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (9155) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(3) = ESP_OK
I (9175) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444) parameter read successful.
I (9175) TEST_COMMON: CHAR #3, value is ok.
D (9195) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (9195) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (9195) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 06 
D (9205) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (9205) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (9215) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (9215) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 02 00 06 27 d6 
D (9225) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (9235) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (9275) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (9275) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (9275) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (9285) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (9295) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (9295) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 40 08 
D (9305) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66877
D (9315) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (9315) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (9325) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (9325) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (9335) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (9335) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (9345) mbm_error_cb_request_success: 10 00 04 00 01 02 00 06 
D (9355) mb_object.master: 0x3ffaff70, transaction processing time(us) = 140194
D (9365) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (9365) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (9385) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x0006), write successful.
D (9445) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (9445) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (9445) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 00 00 01 02 11 11 
D (9445) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (9455) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (9465) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (9465) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 00 00 01 02 11 11 6a 0c 
D (9475) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (9485) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (9525) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (9525) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (9525) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (9535) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (9545) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (9545) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 00 00 01 01 c9 
D (9555) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66917
D (9565) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (9565) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 00 00 01 
D (9575) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (9575) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (9585) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (9585) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (9595) mbm_error_cb_request_success: 10 00 00 00 01 02 11 11 
D (9605) mb_object.master: 0x3ffaff70, transaction processing time(us) = 140251
D (9615) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (9615) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(0) = ESP_OK
I (9635) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111), write successful.
I (9635) TEST_COMMON: CHAR #0, value is ok.
D (9655) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (9655) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (9655) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 01 00 01 02 22 22 
D (9665) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (9665) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (9675) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (9675) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 01 00 01 02 22 22 3f 38 
D (9685) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (9695) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (9745) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (9745) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (9745) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (9745) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (9755) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (9755) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 01 00 01 50 09 
D (9765) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66882
D (9775) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (9775) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 01 00 01 
D (9785) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (9785) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (9795) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (9805) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (9805) mbm_error_cb_request_success: 10 00 01 00 01 02 22 22 
D (9815) mb_object.master: 0x3ffaff70, transaction processing time(us) = 140210
D (9825) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (9825) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(1) = ESP_OK
I (9845) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222), write successful.
I (9845) TEST_COMMON: CHAR #1, value is ok.
D (9865) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (9865) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (9865) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 02 00 01 02 33 33 
D (9875) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (9875) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (9885) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (9895) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 02 00 01 02 33 33 f3 57 
D (9895) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (9905) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (9955) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (9955) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (9955) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (9955) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (9965) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (9975) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 02 00 01 a0 09 
D (9975) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 67571
D (9985) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (9995) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 02 00 01 
D (9995) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (10005) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (10005) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (10015) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (10015) mbm_error_cb_request_success: 10 00 02 00 01 02 33 33 
D (10025) mb_object.master: 0x3ffaff70, transaction processing time(us) = 140992
D (10045) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (10045) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(2) = ESP_OK
I (10065) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333), write successful.
I (10065) TEST_COMMON: CHAR #2, value is ok.
D (10065) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (10085) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (10085) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 03 00 01 02 44 44 
D (10085) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (10095) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (10095) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (10105) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 03 00 01 02 44 44 95 50 
D (10115) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (10115) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (10165) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (10165) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (10165) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (10175) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (10175) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (10185) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 03 00 01 f1 c9 
D (10195) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 68139
D (10195) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (10205) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 03 00 01 
D (10215) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (10215) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (10225) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (10225) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (10235) mbm_error_cb_request_success: 10 00 03 00 01 02 44 44 
D (10235) mb_object.master: 0x3ffaff70, transaction processing time(us) = 141783
D (10255) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (10255) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(3) = ESP_OK
I (10275) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444), write successful.
I (10275) TEST_COMMON: CHAR #3, value is ok.
D (10295) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (10295) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (10295) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 07 
D (10305) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (10305) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (10315) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (10315) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 02 00 07 e6 16 
D (10325) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (10335) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (10385) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (10385) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (10385) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (10385) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (10395) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (10405) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 40 08 
D (10405) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 68160
D (10415) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (10425) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (10425) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (10435) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (10435) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (10445) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (10445) mbm_error_cb_request_success: 10 00 04 00 01 02 00 07 
D (10455) mb_object.master: 0x3ffaff70, transaction processing time(us) = 142535
D (10475) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (10475) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (10495) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x0007), write successful.
D (10555) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (10555) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (10555) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 00 00 01 
D (10555) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (10565) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (10575) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (10575) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 00 00 01 84 0a 
D (10585) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (10595) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (10635) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (10635) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (10635) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (10645) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (10645) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (10655) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 11 11 74 18 
D (10665) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66486
D (10665) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (10675) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 11 11 
D (10685) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (10685) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (10695) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (10695) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (10705) mbm_error_cb_request_success: 03 00 00 00 01 
D (10705) mb_object.master: 0x3ffaff70, transaction processing time(us) = 138674
D (10725) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (10725) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(0) = ESP_OK
I (10745) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111) parameter read successful.
I (10745) TEST_COMMON: CHAR #0, value is ok.
D (10765) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (10765) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (10765) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 01 00 01 
D (10765) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (10775) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (10785) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (10785) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 01 00 01 d5 ca 
D (10795) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (10805) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (10845) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (10845) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (10845) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (10855) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (10865) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (10865) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 22 22 20 fd 
D (10875) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66474
D (10885) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (10885) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 22 22 
D (10895) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (10895) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (10905) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (10905) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (10915) mbm_error_cb_request_success: 03 00 01 00 01 
D (10915) mb_object.master: 0x3ffaff70, transaction processing time(us) = 138666
D (10935) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (10935) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(1) = ESP_OK
I (10955) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222) parameter read successful.
I (10955) TEST_COMMON: CHAR #1, value is ok.
D (10975) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (10975) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (10975) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 02 00 01 
D (10985) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (10985) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (10995) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (10995) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 02 00 01 25 ca 
D (11005) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (11015) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (11055) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (11055) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (11055) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (11065) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (11075) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (11075) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 33 33 ec a1 
D (11085) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66466
D (11095) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (11095) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 33 33 
D (11105) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (11105) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (11115) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (11115) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (11125) mbm_error_cb_request_success: 03 00 02 00 01 
D (11135) mb_object.master: 0x3ffaff70, transaction processing time(us) = 138659
D (11145) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (11145) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(2) = ESP_OK
I (11165) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333) parameter read successful.
I (11165) TEST_COMMON: CHAR #2, value is ok.
D (11185) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (11185) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (11185) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 03 00 01 
D (11195) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (11195) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (11205) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (11205) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 03 00 01 74 0a 
D (11215) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (11225) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (11265) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (11265) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (11275) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (11275) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (11285) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (11285) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 44 44 8b 77 
D (11295) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66477
D (11305) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (11305) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 44 44 
D (11315) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (11315) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (11325) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (11325) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (11335) mbm_error_cb_request_success: 03 00 03 00 01 
D (11345) mb_object.master: 0x3ffaff70, transaction processing time(us) = 138666
D (11355) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (11355) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(3) = ESP_OK
I (11375) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444) parameter read successful.
I (11375) TEST_COMMON: CHAR #3, value is ok.
D (11395) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (11395) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (11395) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 08 
D (11405) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (11405) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (11415) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (11425) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 02 00 08 a6 12 
D (11425) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (11435) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (11485) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (11485) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (11485) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (11495) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (11495) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (11505) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 40 08 
D (11505) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 68152
D (11515) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (11525) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (11525) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (11535) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (11535) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (11545) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (11555) mbm_error_cb_request_success: 10 00 04 00 01 02 00 08 
D (11555) mb_object.master: 0x3ffaff70, transaction processing time(us) = 142510
D (11575) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (11575) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (11595) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x0008), write successful.
D (11655) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (11655) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (11655) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 00 00 01 02 11 11 
D (11655) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (11665) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (11675) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (11675) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 00 00 01 02 11 11 6a 0c 
D (11685) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (11695) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (11735) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (11745) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (11745) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (11745) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (11755) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (11755) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 00 00 01 01 c9 
D (11765) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 68177
D (11775) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (11785) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 00 00 01 
D (11785) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (11795) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (11795) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (11805) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (11805) mbm_error_cb_request_success: 10 00 00 00 01 02 11 11 
D (11815) mb_object.master: 0x3ffaff70, transaction processing time(us) = 142551
D (11835) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (11835) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(0) = ESP_OK
I (11835) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111), write successful.
I (11855) TEST_COMMON: CHAR #0, value is ok.
D (11855) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (11875) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (11875) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 01 00 01 02 22 22 
D (11875) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (11875) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (11885) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (11895) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 01 00 01 02 22 22 3f 38 
D (11895) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (11905) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (11955) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (11955) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (11955) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (11965) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (11965) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (11975) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 01 00 01 50 09 
D (11985) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 68150
D (11985) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (11995) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 01 00 01 
D (12005) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (12005) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (12015) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (12015) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (12025) mbm_error_cb_request_success: 10 00 01 00 01 02 22 22 
D (12025) mb_object.master: 0x3ffaff70, transaction processing time(us) = 140283
D (12045) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (12045) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(1) = ESP_OK
I (12065) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222), write successful.
I (12065) TEST_COMMON: CHAR #1, value is ok.
D (12065) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (12085) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (12085) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 02 00 01 02 33 33 
D (12085) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (12095) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (12105) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (12105) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 02 00 01 02 33 33 f3 57 
D (12115) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (12125) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (12165) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (12165) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (12175) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (12175) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (12185) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (12185) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 02 00 01 a0 09 
D (12195) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 68168
D (12205) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (12205) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 02 00 01 
D (12215) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (12215) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (12225) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (12235) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (12235) mbm_error_cb_request_success: 10 00 02 00 01 02 33 33 
D (12245) mb_object.master: 0x3ffaff70, transaction processing time(us) = 142543
D (12265) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (12265) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(2) = ESP_OK
I (12265) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333), write successful.
I (12285) TEST_COMMON: CHAR #2, value is ok.
D (12285) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (12305) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (12305) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 03 00 01 02 44 44 
D (12305) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (12305) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (12315) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (12325) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 03 00 01 02 44 44 95 50 
D (12325) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (12335) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (12385) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (12385) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (12385) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (12395) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (12395) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (12405) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 03 00 01 f1 c9 
D (12405) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 68156
D (12415) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (12425) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 03 00 01 
D (12425) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (12435) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (12445) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (12445) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (12455) mbm_error_cb_request_success: 10 00 03 00 01 02 44 44 
D (12455) mb_object.master: 0x3ffaff70, transaction processing time(us) = 139872
D (12475) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (12475) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(3) = ESP_OK
I (12495) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444), write successful.
I (12495) TEST_COMMON: CHAR #3, value is ok.
D (12495) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (12515) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (12515) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 09 
D (12515) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (12525) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (12535) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (12535) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 02 00 09 67 d2 
D (12545) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (12555) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (12595) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (12595) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (12595) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (12605) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (12615) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (12615) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 40 08 
D (12625) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 68098
D (12635) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (12635) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (12645) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (12645) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (12655) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (12665) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (12665) mbm_error_cb_request_success: 10 00 04 00 01 02 00 09 
D (12675) mb_object.master: 0x3ffaff70, transaction processing time(us) = 142474
D (12695) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (12695) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (12695) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x0009), write successful.
D (12775) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (12775) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (12775) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 00 00 01 
D (12775) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (12785) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (12795) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (12795) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 00 00 01 84 0a 
D (12805) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (12815) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (12855) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (12855) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (12855) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (12865) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (12865) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (12875) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 11 11 74 18 
D (12885) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66453
D (12885) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (12895) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 11 11 
D (12905) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (12905) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (12915) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (12915) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (12925) mbm_error_cb_request_success: 03 00 00 00 01 
D (12925) mb_object.master: 0x3ffaff70, transaction processing time(us) = 138642
D (12945) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (12945) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(0) = ESP_OK
I (12965) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111) parameter read successful.
I (12965) TEST_COMMON: CHAR #0, value is ok.
D (12985) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (12985) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (12985) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 01 00 01 
D (12985) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (12995) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (13005) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (13005) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 01 00 01 d5 ca 
D (13015) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (13025) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (13065) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (13065) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (13065) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (13075) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (13085) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (13085) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 22 22 20 fd 
D (13095) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66457
D (13105) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (13105) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 22 22 
D (13115) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (13115) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (13125) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (13125) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (13135) mbm_error_cb_request_success: 03 00 01 00 01 
D (13135) mb_object.master: 0x3ffaff70, transaction processing time(us) = 138651
D (13155) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (13155) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(1) = ESP_OK
I (13175) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222) parameter read successful.
I (13175) TEST_COMMON: CHAR #1, value is ok.
D (13195) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (13195) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (13195) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 02 00 01 
D (13205) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (13205) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (13215) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (13215) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 02 00 01 25 ca 
D (13225) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (13235) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (13275) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (13275) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (13275) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (13285) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (13295) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (13295) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 33 33 ec a1 
D (13305) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66473
D (13315) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (13315) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 33 33 
D (13325) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (13325) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (13335) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (13335) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (13345) mbm_error_cb_request_success: 03 00 02 00 01 
D (13355) mb_object.master: 0x3ffaff70, transaction processing time(us) = 138666
D (13365) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (13365) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(2) = ESP_OK
I (13385) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333) parameter read successful.
I (13385) TEST_COMMON: CHAR #2, value is ok.
D (13405) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (13405) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (13405) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 03 00 03 00 01 
D (13415) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (13415) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (13425) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (8) bytes.
D (13425) mbm_rtu@0x3ffaff70:PORT_SEND: 01 03 00 03 00 01 74 0a 
D (13435) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (13445) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (13485) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (13485) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 7.
D (13485) mb_port.serial: mbm_rtu@0x3ffaff70, frame 7 bytes is ready.
D (13495) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (13505) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 7 bytes.
D (13505) mbm_rtu@0x3ffaff70:PORT_RECV: 01 03 02 44 44 8b 77 
D (13515) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 66469
D (13525) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (13525) mbm_rtu@0x3ffaff70:MB_RECV: 03 02 44 44 
D (13535) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (13535) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (13545) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (13545) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (13555) mbm_error_cb_request_success: 03 00 03 00 01 
D (13565) mb_object.master: 0x3ffaff70, transaction processing time(us) = 138658
D (13575) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (13575) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(3) = ESP_OK
I (13595) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444) parameter read successful.
I (13595) TEST_COMMON: CHAR #3, value is ok.
D (13615) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (13615) mb_port.event: mbm_rtu@0x3ffaff70, mb take resource, (300 ticks).
D (13615) mbm_rtu@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 0a 
D (13625) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (13625) mb_port.serial: mbm_rtu@0x3ffaff70, uart rx break.
D (13635) mb_port.serial: mbm_rtu@0x3ffaff70, tx buffer sent: (11) bytes.
D (13645) mbm_rtu@0x3ffaff70:PORT_SEND: 01 10 00 04 00 01 02 00 0a 27 d3 
D (13645) mb_port.timer: mbm_rtu@0x3ffaff70, respond enable timeout (2000).
D (13655) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (13705) mb_port.serial: mbm_rtu@0x3ffaff70, UART[1] event:
D (13705) mb_port.serial: mbm_rtu@0x3ffaff70, data event, len: 8.
D (13705) mb_port.serial: mbm_rtu@0x3ffaff70, frame 8 bytes is ready.
D (13715) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (13715) mb_port.serial: mbm_rtu@0x3ffaff70, received data: 8 bytes.
D (13725) mbm_rtu@0x3ffaff70:PORT_RECV: 01 10 00 04 00 01 40 08 
D (13725) mb_port.serial: mbm_rtu@0x3ffaff70, serial processing time[us] = 68160
D (13735) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (13745) mbm_rtu@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (13745) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (13755) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (13755) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (13765) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
D (13775) mbm_error_cb_request_success: 10 00 04 00 01 02 00 0a 
D (13775) mb_object.master: 0x3ffaff70, transaction processing time(us) = 142518
D (13795) mb_port.event: mbm_rtu@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (13795) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (13815) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x000a), write successful.
I (13875) TEST_COMMON: Destroy master, inst: 0x3ffaff70.
D (13875) mb_port.serial: mbm_rtu@0x3ffaff70, suspend port.
D (13875) mb_port.timer: mbm_rtu@0x3ffaff70, timer stop, returns 259.
./main/test_modbus_rs485_comm_master_slave.c:126:Modbus RS485 RTU multi device master - slave case.:PASS
Test ran in 13098ms</system-out></testcase><testcase file="./main/test_modbus_rs485_comm_master_slave.c" line="191" name="Modbus RS485 ASCII multi device master - slave case." time="14.382"><system-out>Please press "Enter" key once any board send this signal.
D (1355) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (1355) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (1355) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (1365) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (1375) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (1375) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 30 30 30 30 31 30 32 31 
D (1385) mbs_ascii@0x3ffaff70:PORT_RECV: 31 31 31 43 41 0d 0a 
D (1395) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 727520
D (1405) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 00 00 01 02 11 11 
D (1405) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (1415) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (1415) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (1425) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2984, 1
D (1435) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 00 00 01 
D (1435) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (1445) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (1445) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (1455) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 30 30 30 30 31 45 45 0d 
D (1465) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (1465) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (1475) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 102341

D (1485) TEST_COMMON: Notify task start 0x3ffbaaec
D (1495) TEST_COMMON: Task: 0x3ffbaaec, get notify value = 1
I (1495) SLAVE: OBJ 0x3ffaff70, WRITE (779401 us), SL: 0, REG:0, TYPE:1, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (1575) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (1575) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (1575) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (1585) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (1595) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (1595) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (1605) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 31 30 30 30 31 30 32 32 
D (1615) mbs_ascii@0x3ffaff70:PORT_RECV: 32 32 32 41 37 0d 0a 
D (1615) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 129000
D (1625) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 01 00 01 02 22 22 
D (1635) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (1635) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (1645) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (1645) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2986, 1
D (1655) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 01 00 01 
D (1665) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (1665) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (1675) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (1685) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 31 30 30 30 31 45 44 0d 
D (1695) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (1695) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (1705) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 108927
I (1705) SLAVE: OBJ 0x3ffaff70, WRITE (1005638 us), SL: 0, REG:1, TYPE:1, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (1805) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (1805) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (1805) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (1815) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (1815) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (1825) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (1835) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 32 30 30 30 31 30 32 33 
D (1835) mbs_ascii@0x3ffaff70:PORT_RECV: 33 33 33 38 34 0d 0a 
D (1845) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 128930
D (1855) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 02 00 01 02 33 33 
D (1855) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (1865) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (1865) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (1875) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2988, 1
D (1885) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 02 00 01 
D (1895) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (1895) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (1905) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (1905) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 32 30 30 30 31 45 43 0d 
D (1915) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (1925) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (1925) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 108927
I (1935) SLAVE: OBJ 0x3ffaff70, WRITE (1231812 us), SL: 0, REG:2, TYPE:1, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (2035) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (2035) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (2035) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (2035) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (2045) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (2045) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (2055) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 33 30 30 30 31 30 32 34 
D (2065) mbs_ascii@0x3ffaff70:PORT_RECV: 34 34 34 36 31 0d 0a 
D (2075) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 128860
D (2075) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 03 00 01 02 44 44 
D (2085) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (2085) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (2095) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (2105) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298a, 1
D (2115) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 03 00 01 
D (2115) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (2125) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (2125) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (2135) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 33 30 30 30 31 45 42 0d 
D (2145) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (2145) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (2155) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 108927
I (2155) SLAVE: OBJ 0x3ffaff70, WRITE (1457909 us), SL: 0, REG:3, TYPE:1, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (2255) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (2255) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (2255) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (2265) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (2265) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (2275) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (2285) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 30 30 30 30 31 46 42 0d 
D (2295) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (2295) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 128385
D (2305) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 00 00 01 
D (2305) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (2315) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (2315) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (2325) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2984, 1
D (2335) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 11 11 
D (2335) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (2345) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (2355) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (2355) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 31 31 31 31 44 38 0d 0a 
D (2365) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (2375) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 101635
I (2375) SLAVE: OBJ 0x3ffaff70, READ (1681101 us), SL: 0, REG:0, TYPE:2, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (2475) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (2475) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (2475) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (2485) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (2495) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (2495) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (2505) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 31 30 30 30 31 46 41 0d 
D (2515) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (2515) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 131915
D (2525) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 01 00 01 
D (2525) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (2535) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (2545) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (2545) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2986, 1
D (2555) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 22 22 
D (2565) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (2565) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (2575) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (2575) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 32 32 32 32 42 36 0d 0a 
D (2585) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (2595) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 101635
I (2605) SLAVE: OBJ 0x3ffaff70, READ (1902965 us), SL: 0, REG:1, TYPE:2, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (2695) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (2695) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (2705) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (2705) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (2715) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (2715) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (2725) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 32 30 30 30 31 46 39 0d 
D (2735) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (2735) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 131927
D (2745) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 02 00 01 
D (2755) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (2755) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (2765) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (2765) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2988, 1
D (2775) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 33 33 
D (2785) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (2785) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (2795) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (2805) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 33 33 33 33 39 34 0d 0a 
D (2805) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (2815) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 101635
I (2835) SLAVE: OBJ 0x3ffaff70, READ (2124841 us), SL: 0, REG:2, TYPE:2, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (2925) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (2925) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (2925) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (2925) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (2935) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (2945) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (2945) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 33 30 30 30 31 46 38 0d 
D (2955) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (2965) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 131915
D (2965) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 03 00 01 
D (2975) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (2975) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (2985) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (2995) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb298a, 1
D (2995) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 44 44 
D (3005) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (3015) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (3015) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (3025) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 34 34 34 34 37 32 0d 0a 
D (3035) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (3035) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 101636
I (3045) SLAVE: OBJ 0x3ffaff70, READ (2346705 us), SL: 0, REG:3, TYPE:2, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (3145) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (3145) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (3145) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (3155) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (3155) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (3165) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (3175) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (3175) mbs_ascii@0x3ffaff70:PORT_RECV: 30 30 30 45 38 0d 0a 
D (3185) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 133250
D (3195) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 00 
D (3195) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (3205) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (3215) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (3215) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (3225) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (3235) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (3235) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (3245) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (3245) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (3255) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (3265) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (3265) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 108927
I (3275) SLAVE: OBJ 0x3ffaff70, WRITE (2572343 us), SL: 0, REG:4, TYPE:1, INST_ADDR:0x3ffb298c(0x0), SIZE:1
D (3415) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (3415) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (3415) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (3425) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (3425) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (3435) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (3445) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 30 30 30 30 31 30 32 31 
D (3455) mbs_ascii@0x3ffaff70:PORT_RECV: 31 31 31 43 41 0d 0a 
D (3455) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 173693
D (3465) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 00 00 01 02 11 11 
D (3465) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (3475) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (3485) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (3485) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2984, 1
D (3495) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 00 00 01 
D (3505) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (3505) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (3515) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (3525) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 30 30 30 30 31 45 45 0d 
D (3525) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (3535) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (3535) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 108927
I (3545) SLAVE: OBJ 0x3ffaff70, WRITE (2843272 us), SL: 0, REG:0, TYPE:1, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (3645) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (3645) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (3645) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (3655) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (3655) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (3665) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (3675) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 31 30 30 30 31 30 32 32 
D (3685) mbs_ascii@0x3ffaff70:PORT_RECV: 32 32 32 41 37 0d 0a 
D (3685) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 133726
D (3695) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 01 00 01 02 22 22 
D (3705) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (3705) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (3715) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (3715) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2986, 1
D (3725) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 01 00 01 
D (3735) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (3735) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (3745) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (3755) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 31 30 30 30 31 45 44 0d 
D (3755) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (3765) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (3765) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 108927
I (3775) SLAVE: OBJ 0x3ffaff70, WRITE (3074243 us), SL: 0, REG:1, TYPE:1, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (3875) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (3875) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (3875) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (3885) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (3895) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (3895) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (3905) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 32 30 30 30 31 30 32 33 
D (3915) mbs_ascii@0x3ffaff70:PORT_RECV: 33 33 33 38 34 0d 0a 
D (3915) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 133718
D (3925) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 02 00 01 02 33 33 
D (3935) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (3935) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (3945) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (3945) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2988, 1
D (3955) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 02 00 01 
D (3965) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (3965) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (3975) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (3985) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 32 30 30 30 31 45 43 0d 
D (3995) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (3995) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (3995) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 108927
I (4005) SLAVE: OBJ 0x3ffaff70, WRITE (3305199 us), SL: 0, REG:2, TYPE:1, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (4105) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (4105) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (4105) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (4115) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (4125) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (4125) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (4135) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 33 30 30 30 31 30 32 34 
D (4145) mbs_ascii@0x3ffaff70:PORT_RECV: 34 34 34 36 31 0d 0a 
D (4145) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 133727
D (4155) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 03 00 01 02 44 44 
D (4165) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (4165) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (4175) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (4185) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298a, 1
D (4185) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 03 00 01 
D (4195) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (4205) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (4205) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (4215) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 33 30 30 30 31 45 42 0d 
D (4225) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (4225) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (4235) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 108927
I (4235) SLAVE: OBJ 0x3ffaff70, WRITE (3536170 us), SL: 0, REG:3, TYPE:1, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (4335) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (4335) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (4345) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (4345) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (4355) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (4355) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (4365) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (4375) mbs_ascii@0x3ffaff70:PORT_RECV: 30 30 31 45 37 0d 0a 
D (4385) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 133787
D (4385) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 01 
D (4395) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (4395) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (4405) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (4415) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (4425) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (4425) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (4435) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (4435) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (4445) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (4455) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (4455) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (4465) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 108927
I (4465) SLAVE: OBJ 0x3ffaff70, WRITE (3767195 us), SL: 0, REG:4, TYPE:1, INST_ADDR:0x3ffb298c(0x1), SIZE:1
D (4615) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (4615) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (4615) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (4625) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (4625) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (4635) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (4645) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 30 30 30 30 31 46 42 0d 
D (4645) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (4655) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 177517
D (4665) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 00 00 01 
D (4665) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (4675) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (4675) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (4685) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2984, 1
D (4695) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 11 11 
D (4695) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (4705) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (4705) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (4715) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 31 31 31 31 44 38 0d 0a 
D (4725) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (4725) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 101636
I (4745) SLAVE: OBJ 0x3ffaff70, READ (4039517 us), SL: 0, REG:0, TYPE:2, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (4835) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (4835) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (4835) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (4845) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (4845) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (4855) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (4865) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 31 30 30 30 31 46 41 0d 
D (4875) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (4875) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 131914
D (4885) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 01 00 01 
D (4885) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (4895) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (4895) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (4905) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2986, 1
D (4915) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 22 22 
D (4915) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (4925) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (4935) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (4935) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 32 32 32 32 42 36 0d 0a 
D (4945) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (4955) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 101636
I (4955) SLAVE: OBJ 0x3ffaff70, READ (4261381 us), SL: 0, REG:1, TYPE:2, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (5055) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (5055) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (5055) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (5065) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (5075) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (5075) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (5085) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 32 30 30 30 31 46 39 0d 
D (5095) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (5095) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 131931
D (5105) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 02 00 01 
D (5105) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (5115) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (5125) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (5125) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2988, 1
D (5135) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 33 33 
D (5145) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (5145) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (5155) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (5155) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 33 33 33 33 39 34 0d 0a 
D (5165) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (5175) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 101635
I (5185) SLAVE: OBJ 0x3ffaff70, READ (4483261 us), SL: 0, REG:2, TYPE:2, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (5285) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (5285) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (5285) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (5285) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (5295) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (5295) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (5305) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 33 30 30 30 31 46 38 0d 
D (5315) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (5315) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 131926
D (5325) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 03 00 01 
D (5335) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (5335) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (5345) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (5345) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb298a, 1
D (5355) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 44 44 
D (5365) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (5365) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (5375) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (5385) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 34 34 34 34 37 32 0d 0a 
D (5385) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (5395) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 101635
I (5415) SLAVE: OBJ 0x3ffaff70, READ (4705136 us), SL: 0, REG:3, TYPE:2, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (5505) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (5505) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (5505) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (5515) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (5515) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (5525) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (5525) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (5535) mbs_ascii@0x3ffaff70:PORT_RECV: 30 30 32 45 36 0d 0a 
D (5545) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 133236
D (5555) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 02 
D (5555) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (5565) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (5565) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (5575) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (5585) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (5585) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (5595) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (5605) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (5605) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (5615) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (5615) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (5625) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 108927
I (5635) SLAVE: OBJ 0x3ffaff70, WRITE (4930759 us), SL: 0, REG:4, TYPE:1, INST_ADDR:0x3ffb298c(0x2), SIZE:1
D (5775) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (5775) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (5775) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (5785) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (5785) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (5795) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (5805) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 30 30 30 30 31 30 32 31 
D (5815) mbs_ascii@0x3ffaff70:PORT_RECV: 31 31 31 43 41 0d 0a 
D (5815) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 175224
D (5825) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 00 00 01 02 11 11 
D (5825) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (5835) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (5845) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (5845) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2984, 1
D (5855) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 00 00 01 
D (5865) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (5865) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (5875) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (5875) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 30 30 30 30 31 45 45 0d 
D (5885) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (5895) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (5895) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 108927
I (5905) SLAVE: OBJ 0x3ffaff70, WRITE (5203219 us), SL: 0, REG:0, TYPE:1, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (6005) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (6005) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (6005) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (6015) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (6015) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (6025) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (6035) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 31 30 30 30 31 30 32 32 
D (6045) mbs_ascii@0x3ffaff70:PORT_RECV: 32 32 32 41 37 0d 0a 
D (6045) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 133726
D (6055) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 01 00 01 02 22 22 
D (6065) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (6065) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (6075) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (6075) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2986, 1
D (6085) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 01 00 01 
D (6095) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (6095) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (6105) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (6115) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 31 30 30 30 31 45 44 0d 
D (6115) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (6125) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (6125) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 108927
I (6135) SLAVE: OBJ 0x3ffaff70, WRITE (5434190 us), SL: 0, REG:1, TYPE:1, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (6235) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (6235) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (6235) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (6245) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (6255) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (6255) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (6265) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 32 30 30 30 31 30 32 33 
D (6275) mbs_ascii@0x3ffaff70:PORT_RECV: 33 33 33 38 34 0d 0a 
D (6275) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 133788
D (6285) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 02 00 01 02 33 33 
D (6295) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (6295) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (6305) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (6305) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2988, 1
D (6315) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 02 00 01 
D (6325) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (6325) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (6335) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (6345) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 32 30 30 30 31 45 43 0d 
D (6355) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (6355) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (6355) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 108927
I (6365) SLAVE: OBJ 0x3ffaff70, WRITE (5665215 us), SL: 0, REG:2, TYPE:1, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (6465) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (6465) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (6465) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (6475) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (6485) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (6485) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (6495) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 33 30 30 30 31 30 32 34 
D (6505) mbs_ascii@0x3ffaff70:PORT_RECV: 34 34 34 36 31 0d 0a 
D (6505) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 133726
D (6515) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 03 00 01 02 44 44 
D (6525) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (6525) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (6535) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (6545) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298a, 1
D (6545) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 03 00 01 
D (6555) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (6565) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (6565) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (6575) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 33 30 30 30 31 45 42 0d 
D (6585) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (6585) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (6595) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 108927
I (6595) SLAVE: OBJ 0x3ffaff70, WRITE (5896186 us), SL: 0, REG:3, TYPE:1, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (6695) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (6695) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (6705) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (6705) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (6715) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (6715) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (6725) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (6735) mbs_ascii@0x3ffaff70:PORT_RECV: 30 30 33 45 35 0d 0a 
D (6745) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 133787
D (6745) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 03 
D (6755) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (6755) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (6765) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (6775) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (6785) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (6785) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (6795) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (6795) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (6805) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (6815) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (6815) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (6825) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 108928
I (6825) SLAVE: OBJ 0x3ffaff70, WRITE (6127211 us), SL: 0, REG:4, TYPE:1, INST_ADDR:0x3ffb298c(0x3), SIZE:1
D (6975) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (6975) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (6975) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (6985) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (6985) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (6995) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (7005) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 30 30 30 30 31 46 42 0d 
D (7005) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (7015) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 177517
D (7025) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 00 00 01 
D (7025) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (7035) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (7035) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (7045) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2984, 1
D (7055) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 11 11 
D (7055) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (7065) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (7065) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (7075) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 31 31 31 31 44 38 0d 0a 
D (7085) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (7085) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 101635
I (7105) SLAVE: OBJ 0x3ffaff70, READ (6399534 us), SL: 0, REG:0, TYPE:2, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (7195) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (7195) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (7195) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (7205) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (7205) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (7215) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (7225) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 31 30 30 30 31 46 41 0d 
D (7235) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (7235) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 131915
D (7245) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 01 00 01 
D (7245) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (7255) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (7255) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (7265) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2986, 1
D (7275) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 22 22 
D (7275) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (7285) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (7295) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (7295) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 32 32 32 32 42 36 0d 0a 
D (7305) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (7315) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 101635
I (7315) SLAVE: OBJ 0x3ffaff70, READ (6621398 us), SL: 0, REG:1, TYPE:2, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (7415) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (7415) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (7415) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (7425) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (7435) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (7435) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (7445) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 32 30 30 30 31 46 39 0d 
D (7455) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (7455) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 131930
D (7465) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 02 00 01 
D (7465) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (7475) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (7485) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (7485) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2988, 1
D (7495) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 33 33 
D (7505) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (7505) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (7515) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (7515) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 33 33 33 33 39 34 0d 0a 
D (7525) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (7535) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 101636
I (7545) SLAVE: OBJ 0x3ffaff70, READ (6843277 us), SL: 0, REG:2, TYPE:2, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (7645) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (7645) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (7645) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (7645) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (7655) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (7655) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (7665) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 33 30 30 30 31 46 38 0d 
D (7675) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (7675) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 131923
D (7685) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 03 00 01 
D (7695) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (7695) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (7705) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (7705) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb298a, 1
D (7715) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 44 44 
D (7725) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (7725) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (7735) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (7745) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 34 34 34 34 37 32 0d 0a 
D (7745) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (7755) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 101635
I (7775) SLAVE: OBJ 0x3ffaff70, READ (7065150 us), SL: 0, REG:3, TYPE:2, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (7865) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (7865) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (7865) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (7875) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (7875) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (7885) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (7885) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (7895) mbs_ascii@0x3ffaff70:PORT_RECV: 30 30 34 45 34 0d 0a 
D (7905) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 133238
D (7915) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 04 
D (7915) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (7925) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (7925) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (7935) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (7945) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (7945) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (7955) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (7965) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (7965) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (7975) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (7975) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (7985) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 108927
I (7995) SLAVE: OBJ 0x3ffaff70, WRITE (7290775 us), SL: 0, REG:4, TYPE:1, INST_ADDR:0x3ffb298c(0x4), SIZE:1
D (8135) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (8135) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (8135) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (8145) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (8145) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (8155) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (8165) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 30 30 30 30 31 30 32 31 
D (8175) mbs_ascii@0x3ffaff70:PORT_RECV: 31 31 31 43 41 0d 0a 
D (8175) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 175224
D (8185) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 00 00 01 02 11 11 
D (8185) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (8195) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (8205) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (8205) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2984, 1
D (8215) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 00 00 01 
D (8225) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (8225) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (8235) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (8235) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 30 30 30 30 31 45 45 0d 
D (8245) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (8255) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (8255) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 108927
I (8265) SLAVE: OBJ 0x3ffaff70, WRITE (7563236 us), SL: 0, REG:0, TYPE:1, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (8365) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (8365) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (8365) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (8375) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (8375) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (8385) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (8395) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 31 30 30 30 31 30 32 32 
D (8405) mbs_ascii@0x3ffaff70:PORT_RECV: 32 32 32 41 37 0d 0a 
D (8405) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 133727
D (8415) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 01 00 01 02 22 22 
D (8425) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (8425) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (8435) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (8435) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2986, 1
D (8445) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 01 00 01 
D (8455) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (8455) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (8465) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (8475) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 31 30 30 30 31 45 44 0d 
D (8475) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (8485) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (8485) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 108927
I (8495) SLAVE: OBJ 0x3ffaff70, WRITE (7794207 us), SL: 0, REG:1, TYPE:1, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (8595) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (8595) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (8595) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (8605) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (8615) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (8615) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (8625) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 32 30 30 30 31 30 32 33 
D (8635) mbs_ascii@0x3ffaff70:PORT_RECV: 33 33 33 38 34 0d 0a 
D (8635) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 133788
D (8645) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 02 00 01 02 33 33 
D (8655) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (8655) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (8665) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (8665) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2988, 1
D (8675) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 02 00 01 
D (8685) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (8685) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (8695) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (8705) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 32 30 30 30 31 45 43 0d 
D (8715) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (8715) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (8715) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 108927
I (8725) SLAVE: OBJ 0x3ffaff70, WRITE (8025232 us), SL: 0, REG:2, TYPE:1, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (8825) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (8825) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (8825) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (8835) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (8845) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (8845) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (8855) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 33 30 30 30 31 30 32 34 
D (8865) mbs_ascii@0x3ffaff70:PORT_RECV: 34 34 34 36 31 0d 0a 
D (8865) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 133726
D (8875) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 03 00 01 02 44 44 
D (8885) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (8885) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (8895) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (8905) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298a, 1
D (8905) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 03 00 01 
D (8915) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (8925) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (8925) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (8935) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 33 30 30 30 31 45 42 0d 
D (8945) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (8945) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (8955) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 108927
I (8955) SLAVE: OBJ 0x3ffaff70, WRITE (8256203 us), SL: 0, REG:3, TYPE:1, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (9055) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (9055) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (9065) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (9065) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (9075) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (9075) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (9085) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (9095) mbs_ascii@0x3ffaff70:PORT_RECV: 30 30 35 45 33 0d 0a 
D (9105) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 133788
D (9105) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 05 
D (9115) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (9115) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (9125) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (9135) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (9145) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (9145) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (9155) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (9155) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (9165) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (9175) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (9175) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (9185) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 108927
I (9185) SLAVE: OBJ 0x3ffaff70, WRITE (8487227 us), SL: 0, REG:4, TYPE:1, INST_ADDR:0x3ffb298c(0x5), SIZE:1
D (9335) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (9335) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (9335) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (9345) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (9345) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (9355) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (9365) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 30 30 30 30 31 46 42 0d 
D (9365) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (9375) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 177516
D (9385) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 00 00 01 
D (9385) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (9395) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (9395) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (9405) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2984, 1
D (9415) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 11 11 
D (9415) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (9425) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (9425) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (9435) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 31 31 31 31 44 38 0d 0a 
D (9445) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (9445) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 101636
I (9465) SLAVE: OBJ 0x3ffaff70, READ (8759550 us), SL: 0, REG:0, TYPE:2, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (9555) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (9555) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (9555) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (9565) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (9565) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (9575) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (9585) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 31 30 30 30 31 46 41 0d 
D (9595) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (9595) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 131915
D (9605) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 01 00 01 
D (9605) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (9615) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (9615) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (9625) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2986, 1
D (9635) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 22 22 
D (9635) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (9645) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (9655) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (9655) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 32 32 32 32 42 36 0d 0a 
D (9665) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (9675) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 101635
I (9675) SLAVE: OBJ 0x3ffaff70, READ (8981414 us), SL: 0, REG:1, TYPE:2, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (9775) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (9775) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (9775) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (9785) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (9795) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (9795) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (9805) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 32 30 30 30 31 46 39 0d 
D (9815) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (9815) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 131931
D (9825) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 02 00 01 
D (9825) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (9835) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (9845) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (9845) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2988, 1
D (9855) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 33 33 
D (9865) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (9865) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (9875) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (9875) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 33 33 33 33 39 34 0d 0a 
D (9885) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (9895) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 101635
I (9905) SLAVE: OBJ 0x3ffaff70, READ (9203294 us), SL: 0, REG:2, TYPE:2, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (10005) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (10005) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (10005) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (10005) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (10015) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (10015) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (10025) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 33 30 30 30 31 46 38 0d 
D (10035) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (10035) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 132360
D (10045) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 03 00 01 
D (10055) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (10055) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (10065) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (10075) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb298a, 1
D (10075) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 44 44 
D (10085) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (10095) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (10095) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (10105) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 34 34 34 34 37 32 0d 0a 
D (10115) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (10115) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 103024
I (10125) SLAVE: OBJ 0x3ffaff70, READ (9426298 us), SL: 0, REG:3, TYPE:2, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (10225) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (10225) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (10225) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (10235) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (10235) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (10245) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (10255) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (10265) mbs_ascii@0x3ffaff70:PORT_RECV: 30 30 36 45 32 0d 0a 
D (10265) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 134801
D (10275) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 06 
D (10285) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (10285) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (10295) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (10295) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (10305) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (10315) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (10315) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (10325) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (10335) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (10345) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (10345) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (10355) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 110403
I (10355) SLAVE: OBJ 0x3ffaff70, WRITE (9654701 us), SL: 0, REG:4, TYPE:1, INST_ADDR:0x3ffb298c(0x6), SIZE:1
D (10505) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (10505) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (10505) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (10515) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (10515) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (10525) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (10535) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 30 30 30 30 31 30 32 31 
D (10545) mbs_ascii@0x3ffaff70:PORT_RECV: 31 31 31 43 41 0d 0a 
D (10545) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 181413
D (10555) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 00 00 01 02 11 11 
D (10565) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (10565) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (10575) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (10575) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2984, 1
D (10585) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 00 00 01 
D (10595) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (10595) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (10605) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (10615) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 30 30 30 30 31 45 45 0d 
D (10625) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (10625) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (10635) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 110403
I (10645) SLAVE: OBJ 0x3ffaff70, WRITE (9934653 us), SL: 0, REG:0, TYPE:1, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (10745) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (10745) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (10745) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (10745) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (10755) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (10765) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (10765) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 31 30 30 30 31 30 32 32 
D (10775) mbs_ascii@0x3ffaff70:PORT_RECV: 32 32 32 41 37 0d 0a 
D (10785) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 135752
D (10785) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 01 00 01 02 22 22 
D (10795) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (10795) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (10805) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (10815) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2986, 1
D (10825) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 01 00 01 
D (10825) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (10835) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (10835) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (10845) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 31 30 30 30 31 45 44 0d 
D (10855) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (10855) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (10865) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 110403
I (10875) SLAVE: OBJ 0x3ffaff70, WRITE (10168951 us), SL: 0, REG:1, TYPE:1, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (10975) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (10975) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (10975) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (10985) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (10985) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (10995) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (11005) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 32 30 30 30 31 30 32 33 
D (11005) mbs_ascii@0x3ffaff70:PORT_RECV: 33 33 33 38 34 0d 0a 
D (11015) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 135752
D (11025) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 02 00 01 02 33 33 
D (11025) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (11035) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (11045) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (11045) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2988, 1
D (11055) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 02 00 01 
D (11065) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (11065) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (11075) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (11085) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 32 30 30 30 31 45 43 0d 
D (11085) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (11095) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (11095) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 110403
I (11105) SLAVE: OBJ 0x3ffaff70, WRITE (10403242 us), SL: 0, REG:2, TYPE:1, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (11205) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (11205) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (11215) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (11215) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (11225) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (11225) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (11235) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 33 30 30 30 31 30 32 34 
D (11245) mbs_ascii@0x3ffaff70:PORT_RECV: 34 34 34 36 31 0d 0a 
D (11245) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 135755
D (11255) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 03 00 01 02 44 44 
D (11265) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (11265) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (11275) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (11285) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298a, 1
D (11295) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 03 00 01 
D (11295) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (11305) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (11305) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (11315) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 33 30 30 30 31 45 42 0d 
D (11325) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (11325) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (11335) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 110402
I (11345) SLAVE: OBJ 0x3ffaff70, WRITE (10637544 us), SL: 0, REG:3, TYPE:1, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (11445) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (11445) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (11445) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (11455) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (11455) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (11465) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (11475) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (11475) mbs_ascii@0x3ffaff70:PORT_RECV: 30 30 37 45 31 0d 0a 
D (11485) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 135748
D (11495) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 07 
D (11495) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (11505) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (11505) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (11515) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (11525) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (11535) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (11535) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (11545) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (11545) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (11555) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (11565) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (11565) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 110403
I (11575) SLAVE: OBJ 0x3ffaff70, WRITE (10871831 us), SL: 0, REG:4, TYPE:1, INST_ADDR:0x3ffb298c(0x7), SIZE:1
D (11715) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (11715) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (11715) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (11725) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (11725) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (11735) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (11745) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 30 30 30 30 31 46 42 0d 
D (11745) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (11755) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 173022
D (11765) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 00 00 01 
D (11765) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (11775) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (11775) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (11785) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2984, 1
D (11795) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 11 11 
D (11795) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (11805) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (11815) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (11815) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 31 31 31 31 44 38 0d 0a 
D (11825) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (11835) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 103024
I (11835) SLAVE: OBJ 0x3ffaff70, READ (11140961 us), SL: 0, REG:0, TYPE:2, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (11935) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (11935) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (11945) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (11945) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (11955) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (11955) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (11965) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 31 30 30 30 31 46 41 0d 
D (11975) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (11975) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 133896
D (11985) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 01 00 01 
D (11995) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (11995) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (12005) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (12015) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2986, 1
D (12015) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 22 22 
D (12025) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (12025) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (12035) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (12045) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 32 32 32 32 42 36 0d 0a 
D (12055) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (12055) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 103025
I (12065) SLAVE: OBJ 0x3ffaff70, READ (11366021 us), SL: 0, REG:1, TYPE:2, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (12165) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (12165) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (12165) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (12175) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (12175) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (12185) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (12195) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 32 30 30 30 31 46 39 0d 
D (12205) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (12205) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 133904
D (12215) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 02 00 01 
D (12215) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (12225) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (12225) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (12235) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2988, 1
D (12245) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 33 33 
D (12245) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (12255) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (12265) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (12265) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 33 33 33 33 39 34 0d 0a 
D (12275) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (12285) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 103025
I (12285) SLAVE: OBJ 0x3ffaff70, READ (11591089 us), SL: 0, REG:2, TYPE:2, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (12385) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (12395) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (12395) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (12395) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (12405) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (12405) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (12415) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 33 30 30 30 31 46 38 0d 
D (12425) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (12425) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 133902
D (12435) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 03 00 01 
D (12445) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (12445) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (12455) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (12465) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb298a, 1
D (12465) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 44 44 
D (12475) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (12475) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (12485) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (12495) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 34 34 34 34 37 32 0d 0a 
D (12505) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (12505) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 103024
I (12515) SLAVE: OBJ 0x3ffaff70, READ (11816156 us), SL: 0, REG:3, TYPE:2, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (12615) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (12615) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (12615) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (12625) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (12625) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (12635) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (12645) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (12655) mbs_ascii@0x3ffaff70:PORT_RECV: 30 30 38 45 30 0d 0a 
D (12655) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 135217
D (12665) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 08 
D (12675) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (12675) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (12685) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (12685) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (12695) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (12705) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (12705) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (12715) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (12725) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (12735) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (12735) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (12745) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 110403
I (12745) SLAVE: OBJ 0x3ffaff70, WRITE (12044976 us), SL: 0, REG:4, TYPE:1, INST_ADDR:0x3ffb298c(0x8), SIZE:1
D (12895) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (12895) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (12895) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (12905) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (12905) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (12915) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (12925) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 30 30 30 30 31 30 32 31 
D (12935) mbs_ascii@0x3ffaff70:PORT_RECV: 31 31 31 43 41 0d 0a 
D (12935) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 181136
D (12945) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 00 00 01 02 11 11 
D (12955) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (12955) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (12965) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (12965) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2984, 1
D (12975) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 00 00 01 
D (12985) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (12985) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (12995) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (13005) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 30 30 30 30 31 45 45 0d 
D (13015) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (13015) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (13015) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 110403
I (13035) SLAVE: OBJ 0x3ffaff70, WRITE (12324651 us), SL: 0, REG:0, TYPE:1, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (13135) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (13135) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (13135) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (13135) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (13145) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (13155) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (13155) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 31 30 30 30 31 30 32 32 
D (13165) mbs_ascii@0x3ffaff70:PORT_RECV: 32 32 32 41 37 0d 0a 
D (13175) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 135752
D (13175) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 01 00 01 02 22 22 
D (13185) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (13185) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (13195) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (13205) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2986, 1
D (13215) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 01 00 01 
D (13215) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (13225) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (13225) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (13235) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 31 30 30 30 31 45 44 0d 
D (13245) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (13245) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (13255) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 110403
I (13265) SLAVE: OBJ 0x3ffaff70, WRITE (12558949 us), SL: 0, REG:1, TYPE:1, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (13365) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (13365) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (13365) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (13375) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (13375) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (13385) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (13395) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 32 30 30 30 31 30 32 33 
D (13395) mbs_ascii@0x3ffaff70:PORT_RECV: 33 33 33 38 34 0d 0a 
D (13405) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 135751
D (13415) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 02 00 01 02 33 33 
D (13415) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (13425) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (13435) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (13435) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb2988, 1
D (13445) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 02 00 01 
D (13455) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (13455) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (13465) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (13475) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 32 30 30 30 31 45 43 0d 
D (13475) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (13485) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (13485) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 110403
I (13495) SLAVE: OBJ 0x3ffaff70, WRITE (12793239 us), SL: 0, REG:2, TYPE:1, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (13595) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (13595) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (13605) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (13605) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (13615) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (13615) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (13625) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 33 30 30 30 31 30 32 34 
D (13635) mbs_ascii@0x3ffaff70:PORT_RECV: 34 34 34 36 31 0d 0a 
D (13635) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 135755
D (13645) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 03 00 01 02 44 44 
D (13655) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (13655) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (13665) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (13675) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298a, 1
D (13685) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 03 00 01 
D (13685) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (13695) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (13695) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (13705) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 33 30 30 30 31 45 42 0d 
D (13715) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (13715) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (13725) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 110402
I (13735) SLAVE: OBJ 0x3ffaff70, WRITE (13027541 us), SL: 0, REG:3, TYPE:1, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (13835) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (13835) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (13835) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (13845) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (13845) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (13855) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (13865) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (13865) mbs_ascii@0x3ffaff70:PORT_RECV: 30 30 39 44 46 0d 0a 
D (13875) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 135748
D (13885) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 09 
D (13885) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (13895) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (13895) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (13905) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (13915) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (13925) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (13925) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (13935) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (13935) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (13945) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (13955) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (13955) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 110403
I (13965) SLAVE: OBJ 0x3ffaff70, WRITE (13261828 us), SL: 0, REG:4, TYPE:1, INST_ADDR:0x3ffb298c(0x9), SIZE:1
D (14105) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (14105) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (14105) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (14115) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (14115) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (14125) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (14135) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 30 30 30 30 31 46 42 0d 
D (14135) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (14145) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 173022
D (14155) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 00 00 01 
D (14155) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (14165) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (14165) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (14175) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2984, 1
D (14185) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 11 11 
D (14185) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (14195) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (14205) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (14205) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 31 31 31 31 44 38 0d 0a 
D (14215) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (14225) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 103024
I (14225) SLAVE: OBJ 0x3ffaff70, READ (13530958 us), SL: 0, REG:0, TYPE:2, INST_ADDR:0x3ffb2984(0x1111), SIZE:1
D (14325) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (14325) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (14335) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (14335) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (14345) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (14345) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (14355) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 31 30 30 30 31 46 41 0d 
D (14365) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (14365) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 133896
D (14375) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 01 00 01 
D (14385) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (14385) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (14395) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (14405) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2986, 1
D (14405) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 22 22 
D (14415) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (14415) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (14425) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (14435) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 32 32 32 32 42 36 0d 0a 
D (14445) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (14445) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 103025
I (14455) SLAVE: OBJ 0x3ffaff70, READ (13756018 us), SL: 0, REG:1, TYPE:2, INST_ADDR:0x3ffb2986(0x2222), SIZE:1
D (14555) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (14555) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (14555) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (14565) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (14565) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (14575) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (14585) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 32 30 30 30 31 46 39 0d 
D (14595) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (14595) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 133903
D (14605) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 02 00 01 
D (14605) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (14615) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (14615) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (14625) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb2988, 1
D (14635) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 33 33 
D (14635) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (14645) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (14655) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (14655) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 33 33 33 33 39 34 0d 0a 
D (14665) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (14675) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 103025
I (14675) SLAVE: OBJ 0x3ffaff70, READ (13981086 us), SL: 0, REG:2, TYPE:2, INST_ADDR:0x3ffb2988(0x3333), SIZE:1
D (14775) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (14785) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 17.
D (14785) mb_port.serial: mbs_ascii@0x3ffaff70, frame 17 bytes is ready.
D (14785) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (14795) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (14795) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 17 bytes.
D (14805) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 30 30 33 30 30 30 31 46 38 0d 
D (14815) mbs_ascii@0x3ffaff70:PORT_RECV: 0a 
D (14815) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 133895
D (14825) mbs_ascii@0x3ffaff70:MB_RECV: 03 00 03 00 01 
D (14835) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (14835) mb_object.slave: 0x3ffaff70: function (0x3), start handler.
D (14845) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x02 is set.
D (14855) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 2, 0x3ffb298a, 1
D (14855) mbs_ascii@0x3ffaff70:MB_SEND: 03 02 44 44 
D (14865) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (14865) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (14875) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (15) bytes.
D (14885) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 32 34 34 34 34 37 32 0d 0a 
D (14895) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (14895) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 103024
I (14905) SLAVE: OBJ 0x3ffaff70, READ (14206147 us), SL: 0, REG:3, TYPE:2, INST_ADDR:0x3ffb298a(0x4444), SIZE:1
D (15005) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (15005) mb_port.serial: mbs_ascii@0x3ffaff70, data event, len: 23.
D (15005) mb_port.serial: mbs_ascii@0x3ffaff70, frame 23 bytes is ready.
D (15015) mb_object.slave: 0x3ffaff70:EV_FRAME_RECEIVED
D (15015) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (15025) mb_port.serial: mbs_ascii@0x3ffaff70, received data: 23 bytes.
D (15035) mbs_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (15045) mbs_ascii@0x3ffaff70:PORT_RECV: 30 30 41 44 45 0d 0a 
D (15045) mb_port.serial: mbs_ascii@0x3ffaff70, serial processing time[us] = 135224
D (15055) mbs_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 02 00 0a 
D (15065) mb_object.slave: 0x3ffaff70:EV_EXECUTE
D (15065) mb_object.slave: 0x3ffaff70: function (0x10), start handler.
D (15075) MB_CONTROLLER_SLAVE: The MB_REG_CHANGE_EVENT = 0x01 is set.
D (15075) MB_CONTROLLER_SLAVE: Queue send parameter info (type, address, size): 1, 0x3ffb298c, 1
D (15085) mbs_ascii@0x3ffaff70:MB_SEND: 10 00 04 00 01 
D (15095) mb_port.serial: mbs_ascii@0x3ffaff70, UART[1] event:
D (15095) mb_port.serial: mbs_ascii@0x3ffaff70, uart rx break.
D (15105) mb_port.serial: mbs_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (15115) mbs_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (15125) mbs_ascii@0x3ffaff70:PORT_SEND: 0a 
D (15125) mb_object.slave: 0x3ffaff70:EV_MASTER_FRAME_SENT
D (15135) mb_object.slave: 0x3ffaff70, transaction processing time(us) = 110402
D (15135) TEST_COMMON: Stop slave: 0x3ffaff70.
I (15215) TEST_COMMON: Destroy slave, inst: 0x3ffaff70.
D (15215) mb_port.serial: mbs_ascii@0x3ffaff70, suspend port.
D (15215) mb_port.timer: mbs_ascii@0x3ffaff70, timer stop, returns 259.
D (15225) TEST_COMMON: Notify task done, inst: 0x3ffbaaec.
./main/test_modbus_rs485_comm_master_slave.c:191:Modbus RS485 ASCII multi device master - slave case.:PASS
Test ran in 14125ms

&amp;lt;-------------------&amp;gt;

D (1225) TEST_COMMON: Notify task start 0x3ffbaabc
D (1225) TEST_COMMON: Task: 0x3ffbaabc, get notify value = 1
D (1245) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (1245) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (1245) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 00 00 01 02 11 11 
D (1255) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (1255) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (1265) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (1275) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 30 30 30 30 31 30 32 31 
D (1275) mbm_ascii@0x3ffaff70:PORT_SEND: 31 31 31 43 41 0d 0a 
D (1285) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (1295) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (1335) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (1335) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (1335) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (1345) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (1345) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (1355) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 30 30 30 30 31 45 45 0d 
D (1365) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (1365) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 63978
D (1375) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (1385) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 00 00 01 
D (1385) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (1395) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (1395) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (1405) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (1415) mbm_error_cb_request_success: 10 00 00 00 01 02 11 11 
D (1415) mb_object.master: 0x3ffaff70, transaction processing time(us) = 152533
D (1435) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (1435) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(0) = ESP_OK
I (1455) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111), write successful.
D (1455) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (1455) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (1475) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 01 00 01 02 22 22 
D (1475) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (1475) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (1485) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (1495) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 31 30 30 30 31 30 32 32 
D (1495) mbm_ascii@0x3ffaff70:PORT_SEND: 32 32 32 41 37 0d 0a 
D (1505) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (1515) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (1565) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (1565) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (1565) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (1565) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (1575) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (1585) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 31 30 30 30 31 45 44 0d 
D (1595) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (1595) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 70337
D (1605) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (1605) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 01 00 01 
D (1615) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (1615) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (1625) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (1625) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (1635) mbm_error_cb_request_success: 10 00 01 00 01 02 22 22 
D (1645) mb_object.master: 0x3ffaff70, transaction processing time(us) = 154609
D (1655) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (1655) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(1) = ESP_OK
I (1675) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222), write successful.
D (1675) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (1695) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (1695) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 02 00 01 02 33 33 
D (1695) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (1705) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (1705) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (1715) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 32 30 30 30 31 30 32 33 
D (1725) mbm_ascii@0x3ffaff70:PORT_SEND: 33 33 33 38 34 0d 0a 
D (1735) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (1735) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (1785) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (1785) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (1785) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (1795) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (1805) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (1805) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 32 30 30 30 31 45 43 0d 
D (1815) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (1825) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 70259
D (1825) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (1835) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 02 00 01 
D (1845) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (1845) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (1855) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (1855) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (1865) mbm_error_cb_request_success: 10 00 02 00 01 02 33 33 
D (1865) mb_object.master: 0x3ffaff70, transaction processing time(us) = 158874
D (1885) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (1885) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(2) = ESP_OK
I (1905) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333), write successful.
D (1905) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (1925) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (1925) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 03 00 01 02 44 44 
D (1925) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (1935) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (1935) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (1945) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 33 30 30 30 31 30 32 34 
D (1955) mbm_ascii@0x3ffaff70:PORT_SEND: 34 34 34 36 31 0d 0a 
D (1955) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (1965) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (2015) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (2015) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (2015) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (2025) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (2025) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (2035) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 33 30 30 30 31 45 42 0d 
D (2045) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (2045) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 70275
D (2055) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (2065) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 03 00 01 
D (2065) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (2075) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (2075) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (2085) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (2085) mbm_error_cb_request_success: 10 00 03 00 01 02 44 44 
D (2095) mb_object.master: 0x3ffaff70, transaction processing time(us) = 156665
D (2115) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (2115) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(3) = ESP_OK
I (2135) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444), write successful.
D (2135) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (2135) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (2155) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 00 00 01 
D (2155) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (2155) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (2165) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (2165) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 30 30 30 30 31 46 42 0d 
D (2175) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (2185) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (2185) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (2235) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (2235) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (2235) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (2245) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (2255) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (2255) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 31 31 31 31 44 38 0d 0a 
D (2265) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 69280
D (2275) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (2275) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 11 11 
D (2285) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (2285) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (2295) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (2305) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (2305) mbm_error_cb_request_success: 03 00 00 00 01 
D (2315) mb_object.master: 0x3ffaff70, transaction processing time(us) = 144727
D (2325) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (2325) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(0) = ESP_OK
I (2345) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111) parameter read successful.
I (2345) TEST_COMMON: CHAR #0, value is ok.
D (2365) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (2365) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (2365) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 01 00 01 
D (2375) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (2375) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (2385) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (2395) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 31 30 30 30 31 46 41 0d 
D (2395) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (2405) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (2415) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (2455) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (2455) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (2455) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (2465) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (2475) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (2475) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 32 32 32 32 42 36 0d 0a 
D (2485) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 68473
D (2495) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (2505) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 22 22 
D (2505) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (2515) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (2515) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (2525) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (2525) mbm_error_cb_request_success: 03 00 01 00 01 
D (2535) mb_object.master: 0x3ffaff70, transaction processing time(us) = 149874
D (2555) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (2555) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(1) = ESP_OK
I (2555) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222) parameter read successful.
I (2575) TEST_COMMON: CHAR #1, value is ok.
D (2575) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (2595) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (2595) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 02 00 01 
D (2595) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (2605) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (2605) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (2615) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 32 30 30 30 31 46 39 0d 
D (2625) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (2625) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (2635) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (2685) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (2685) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (2685) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (2685) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (2695) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (2705) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 33 33 33 33 39 34 0d 0a 
D (2705) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 68457
D (2715) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (2725) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 33 33 
D (2725) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (2735) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (2735) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (2745) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (2755) mbm_error_cb_request_success: 03 00 02 00 01 
D (2755) mb_object.master: 0x3ffaff70, transaction processing time(us) = 148292
D (2775) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (2775) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(2) = ESP_OK
I (2795) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333) parameter read successful.
I (2795) TEST_COMMON: CHAR #2, value is ok.
D (2795) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (2815) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (2815) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 03 00 01 
D (2815) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (2825) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (2825) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (2835) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 33 30 30 30 31 46 38 0d 
D (2845) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (2845) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (2855) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (2905) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (2905) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (2905) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (2915) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (2915) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (2925) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 34 34 34 34 37 32 0d 0a 
D (2935) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 68484
D (2935) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (2945) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 44 44 
D (2955) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (2955) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (2965) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (2965) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (2975) mbm_error_cb_request_success: 03 00 03 00 01 
D (2975) mb_object.master: 0x3ffaff70, transaction processing time(us) = 149882
D (2995) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (2995) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(3) = ESP_OK
I (3015) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444) parameter read successful.
I (3015) TEST_COMMON: CHAR #3, value is ok.
D (3015) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (3035) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (3035) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 00 
D (3035) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (3045) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (3055) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (3055) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (3065) mbm_ascii@0x3ffaff70:PORT_SEND: 30 30 30 45 38 0d 0a 
D (3075) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (3075) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (3125) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (3125) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (3125) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (3135) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (3145) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (3145) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (3155) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (3165) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 70277
D (3165) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (3175) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (3185) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (3185) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (3195) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (3195) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (3205) mbm_error_cb_request_success: 10 00 04 00 01 02 00 00 
D (3205) mb_object.master: 0x3ffaff70, transaction processing time(us) = 158884
D (3225) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (3225) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (3245) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x0000), write successful.
D (3305) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (3305) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (3305) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 00 00 01 02 11 11 
D (3305) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (3315) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (3325) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (3325) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 30 30 30 30 31 30 32 31 
D (3335) mbm_ascii@0x3ffaff70:PORT_SEND: 31 31 31 43 41 0d 0a 
D (3345) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (3345) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (3395) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (3395) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (3405) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (3405) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (3415) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (3415) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 30 30 30 30 31 45 45 0d 
D (3425) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (3435) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 70261
D (3435) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (3445) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 00 00 01 
D (3455) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (3455) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (3465) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (3465) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (3475) mbm_error_cb_request_success: 10 00 00 00 01 02 11 11 
D (3485) mb_object.master: 0x3ffaff70, transaction processing time(us) = 158876
D (3495) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (3495) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(0) = ESP_OK
I (3515) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111), write successful.
I (3515) TEST_COMMON: CHAR #0, value is ok.
D (3535) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (3535) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (3535) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 01 00 01 02 22 22 
D (3545) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (3545) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (3555) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (3555) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 31 30 30 30 31 30 32 32 
D (3565) mbm_ascii@0x3ffaff70:PORT_SEND: 32 32 32 41 37 0d 0a 
D (3575) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (3585) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (3635) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (3635) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (3635) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (3635) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (3645) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (3655) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 31 30 30 30 31 45 44 0d 
D (3655) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (3665) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 70270
D (3675) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (3675) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 01 00 01 
D (3685) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (3685) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (3695) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (3695) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (3705) mbm_error_cb_request_success: 10 00 01 00 01 02 22 22 
D (3715) mb_object.master: 0x3ffaff70, transaction processing time(us) = 158885
D (3725) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (3725) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(1) = ESP_OK
I (3745) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222), write successful.
I (3745) TEST_COMMON: CHAR #1, value is ok.
D (3765) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (3765) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (3765) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 02 00 01 02 33 33 
D (3775) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (3775) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (3785) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (3795) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 32 30 30 30 31 30 32 33 
D (3795) mbm_ascii@0x3ffaff70:PORT_SEND: 33 33 33 38 34 0d 0a 
D (3805) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (3815) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (3865) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (3865) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (3865) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (3865) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (3875) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (3885) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 32 30 30 30 31 45 43 0d 
D (3885) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (3895) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 70259
D (3905) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (3905) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 02 00 01 
D (3915) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (3915) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (3925) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (3925) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (3935) mbm_error_cb_request_success: 10 00 02 00 01 02 33 33 
D (3945) mb_object.master: 0x3ffaff70, transaction processing time(us) = 158873
D (3955) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (3955) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(2) = ESP_OK
I (3975) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333), write successful.
I (3975) TEST_COMMON: CHAR #2, value is ok.
D (3995) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (3995) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (3995) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 03 00 01 02 44 44 
D (4005) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (4005) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (4015) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (4025) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 33 30 30 30 31 30 32 34 
D (4025) mbm_ascii@0x3ffaff70:PORT_SEND: 34 34 34 36 31 0d 0a 
D (4035) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (4045) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (4095) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (4095) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (4095) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (4105) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (4105) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (4115) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 33 30 30 30 31 45 42 0d 
D (4125) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (4125) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 70333
D (4135) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (4135) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 03 00 01 
D (4145) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (4145) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (4155) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (4165) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (4165) mbm_error_cb_request_success: 10 00 03 00 01 02 44 44 
D (4175) mb_object.master: 0x3ffaff70, transaction processing time(us) = 158948
D (4195) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (4195) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(3) = ESP_OK
I (4195) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444), write successful.
I (4215) TEST_COMMON: CHAR #3, value is ok.
D (4215) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (4235) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (4235) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 01 
D (4235) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (4235) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (4245) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (4255) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (4265) mbm_ascii@0x3ffaff70:PORT_SEND: 30 30 31 45 37 0d 0a 
D (4265) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (4275) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (4325) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (4325) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (4325) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (4335) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (4335) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (4345) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (4355) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (4355) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 70272
D (4365) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (4375) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (4375) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (4385) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (4385) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (4395) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (4395) mbm_error_cb_request_success: 10 00 04 00 01 02 00 01 
D (4405) mb_object.master: 0x3ffaff70, transaction processing time(us) = 155952
D (4425) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (4425) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (4425) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x0001), write successful.
D (4505) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (4505) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (4505) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 00 00 01 
D (4505) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (4515) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (4525) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (4525) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 30 30 30 30 31 46 42 0d 
D (4535) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (4545) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (4545) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (4595) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (4595) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (4595) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (4605) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (4605) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (4615) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 31 31 31 31 44 38 0d 0a 
D (4625) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 68424
D (4635) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (4635) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 11 11 
D (4645) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (4645) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (4655) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (4655) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (4665) mbm_error_cb_request_success: 03 00 00 00 01 
D (4675) mb_object.master: 0x3ffaff70, transaction processing time(us) = 149827
D (4685) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (4685) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(0) = ESP_OK
I (4705) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111) parameter read successful.
I (4705) TEST_COMMON: CHAR #0, value is ok.
D (4725) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (4725) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (4725) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 01 00 01 
D (4735) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (4735) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (4745) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (4745) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 31 30 30 30 31 46 41 0d 
D (4755) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (4765) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (4765) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (4815) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (4815) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (4815) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (4825) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (4835) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (4835) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 32 32 32 32 42 36 0d 0a 
D (4845) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 68477
D (4855) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (4855) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 22 22 
D (4865) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (4865) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (4875) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (4885) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (4885) mbm_error_cb_request_success: 03 00 01 00 01 
D (4895) mb_object.master: 0x3ffaff70, transaction processing time(us) = 149867
D (4905) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (4905) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(1) = ESP_OK
I (4925) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222) parameter read successful.
I (4925) TEST_COMMON: CHAR #1, value is ok.
D (4945) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (4945) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (4945) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 02 00 01 
D (4955) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (4955) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (4965) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (4975) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 32 30 30 30 31 46 39 0d 
D (4975) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (4985) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (4995) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (5035) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (5035) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (5045) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (5045) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (5055) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (5055) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 33 33 33 33 39 34 0d 0a 
D (5065) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 68472
D (5075) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (5085) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 33 33 
D (5085) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (5095) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (5095) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (5105) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (5105) mbm_error_cb_request_success: 03 00 02 00 01 
D (5115) mb_object.master: 0x3ffaff70, transaction processing time(us) = 149874
D (5135) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (5135) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(2) = ESP_OK
I (5135) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333) parameter read successful.
I (5155) TEST_COMMON: CHAR #2, value is ok.
D (5155) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (5175) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (5175) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 03 00 01 
D (5175) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (5185) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (5185) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (5195) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 33 30 30 30 31 46 38 0d 
D (5205) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (5205) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (5215) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (5265) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (5265) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (5265) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (5265) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (5275) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (5285) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 34 34 34 34 37 32 0d 0a 
D (5285) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 68461
D (5295) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (5305) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 44 44 
D (5305) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (5315) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (5315) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (5325) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (5335) mbm_error_cb_request_success: 03 00 03 00 01 
D (5335) mb_object.master: 0x3ffaff70, transaction processing time(us) = 148581
D (5355) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (5355) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(3) = ESP_OK
I (5375) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444) parameter read successful.
I (5375) TEST_COMMON: CHAR #3, value is ok.
D (5375) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (5395) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (5395) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 02 
D (5395) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (5405) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (5405) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (5415) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (5425) mbm_ascii@0x3ffaff70:PORT_SEND: 30 30 32 45 36 0d 0a 
D (5425) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (5435) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (5485) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (5485) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (5485) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (5495) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (5505) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (5505) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (5515) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (5515) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 70301
D (5525) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (5535) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (5535) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (5545) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (5545) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (5555) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (5565) mbm_error_cb_request_success: 10 00 04 00 01 02 00 02 
D (5565) mb_object.master: 0x3ffaff70, transaction processing time(us) = 158908
D (5585) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (5585) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (5605) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x0002), write successful.
D (5665) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (5665) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (5665) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 00 00 01 02 11 11 
D (5665) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (5675) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (5685) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (5685) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 30 30 30 30 31 30 32 31 
D (5695) mbm_ascii@0x3ffaff70:PORT_SEND: 31 31 31 43 41 0d 0a 
D (5705) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (5705) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (5755) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (5755) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (5765) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (5765) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (5775) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (5775) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 30 30 30 30 31 45 45 0d 
D (5785) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (5795) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 70228
D (5795) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (5805) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 00 00 01 
D (5815) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (5815) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (5825) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (5825) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (5835) mbm_error_cb_request_success: 10 00 00 00 01 02 11 11 
D (5845) mb_object.master: 0x3ffaff70, transaction processing time(us) = 158843
D (5855) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (5855) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(0) = ESP_OK
I (5875) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111), write successful.
I (5875) TEST_COMMON: CHAR #0, value is ok.
D (5895) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (5895) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (5895) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 01 00 01 02 22 22 
D (5905) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (5905) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (5915) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (5915) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 31 30 30 30 31 30 32 32 
D (5925) mbm_ascii@0x3ffaff70:PORT_SEND: 32 32 32 41 37 0d 0a 
D (5935) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (5945) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (5995) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (5995) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (5995) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (5995) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (6005) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (6015) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 31 30 30 30 31 45 44 0d 
D (6015) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (6025) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 70337
D (6035) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (6035) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 01 00 01 
D (6045) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (6045) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (6055) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (6055) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (6065) mbm_error_cb_request_success: 10 00 01 00 01 02 22 22 
D (6075) mb_object.master: 0x3ffaff70, transaction processing time(us) = 158952
D (6085) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (6085) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(1) = ESP_OK
I (6105) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222), write successful.
I (6105) TEST_COMMON: CHAR #1, value is ok.
D (6125) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (6125) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (6125) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 02 00 01 02 33 33 
D (6135) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (6135) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (6145) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (6155) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 32 30 30 30 31 30 32 33 
D (6155) mbm_ascii@0x3ffaff70:PORT_SEND: 33 33 33 38 34 0d 0a 
D (6165) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (6175) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (6225) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (6225) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (6225) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (6225) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (6235) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (6245) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 32 30 30 30 31 45 43 0d 
D (6245) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (6255) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 70260
D (6265) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (6265) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 02 00 01 
D (6275) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (6275) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (6285) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (6285) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (6295) mbm_error_cb_request_success: 10 00 02 00 01 02 33 33 
D (6305) mb_object.master: 0x3ffaff70, transaction processing time(us) = 158874
D (6315) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (6315) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(2) = ESP_OK
I (6335) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333), write successful.
I (6335) TEST_COMMON: CHAR #2, value is ok.
D (6355) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (6355) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (6355) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 03 00 01 02 44 44 
D (6365) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (6365) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (6375) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (6385) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 33 30 30 30 31 30 32 34 
D (6385) mbm_ascii@0x3ffaff70:PORT_SEND: 34 34 34 36 31 0d 0a 
D (6395) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (6405) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (6455) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (6455) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (6455) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (6465) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (6465) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (6475) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 33 30 30 30 31 45 42 0d 
D (6485) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (6485) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 70334
D (6495) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (6495) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 03 00 01 
D (6505) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (6505) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (6515) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (6525) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (6525) mbm_error_cb_request_success: 10 00 03 00 01 02 44 44 
D (6535) mb_object.master: 0x3ffaff70, transaction processing time(us) = 158948
D (6555) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (6555) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(3) = ESP_OK
I (6555) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444), write successful.
I (6575) TEST_COMMON: CHAR #3, value is ok.
D (6575) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (6595) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (6595) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 03 
D (6595) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (6595) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (6605) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (6615) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (6625) mbm_ascii@0x3ffaff70:PORT_SEND: 30 30 33 45 35 0d 0a 
D (6625) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (6635) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (6685) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (6685) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (6685) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (6695) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (6695) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (6705) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (6715) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (6715) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 70256
D (6725) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (6735) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (6735) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (6745) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (6745) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (6755) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (6755) mbm_error_cb_request_success: 10 00 04 00 01 02 00 03 
D (6765) mb_object.master: 0x3ffaff70, transaction processing time(us) = 155955
D (6785) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (6785) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (6785) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x0003), write successful.
D (6865) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (6865) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (6865) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 00 00 01 
D (6865) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (6875) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (6885) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (6885) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 30 30 30 30 31 46 42 0d 
D (6895) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (6905) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (6905) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (6955) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (6955) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (6955) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (6965) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (6965) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (6975) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 31 31 31 31 44 38 0d 0a 
D (6985) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 68425
D (6995) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (6995) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 11 11 
D (7005) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (7005) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (7015) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (7015) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (7025) mbm_error_cb_request_success: 03 00 00 00 01 
D (7035) mb_object.master: 0x3ffaff70, transaction processing time(us) = 149827
D (7045) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (7045) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(0) = ESP_OK
I (7065) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111) parameter read successful.
I (7065) TEST_COMMON: CHAR #0, value is ok.
D (7085) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (7085) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (7085) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 01 00 01 
D (7095) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (7095) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (7105) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (7105) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 31 30 30 30 31 46 41 0d 
D (7115) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (7125) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (7125) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (7175) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (7175) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (7175) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (7185) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (7195) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (7195) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 32 32 32 32 42 36 0d 0a 
D (7205) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 68473
D (7215) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (7215) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 22 22 
D (7225) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (7225) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (7235) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (7245) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (7245) mbm_error_cb_request_success: 03 00 01 00 01 
D (7255) mb_object.master: 0x3ffaff70, transaction processing time(us) = 149874
D (7265) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (7265) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(1) = ESP_OK
I (7285) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222) parameter read successful.
I (7285) TEST_COMMON: CHAR #1, value is ok.
D (7305) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (7305) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (7305) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 02 00 01 
D (7315) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (7315) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (7325) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (7335) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 32 30 30 30 31 46 39 0d 
D (7335) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (7345) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (7355) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (7395) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (7395) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (7405) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (7405) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (7415) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (7415) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 33 33 33 33 39 34 0d 0a 
D (7425) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 68464
D (7435) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (7445) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 33 33 
D (7445) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (7455) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (7455) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (7465) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (7465) mbm_error_cb_request_success: 03 00 02 00 01 
D (7475) mb_object.master: 0x3ffaff70, transaction processing time(us) = 149866
D (7495) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (7495) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(2) = ESP_OK
I (7495) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333) parameter read successful.
I (7515) TEST_COMMON: CHAR #2, value is ok.
D (7515) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (7535) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (7535) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 03 00 01 
D (7535) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (7545) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (7545) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (7555) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 33 30 30 30 31 46 38 0d 
D (7565) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (7565) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (7575) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (7625) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (7625) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (7625) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (7625) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (7635) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (7645) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 34 34 34 34 37 32 0d 0a 
D (7645) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 68484
D (7655) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (7665) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 44 44 
D (7665) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (7675) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (7675) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (7685) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (7695) mbm_error_cb_request_success: 03 00 03 00 01 
D (7695) mb_object.master: 0x3ffaff70, transaction processing time(us) = 148618
D (7715) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (7715) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(3) = ESP_OK
I (7735) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444) parameter read successful.
I (7735) TEST_COMMON: CHAR #3, value is ok.
D (7735) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (7755) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (7755) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 04 
D (7755) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (7765) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (7765) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (7775) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (7785) mbm_ascii@0x3ffaff70:PORT_SEND: 30 30 34 45 34 0d 0a 
D (7785) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (7795) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (7845) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (7845) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (7845) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (7855) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (7865) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (7865) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (7875) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (7875) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 70277
D (7885) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (7895) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (7895) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (7905) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (7905) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (7915) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (7925) mbm_error_cb_request_success: 10 00 04 00 01 02 00 04 
D (7925) mb_object.master: 0x3ffaff70, transaction processing time(us) = 158884
D (7945) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (7945) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (7965) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x0004), write successful.
D (8025) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (8025) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (8025) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 00 00 01 02 11 11 
D (8025) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (8035) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (8045) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (8045) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 30 30 30 30 31 30 32 31 
D (8055) mbm_ascii@0x3ffaff70:PORT_SEND: 31 31 31 43 41 0d 0a 
D (8065) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (8065) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (8115) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (8115) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (8125) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (8125) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (8135) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (8135) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 30 30 30 30 31 45 45 0d 
D (8145) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (8155) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 70225
D (8155) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (8165) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 00 00 01 
D (8175) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (8175) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (8185) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (8185) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (8195) mbm_error_cb_request_success: 10 00 00 00 01 02 11 11 
D (8205) mb_object.master: 0x3ffaff70, transaction processing time(us) = 158839
D (8215) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (8215) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(0) = ESP_OK
I (8235) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111), write successful.
I (8235) TEST_COMMON: CHAR #0, value is ok.
D (8255) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (8255) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (8255) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 01 00 01 02 22 22 
D (8265) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (8265) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (8275) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (8275) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 31 30 30 30 31 30 32 32 
D (8285) mbm_ascii@0x3ffaff70:PORT_SEND: 32 32 32 41 37 0d 0a 
D (8295) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (8305) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (8355) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (8355) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (8355) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (8355) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (8365) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (8375) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 31 30 30 30 31 45 44 0d 
D (8375) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (8385) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 70334
D (8395) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (8395) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 01 00 01 
D (8405) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (8405) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (8415) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (8415) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (8425) mbm_error_cb_request_success: 10 00 01 00 01 02 22 22 
D (8435) mb_object.master: 0x3ffaff70, transaction processing time(us) = 158948
D (8445) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (8445) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(1) = ESP_OK
I (8465) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222), write successful.
I (8465) TEST_COMMON: CHAR #1, value is ok.
D (8485) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (8485) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (8485) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 02 00 01 02 33 33 
D (8495) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (8495) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (8505) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (8515) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 32 30 30 30 31 30 32 33 
D (8515) mbm_ascii@0x3ffaff70:PORT_SEND: 33 33 33 38 34 0d 0a 
D (8525) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (8535) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (8585) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (8585) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (8585) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (8585) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (8595) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (8605) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 32 30 30 30 31 45 43 0d 
D (8605) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (8615) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 70277
D (8625) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (8625) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 02 00 01 
D (8635) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (8635) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (8645) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (8645) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (8655) mbm_error_cb_request_success: 10 00 02 00 01 02 33 33 
D (8665) mb_object.master: 0x3ffaff70, transaction processing time(us) = 158878
D (8675) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (8675) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(2) = ESP_OK
I (8695) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333), write successful.
I (8695) TEST_COMMON: CHAR #2, value is ok.
D (8715) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (8715) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (8715) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 03 00 01 02 44 44 
D (8725) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (8725) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (8735) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (8745) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 33 30 30 30 31 30 32 34 
D (8745) mbm_ascii@0x3ffaff70:PORT_SEND: 34 34 34 36 31 0d 0a 
D (8755) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (8765) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (8815) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (8815) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (8815) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (8825) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (8825) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (8835) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 33 30 30 30 31 45 42 0d 
D (8845) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (8845) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 70333
D (8855) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (8855) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 03 00 01 
D (8865) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (8865) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (8875) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (8885) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (8885) mbm_error_cb_request_success: 10 00 03 00 01 02 44 44 
D (8895) mb_object.master: 0x3ffaff70, transaction processing time(us) = 158948
D (8915) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (8915) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(3) = ESP_OK
I (8915) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444), write successful.
I (8935) TEST_COMMON: CHAR #3, value is ok.
D (8935) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (8955) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (8955) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 05 
D (8955) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (8955) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (8965) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (8975) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (8985) mbm_ascii@0x3ffaff70:PORT_SEND: 30 30 35 45 33 0d 0a 
D (8985) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (8995) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (9045) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (9045) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (9045) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (9055) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (9055) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (9065) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (9075) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (9075) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 70272
D (9085) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (9095) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (9095) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (9105) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (9105) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (9115) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (9115) mbm_error_cb_request_success: 10 00 04 00 01 02 00 05 
D (9125) mb_object.master: 0x3ffaff70, transaction processing time(us) = 155984
D (9145) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (9145) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (9145) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x0005), write successful.
D (9225) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (9225) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (9225) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 00 00 01 
D (9225) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (9235) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (9245) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (9245) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 30 30 30 30 31 46 42 0d 
D (9255) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (9265) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (9265) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (9315) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (9315) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (9315) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (9325) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (9325) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (9335) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 31 31 31 31 44 38 0d 0a 
D (9345) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 68457
D (9355) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (9355) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 11 11 
D (9365) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (9365) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (9375) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (9375) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (9385) mbm_error_cb_request_success: 03 00 00 00 01 
D (9395) mb_object.master: 0x3ffaff70, transaction processing time(us) = 149860
D (9405) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (9405) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(0) = ESP_OK
I (9425) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111) parameter read successful.
I (9425) TEST_COMMON: CHAR #0, value is ok.
D (9445) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (9445) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (9445) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 01 00 01 
D (9455) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (9455) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (9465) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (9465) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 31 30 30 30 31 46 41 0d 
D (9475) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (9485) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (9485) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (9535) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (9535) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (9535) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (9545) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (9555) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (9555) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 32 32 32 32 42 36 0d 0a 
D (9565) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 68465
D (9575) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (9575) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 22 22 
D (9585) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (9585) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (9595) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (9605) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (9605) mbm_error_cb_request_success: 03 00 01 00 01 
D (9615) mb_object.master: 0x3ffaff70, transaction processing time(us) = 149866
D (9625) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (9625) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(1) = ESP_OK
I (9645) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222) parameter read successful.
I (9645) TEST_COMMON: CHAR #1, value is ok.
D (9665) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (9665) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (9665) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 02 00 01 
D (9675) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (9675) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (9685) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (9695) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 32 30 30 30 31 46 39 0d 
D (9695) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (9705) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (9715) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (9755) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (9755) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (9765) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (9765) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (9775) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (9775) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 33 33 33 33 39 34 0d 0a 
D (9785) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 68473
D (9795) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (9805) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 33 33 
D (9805) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (9815) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (9815) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (9825) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (9825) mbm_error_cb_request_success: 03 00 02 00 01 
D (9835) mb_object.master: 0x3ffaff70, transaction processing time(us) = 149874
D (9855) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (9855) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(2) = ESP_OK
I (9855) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333) parameter read successful.
I (9875) TEST_COMMON: CHAR #2, value is ok.
D (9875) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (9895) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (9895) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 03 00 01 
D (9895) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (9905) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (9905) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (9915) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 33 30 30 30 31 46 38 0d 
D (9925) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (9925) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (9935) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (9985) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (9985) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (9985) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (9995) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (9995) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (10005) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 34 34 34 34 37 32 0d 0a 
D (10015) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 69779
D (10015) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (10025) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 44 44 
D (10035) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (10035) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (10045) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (10045) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (10055) mbm_error_cb_request_success: 03 00 03 00 01 
D (10055) mb_object.master: 0x3ffaff70, transaction processing time(us) = 150454
D (10075) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (10075) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(3) = ESP_OK
I (10095) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444) parameter read successful.
I (10095) TEST_COMMON: CHAR #3, value is ok.
D (10095) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (10115) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (10115) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 06 
D (10125) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (10125) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (10135) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (10135) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (10145) mbm_ascii@0x3ffaff70:PORT_SEND: 30 30 36 45 32 0d 0a 
D (10155) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (10165) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (10215) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (10215) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (10215) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (10215) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (10225) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (10235) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (10235) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (10245) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 71516
D (10255) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (10255) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (10265) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (10265) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (10275) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (10285) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (10285) mbm_error_cb_request_success: 10 00 04 00 01 02 00 06 
D (10295) mb_object.master: 0x3ffaff70, transaction processing time(us) = 161338
D (10315) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (10315) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (10315) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x0006), write successful.
D (10395) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (10395) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (10395) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 00 00 01 02 11 11 
D (10405) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (10405) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (10415) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (10415) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 30 30 30 30 31 30 32 31 
D (10425) mbm_ascii@0x3ffaff70:PORT_SEND: 31 31 31 43 41 0d 0a 
D (10435) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (10445) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (10495) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (10495) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (10495) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (10495) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (10505) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (10515) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 30 30 30 30 31 45 45 0d 
D (10515) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (10525) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 71504
D (10535) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (10535) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 00 00 01 
D (10545) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (10545) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (10555) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (10565) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (10565) mbm_error_cb_request_success: 10 00 00 00 01 02 11 11 
D (10575) mb_object.master: 0x3ffaff70, transaction processing time(us) = 161333
D (10595) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (10595) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(0) = ESP_OK
I (10595) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111), write successful.
I (10615) TEST_COMMON: CHAR #0, value is ok.
D (10615) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (10635) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (10635) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 01 00 01 02 22 22 
D (10635) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (10645) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (10645) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (10655) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 31 30 30 30 31 30 32 32 
D (10665) mbm_ascii@0x3ffaff70:PORT_SEND: 32 32 32 41 37 0d 0a 
D (10665) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (10675) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (10725) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (10725) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (10725) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (10735) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (10735) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (10745) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 31 30 30 30 31 45 44 0d 
D (10755) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (10755) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 71505
D (10765) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (10775) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 01 00 01 
D (10775) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (10785) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (10785) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (10795) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (10805) mbm_error_cb_request_success: 10 00 01 00 01 02 22 22 
D (10805) mb_object.master: 0x3ffaff70, transaction processing time(us) = 158920
D (10825) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (10825) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(1) = ESP_OK
I (10845) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222), write successful.
I (10845) TEST_COMMON: CHAR #1, value is ok.
D (10845) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (10865) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (10865) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 02 00 01 02 33 33 
D (10865) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (10875) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (10885) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (10885) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 32 30 30 30 31 30 32 33 
D (10895) mbm_ascii@0x3ffaff70:PORT_SEND: 33 33 33 38 34 0d 0a 
D (10905) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (10905) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (10955) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (10955) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (10965) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (10965) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (10975) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (10985) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 32 30 30 30 31 45 43 0d 
D (10985) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (10995) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 71520
D (11005) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (11005) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 02 00 01 
D (11015) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (11015) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (11025) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (11025) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (11035) mbm_error_cb_request_success: 10 00 02 00 01 02 33 33 
D (11045) mb_object.master: 0x3ffaff70, transaction processing time(us) = 161350
D (11055) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (11055) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(2) = ESP_OK
I (11075) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333), write successful.
I (11075) TEST_COMMON: CHAR #2, value is ok.
D (11095) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (11095) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (11095) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 03 00 01 02 44 44 
D (11105) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (11105) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (11115) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (11125) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 33 30 30 30 31 30 32 34 
D (11135) mbm_ascii@0x3ffaff70:PORT_SEND: 34 34 34 36 31 0d 0a 
D (11135) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (11145) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (11195) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (11195) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (11195) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (11205) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (11205) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (11215) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 33 30 30 30 31 45 42 0d 
D (11225) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (11225) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 71513
D (11235) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (11245) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 03 00 01 
D (11245) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (11255) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (11255) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (11265) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (11265) mbm_error_cb_request_success: 10 00 03 00 01 02 44 44 
D (11275) mb_object.master: 0x3ffaff70, transaction processing time(us) = 161342
D (11295) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (11295) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(3) = ESP_OK
I (11315) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444), write successful.
I (11315) TEST_COMMON: CHAR #3, value is ok.
D (11315) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (11335) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (11335) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 07 
D (11335) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (11345) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (11345) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (11355) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (11365) mbm_ascii@0x3ffaff70:PORT_SEND: 30 30 37 45 31 0d 0a 
D (11375) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (11375) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (11425) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (11425) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (11425) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (11435) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (11445) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (11445) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (11455) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (11465) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 71504
D (11465) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (11475) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (11485) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (11485) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (11495) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (11495) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (11505) mbm_error_cb_request_success: 10 00 04 00 01 02 00 07 
D (11515) mb_object.master: 0x3ffaff70, transaction processing time(us) = 161334
D (11525) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (11525) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (11545) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x0007), write successful.
D (11605) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (11605) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (11605) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 00 00 01 
D (11605) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (11615) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (11625) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (11625) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 30 30 30 30 31 46 42 0d 
D (11635) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (11645) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (11645) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (11695) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (11695) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (11695) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (11705) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (11715) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (11715) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 31 31 31 31 44 38 0d 0a 
D (11725) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 69696
D (11735) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (11745) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 11 11 
D (11745) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (11755) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (11755) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (11765) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (11765) mbm_error_cb_request_success: 03 00 00 00 01 
D (11775) mb_object.master: 0x3ffaff70, transaction processing time(us) = 152225
D (11795) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (11795) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(0) = ESP_OK
I (11795) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111) parameter read successful.
I (11815) TEST_COMMON: CHAR #0, value is ok.
D (11815) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (11835) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (11835) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 01 00 01 
D (11835) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (11845) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (11845) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (11855) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 31 30 30 30 31 46 41 0d 
D (11865) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (11865) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (11875) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (11925) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (11925) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (11925) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (11935) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (11935) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (11945) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 32 32 32 32 42 36 0d 0a 
D (11955) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 69676
D (11955) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (11965) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 22 22 
D (11975) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (11975) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (11985) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (11985) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (11995) mbm_error_cb_request_success: 03 00 01 00 01 
D (11995) mb_object.master: 0x3ffaff70, transaction processing time(us) = 150640
D (12015) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (12015) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(1) = ESP_OK
I (12035) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222) parameter read successful.
I (12035) TEST_COMMON: CHAR #1, value is ok.
D (12035) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (12055) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (12055) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 02 00 01 
D (12055) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (12065) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (12075) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (12075) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 32 30 30 30 31 46 39 0d 
D (12085) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (12095) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (12095) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (12145) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (12145) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (12145) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (12155) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (12165) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (12165) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 33 33 33 33 39 34 0d 0a 
D (12175) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 69653
D (12185) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (12195) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 33 33 
D (12195) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (12205) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (12205) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (12215) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (12215) mbm_error_cb_request_success: 03 00 02 00 01 
D (12225) mb_object.master: 0x3ffaff70, transaction processing time(us) = 152183
D (12245) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (12245) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(2) = ESP_OK
I (12245) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333) parameter read successful.
I (12265) TEST_COMMON: CHAR #2, value is ok.
D (12265) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (12285) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (12285) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 03 00 01 
D (12285) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (12295) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (12295) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (12305) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 33 30 30 30 31 46 38 0d 
D (12315) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (12315) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (12325) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (12375) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (12375) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (12375) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (12385) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (12385) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (12395) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 34 34 34 34 37 32 0d 0a 
D (12405) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 69693
D (12405) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (12415) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 44 44 
D (12425) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (12425) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (12435) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (12435) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (12445) mbm_error_cb_request_success: 03 00 03 00 01 
D (12445) mb_object.master: 0x3ffaff70, transaction processing time(us) = 150767
D (12465) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (12465) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(3) = ESP_OK
I (12485) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444) parameter read successful.
I (12485) TEST_COMMON: CHAR #3, value is ok.
D (12485) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (12505) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (12505) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 08 
D (12515) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (12515) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (12525) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (12525) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (12535) mbm_ascii@0x3ffaff70:PORT_SEND: 30 30 38 45 30 0d 0a 
D (12545) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (12555) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (12605) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (12605) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (12605) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (12605) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (12615) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (12625) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (12635) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (12635) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 71473
D (12645) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (12645) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (12655) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (12655) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (12665) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (12675) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (12675) mbm_error_cb_request_success: 10 00 04 00 01 02 00 08 
D (12685) mb_object.master: 0x3ffaff70, transaction processing time(us) = 161295
D (12705) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (12705) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (12705) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x0008), write successful.
D (12785) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (12785) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (12785) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 00 00 01 02 11 11 
D (12795) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (12795) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (12805) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (12805) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 30 30 30 30 31 30 32 31 
D (12815) mbm_ascii@0x3ffaff70:PORT_SEND: 31 31 31 43 41 0d 0a 
D (12825) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (12835) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (12885) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (12885) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (12885) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (12885) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (12895) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (12905) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 30 30 30 30 31 45 45 0d 
D (12905) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (12915) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 71482
D (12925) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (12925) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 00 00 01 
D (12935) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (12935) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (12945) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (12955) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (12955) mbm_error_cb_request_success: 10 00 00 00 01 02 11 11 
D (12965) mb_object.master: 0x3ffaff70, transaction processing time(us) = 161311
D (12985) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (12985) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(0) = ESP_OK
I (12985) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111), write successful.
I (13005) TEST_COMMON: CHAR #0, value is ok.
D (13005) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (13025) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (13025) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 01 00 01 02 22 22 
D (13025) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (13035) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (13035) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (13045) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 31 30 30 30 31 30 32 32 
D (13055) mbm_ascii@0x3ffaff70:PORT_SEND: 32 32 32 41 37 0d 0a 
D (13055) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (13065) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (13115) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (13115) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (13115) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (13125) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (13125) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (13135) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 31 30 30 30 31 45 44 0d 
D (13145) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (13145) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 71520
D (13155) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (13165) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 01 00 01 
D (13165) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (13175) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (13175) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (13185) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (13195) mbm_error_cb_request_success: 10 00 01 00 01 02 22 22 
D (13195) mb_object.master: 0x3ffaff70, transaction processing time(us) = 158928
D (13215) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (13215) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(1) = ESP_OK
I (13235) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222), write successful.
I (13235) TEST_COMMON: CHAR #1, value is ok.
D (13235) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (13255) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (13255) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 02 00 01 02 33 33 
D (13255) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (13265) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (13275) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (13275) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 32 30 30 30 31 30 32 33 
D (13285) mbm_ascii@0x3ffaff70:PORT_SEND: 33 33 33 38 34 0d 0a 
D (13295) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (13295) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (13345) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (13345) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (13355) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (13355) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (13365) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (13375) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 32 30 30 30 31 45 43 0d 
D (13375) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (13385) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 71504
D (13395) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (13395) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 02 00 01 
D (13405) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (13405) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (13415) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (13415) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (13425) mbm_error_cb_request_success: 10 00 02 00 01 02 33 33 
D (13435) mb_object.master: 0x3ffaff70, transaction processing time(us) = 161333
D (13445) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (13445) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(2) = ESP_OK
I (13465) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333), write successful.
I (13465) TEST_COMMON: CHAR #2, value is ok.
D (13485) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (13485) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (13485) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 03 00 01 02 44 44 
D (13495) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (13495) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (13505) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (13515) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 33 30 30 30 31 30 32 34 
D (13525) mbm_ascii@0x3ffaff70:PORT_SEND: 34 34 34 36 31 0d 0a 
D (13525) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (13535) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (13585) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (13585) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (13585) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (13595) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (13595) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (13605) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 33 30 30 30 31 45 42 0d 
D (13615) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (13615) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 71512
D (13625) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (13635) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 03 00 01 
D (13635) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (13645) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (13645) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (13655) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (13655) mbm_error_cb_request_success: 10 00 03 00 01 02 44 44 
D (13665) mb_object.master: 0x3ffaff70, transaction processing time(us) = 161342
D (13685) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (13685) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(3) = ESP_OK
I (13705) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444), write successful.
I (13705) TEST_COMMON: CHAR #3, value is ok.
D (13705) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (13725) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (13725) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 09 
D (13725) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (13735) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (13735) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (13745) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (13755) mbm_ascii@0x3ffaff70:PORT_SEND: 30 30 39 44 46 0d 0a 
D (13765) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (13765) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (13815) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (13815) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (13815) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (13825) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (13835) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (13835) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (13845) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (13855) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 71520
D (13855) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (13865) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (13875) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (13875) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (13885) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (13885) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (13895) mbm_error_cb_request_success: 10 00 04 00 01 02 00 09 
D (13905) mb_object.master: 0x3ffaff70, transaction processing time(us) = 161350
D (13915) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (13915) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (13935) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x0009), write successful.
D (13995) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (13995) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (13995) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 00 00 01 
D (13995) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (14005) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (14015) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (14015) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 30 30 30 30 31 46 42 0d 
D (14025) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (14035) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (14035) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (14085) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (14085) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (14085) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (14095) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (14105) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (14105) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 31 31 31 31 44 38 0d 0a 
D (14115) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 69709
D (14125) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (14135) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 11 11 
D (14135) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (14145) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (14145) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (14155) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (14155) mbm_error_cb_request_success: 03 00 00 00 01 
D (14165) mb_object.master: 0x3ffaff70, transaction processing time(us) = 152238
D (14185) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (14185) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(0) = ESP_OK
I (14185) TEST_COMMON: 0x3ffaff70, CHAR #0 MB_hold_reg-0 (Data) value = (0x1111) parameter read successful.
I (14205) TEST_COMMON: CHAR #0, value is ok.
D (14205) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (14225) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (14225) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 01 00 01 
D (14225) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (14235) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (14235) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (14245) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 31 30 30 30 31 46 41 0d 
D (14255) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (14255) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (14265) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (14315) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (14315) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (14315) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (14325) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (14325) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (14335) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 32 32 32 32 42 36 0d 0a 
D (14345) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 69653
D (14345) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (14355) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 22 22 
D (14365) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (14365) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (14375) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (14375) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (14385) mbm_error_cb_request_success: 03 00 01 00 01 
D (14385) mb_object.master: 0x3ffaff70, transaction processing time(us) = 150617
D (14405) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (14405) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(1) = ESP_OK
I (14425) TEST_COMMON: 0x3ffaff70, CHAR #1 MB_hold_reg-1 (Data) value = (0x2222) parameter read successful.
I (14425) TEST_COMMON: CHAR #1, value is ok.
D (14425) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (14445) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (14445) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 02 00 01 
D (14445) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (14455) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (14465) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (14465) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 32 30 30 30 31 46 39 0d 
D (14475) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (14485) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (14485) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (14535) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (14535) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (14535) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (14545) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (14555) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (14555) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 33 33 33 33 39 34 0d 0a 
D (14565) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 69676
D (14575) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (14585) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 33 33 
D (14585) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (14595) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (14595) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (14605) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (14605) mbm_error_cb_request_success: 03 00 02 00 01 
D (14615) mb_object.master: 0x3ffaff70, transaction processing time(us) = 152207
D (14635) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (14635) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(2) = ESP_OK
I (14635) TEST_COMMON: 0x3ffaff70, CHAR #2 MB_hold_reg-2 (Data) value = (0x3333) parameter read successful.
I (14655) TEST_COMMON: CHAR #2, value is ok.
D (14655) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (14675) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (14675) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 03 00 03 00 01 
D (14675) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (14685) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (14685) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (17) bytes.
D (14695) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 30 33 30 30 30 33 30 30 30 31 46 38 0d 
D (14705) mbm_ascii@0x3ffaff70:PORT_SEND: 0a 
D (14705) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (14715) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (14765) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (14765) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 15.
D (14765) mb_port.serial: mbm_ascii@0x3ffaff70, frame 15 bytes is ready.
D (14775) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (14775) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 15 bytes.
D (14785) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 30 33 30 32 34 34 34 34 37 32 0d 0a 
D (14795) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 69656
D (14795) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (14805) mbm_ascii@0x3ffaff70:MB_RECV: 03 02 44 44 
D (14815) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (14815) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (14825) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (14825) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (14835) mbm_error_cb_request_success: 03 00 03 00 01 
D (14835) mb_object.master: 0x3ffaff70, transaction processing time(us) = 150744
D (14855) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (14855) mbc_serial.master: mbc_serial_master_get_parameter: Good response for get cid(3) = ESP_OK
I (14875) TEST_COMMON: 0x3ffaff70, CHAR #3 MB_hold_reg-3 (Data) value = (0x4444) parameter read successful.
I (14875) TEST_COMMON: CHAR #3, value is ok.
D (14875) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (14895) mb_port.event: mbm_ascii@0x3ffaff70, mb take resource, (300 ticks).
D (14895) mbm_ascii@0x3ffaff70:MB_TRANSMIT: 10 00 04 00 01 02 00 0a 
D (14905) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (14905) mb_port.serial: mbm_ascii@0x3ffaff70, uart rx break.
D (14915) mb_port.serial: mbm_ascii@0x3ffaff70, tx buffer sent: (23) bytes.
D (14915) mbm_ascii@0x3ffaff70:PORT_SEND: 3a 30 31 31 30 30 30 30 34 30 30 30 31 30 32 30 
D (14925) mbm_ascii@0x3ffaff70:PORT_SEND: 30 30 41 44 45 0d 0a 
D (14935) mb_port.timer: mbm_ascii@0x3ffaff70, respond enable timeout (2000).
D (14945) mb_object.master: 0x3ffaff70:EV_FRAME_SENT
D (14995) mb_port.serial: mbm_ascii@0x3ffaff70, UART[1] event:
D (14995) mb_port.serial: mbm_ascii@0x3ffaff70, data event, len: 17.
D (14995) mb_port.serial: mbm_ascii@0x3ffaff70, frame 17 bytes is ready.
D (14995) mb_object.master: 0x3ffaff70:EV_FRAME_RECEIVED
D (15005) mb_port.serial: mbm_ascii@0x3ffaff70, received data: 17 bytes.
D (15015) mbm_ascii@0x3ffaff70:PORT_RECV: 3a 30 31 31 30 30 30 30 34 30 30 30 31 45 41 0d 
D (15025) mbm_ascii@0x3ffaff70:PORT_RECV: 0a 
D (15025) mb_port.serial: mbm_ascii@0x3ffaff70, serial processing time[us] = 71497
D (15035) mb_object.master: 0x3ffaff70, frame data received successfully, (0).
D (15035) mbm_ascii@0x3ffaff70:MB_RECV: 10 00 04 00 01 
D (15045) mb_object.master: 0x3ffaff70:EV_EXECUTE
D (15045) mb_object.master: 0x3ffaff70, set event EV_ERROR_OK
D (15055) mb_object.master: 0x3ffaff70:EV_ERROR_PROCESS
D (15065) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
D (15065) mbm_error_cb_request_success: 10 00 04 00 01 02 00 0a 
D (15075) mb_object.master: 0x3ffaff70, transaction processing time(us) = 161319
D (15095) mb_port.event: mbm_ascii@0x3ffaff70, mb_port_event_wait_req_finish: returned event = 0x400
D (15095) mbc_serial.master: mbc_serial_master_set_parameter: Good response for set cid(4) = ESP_OK
I (15095) TEST_COMMON: 0x3ffaff70, CHAR #4 CYCLE_COUNTER (Data) value = (0x000a), write successful.
I (15175) TEST_COMMON: Destroy master, inst: 0x3ffaff70.
D (15175) mb_port.serial: mbm_ascii@0x3ffaff70, suspend port.
D (15175) mb_port.timer: mbm_ascii@0x3ffaff70, timer stop, returns 259.
./main/test_modbus_rs485_comm_master_slave.c:191:Modbus RS485 ASCII multi device master - slave case.:PASS
Test ran in 14193ms</system-out></testcase></testsuite>