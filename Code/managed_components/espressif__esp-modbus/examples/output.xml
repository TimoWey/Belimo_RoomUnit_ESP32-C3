<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 7.1.1 (Python 3.9.2 on linux)" generated="2024-12-20T09:39:33.903998" rpa="false" schemaversion="5">
<suite id="s1" name="ModbusTestSuite" source="/builds/idf/esp-modbus/tools/robot/ModbusTestSuite.robot">
<kw name="Create Connection" owner="ModbusTestSuite" type="SETUP">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:35.943844" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:39:35.943194" elapsed="0.000768"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:35.945047" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:35.944436" elapsed="0.000804"/>
</kw>
<kw name="Connect" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:35.949384" level="INFO">Connect to server: 192.168.34.175:1502
Host IP address: 192.168.35.35</msg>
<msg time="2024-12-20T09:39:35.949770" level="INFO">${connection} = &lt;scapy.supersocket.StreamSocket object at 0xb56fb5c8&gt;</msg>
<var>${connection}</var>
<arg>${host}</arg>
<arg>${port}</arg>
<doc>Create a Modbus connection to target over socket stream.
Args:
    ip_addr (str): A string representing the Modbus server address.
    port: A server port to connect
Returns:
    StreamSocket: The created Modbus socket.
Raises:
    Scapy_Exception: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:39:35.945689" elapsed="0.004183"/>
</kw>
<if>
<branch type="IF" condition="${connection}">
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:35.951610" level="INFO">Connection to host: 192.168.34.175:1502 established.</msg>
<arg>Connection to host: ${host}:${port} established.</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:35.950904" elapsed="0.000902"/>
</kw>
<status status="PASS" start="2024-12-20T09:39:35.950272" elapsed="0.001710"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<arg>Connection to host: ${host}:${port} failed.</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:39:35.952517" elapsed="0.000080"/>
</kw>
<status status="NOT RUN" start="2024-12-20T09:39:35.952102" elapsed="0.000635"/>
</branch>
<status status="PASS" start="2024-12-20T09:39:35.950164" elapsed="0.002656"/>
</if>
<return>
<value>${connection}</value>
<status status="PASS" start="2024-12-20T09:39:35.952968" elapsed="0.000120"/>
</return>
<arg>${MODBUS_DEF_SERVER_IP}</arg>
<arg>${MODBUS_DEF_PORT}</arg>
<status status="PASS" start="2024-12-20T09:39:35.940516" elapsed="0.013062"/>
</kw>
<test id="s1-t1" name="Test Read Holding Registers With Different Addresses And Quantities" line="14">
<kw name="Read Holding Registers" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:35.959142" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:39:35.958585" elapsed="0.000686"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:35.960337" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:35.959723" elapsed="0.000812"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:35.961755" level="INFO">Read Holding Registers with parameters UID:0x01, offs:0x0001, quantity:2</msg>
<arg>Read Holding Registers with parameters UID:${uid}, offs:${start_addr}, quantity:${quantity}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:35.960979" elapsed="0.000962"/>
</kw>
<kw name="Create Holding Read Registers Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:35.967547" level="INFO">Packet created: ModbusADU_Request / ModbusPDU03_Read_Holding_Registers</msg>
<msg time="2024-12-20T09:39:35.967961" level="INFO">${packet} = ModbusADU_Request / ModbusPDU03_Read_Holding_Registers</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0, len=6)/ModbusPDU03_Read_Holding_Registers(funcCode=${FUNC_READ_HOLDING_REGISTERS}, startAddr=${startAddr}, quantity=${quantity})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:39:35.964374" elapsed="0.003680"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:39:35.968295" elapsed="0.000125"/>
</return>
<msg time="2024-12-20T09:39:35.968972" level="INFO">${req} = ModbusADU_Request / ModbusPDU03_Read_Holding_Registers</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${quantity}</arg>
<status status="PASS" start="2024-12-20T09:39:35.962579" elapsed="0.006484"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:38.588622" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0x1
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Read Holding Registers ]###
     funcCode  = 0x3
     startAddr = 0x1
     quantity  = 0x2

Packet get: ###[ ModbusADU Response ]###
  transId   = 0x1
  protoId   = 0x0
  len       = 0x7
  unitId    = 0x1
###[ Read Holding Registers Answer ]###
     funcCode  = 0x3
     byteCount = 4
     registerVal= [85, 21760]

Answer bin: b'\x00\x01\x00\x00\x00\x07\x01\x03\x04\x00UU\x00'
Answer hex: 00010000000701030400555500</msg>
<msg time="2024-12-20T09:39:38.589202" level="INFO">${response} = UU</msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:35.970900" elapsed="2.618457"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:38.591045" level="INFO">Got response UU</msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:38.590149" elapsed="0.001187"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:39:38.591631" elapsed="0.000172"/>
</return>
<msg time="2024-12-20T09:39:38.592592" level="INFO">${response_frame} = UU</msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:39:35.969716" elapsed="2.623023"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:39:38.594204" level="INFO">Length is 13.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:39:38.593360" elapsed="0.001118"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:38.597484" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0x1
  protoId   = 0x0
  len       = 0x7
  unitId    = 0x1
###[ Read Holding Registers Answer ]###
     funcCode  = 0x3
     byteCount = 4
     registerVal= [85, 21760]

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU03_Read_Holding_Registers_Answer, b'\x00\x01\x00\x00\x00\x07\x01\x03\x04\x00UU\x00'
PDU: ModbusADU_Response / ModbusPDU03_Read_Holding_Registers_Answer</msg>
<msg time="2024-12-20T09:39:38.598036" level="INFO">${packet} = ModbusADU_Response / ModbusPDU03_Read_Holding_Registers_Answer</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:38.595110" elapsed="0.003304"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:38.599144" elapsed="0.005414"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:38.608535" level="INFO">PDU is ModbusADU_Response, funcCode: 3
func code: &lt;class 'int'&gt; 3
MB exception: 0, Undefined</msg>
<msg time="2024-12-20T09:39:38.609057" level="INFO">${exception} = 0</msg>
<msg time="2024-12-20T09:39:38.609301" level="INFO">${exp_message} = Undefined</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:38.605295" elapsed="0.004135"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:38.611337" level="INFO">exception: (0: Undefined), expected: 0</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:38.610165" elapsed="0.001449"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:39:38.613271" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:38.612239" elapsed="0.001360"/>
</kw>
<if>
<branch type="IF" condition="${exception} == ${0}">
<kw name="Convert To List" owner="Collections">
<msg time="2024-12-20T09:39:38.620067" level="INFO">${vallist} = [85, 21760]</msg>
<var>${vallist}</var>
<arg>${packet.registerVal}</arg>
<doc>Converts the given ``item`` to a Python ``list`` type.</doc>
<status status="PASS" start="2024-12-20T09:39:38.616776" elapsed="0.003453"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:39:38.621695" level="INFO">Length is 2.</msg>
<arg>${vallist}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:39:38.620903" elapsed="0.001070"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:38.623420" level="INFO">Modbus register values:[85, 21760]</msg>
<arg>Modbus register values:${vallist}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:38.622609" elapsed="0.001082"/>
</kw>
<for flavor="IN">
<iter>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:38.626163" level="INFO">Modbus register value:85</msg>
<arg>Modbus register value:${item}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:38.625366" elapsed="0.001067"/>
</kw>
<var name="${item}">85</var>
<status status="PASS" start="2024-12-20T09:39:38.624796" elapsed="0.001853"/>
</iter>
<iter>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:38.628544" level="INFO">Modbus register value:21760</msg>
<arg>Modbus register value:${item}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:38.627752" elapsed="0.001060"/>
</kw>
<var name="${item}">21760</var>
<status status="PASS" start="2024-12-20T09:39:38.627246" elapsed="0.001780"/>
</iter>
<var>${item}</var>
<value>@{vallist}</value>
<status status="PASS" start="2024-12-20T09:39:38.624028" elapsed="0.005175"/>
</for>
<kw name="Get Length" owner="BuiltIn">
<msg time="2024-12-20T09:39:38.630552" level="INFO">Length is 2.</msg>
<msg time="2024-12-20T09:39:38.630974" level="INFO">${length} = 2</msg>
<var>${length}</var>
<arg>${vallist}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<status status="PASS" start="2024-12-20T09:39:38.629816" elapsed="0.001285"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:38.632510" level="INFO">Items count is: 2</msg>
<arg>Items count is: ${length}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:38.631733" elapsed="0.001043"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:39:38.634439" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${length}</arg>
<arg>${quantity}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:38.633428" elapsed="0.001341"/>
</kw>
<status status="PASS" start="2024-12-20T09:39:38.614051" elapsed="0.020965"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<arg>"Exception is evaluated correctly ${exception} == ${exception_expected}"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:39:38.635753" elapsed="0.000115"/>
</kw>
<status status="NOT RUN" start="2024-12-20T09:39:38.635178" elapsed="0.000894"/>
</branch>
<status status="PASS" start="2024-12-20T09:39:38.613944" elapsed="0.022254"/>
</if>
<arg>0x01</arg>
<arg>0x0001</arg>
<arg>2</arg>
<arg>0</arg>
<status status="PASS" start="2024-12-20T09:39:35.957208" elapsed="2.679293"/>
</kw>
<kw name="Read Holding Registers" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:38.640994" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:39:38.640247" elapsed="0.000895"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:38.642545" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:38.641752" elapsed="0.001059"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:38.644533" level="INFO">Read Holding Registers with parameters UID:0x01, offs:0x0002, quantity:3</msg>
<arg>Read Holding Registers with parameters UID:${uid}, offs:${start_addr}, quantity:${quantity}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:38.643419" elapsed="0.003406"/>
</kw>
<kw name="Create Holding Read Registers Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:38.652421" level="INFO">Packet created: ModbusADU_Request / ModbusPDU03_Read_Holding_Registers</msg>
<msg time="2024-12-20T09:39:38.652936" level="INFO">${packet} = ModbusADU_Request / ModbusPDU03_Read_Holding_Registers</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0, len=6)/ModbusPDU03_Read_Holding_Registers(funcCode=${FUNC_READ_HOLDING_REGISTERS}, startAddr=${startAddr}, quantity=${quantity})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:39:38.650003" elapsed="0.003072"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:39:38.653402" elapsed="0.000171"/>
</return>
<msg time="2024-12-20T09:39:38.654368" level="INFO">${req} = ModbusADU_Request / ModbusPDU03_Read_Holding_Registers</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${quantity}</arg>
<status status="PASS" start="2024-12-20T09:39:38.647789" elapsed="0.006916"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:40.962260" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0x2
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Read Holding Registers ]###
     funcCode  = 0x3
     startAddr = 0x2
     quantity  = 0x3

Packet get: ###[ ModbusADU Response ]###
  transId   = 0x2
  protoId   = 0x0
  len       = 0x9
  unitId    = 0x1
###[ Read Holding Registers Answer ]###
     funcCode  = 0x3
     byteCount = 6
     registerVal= [21760, 21760, 12345]

Answer bin: b'\x00\x02\x00\x00\x00\t\x01\x03\x06U\x00U\x0009'
Answer hex: 000200000009010306550055003039</msg>
<msg time="2024-12-20T09:39:40.962850" level="INFO">${response} = 	UU09</msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:38.657444" elapsed="2.305563"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:40.964696" level="INFO">Got response 	UU09</msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:40.963792" elapsed="0.001193"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:39:40.965283" elapsed="0.000170"/>
</return>
<msg time="2024-12-20T09:39:40.966242" level="INFO">${response_frame} = 	UU09</msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:39:38.655693" elapsed="2.310700"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:39:40.967929" level="INFO">Length is 15.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:39:40.967093" elapsed="0.001114"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:40.971156" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0x2
  protoId   = 0x0
  len       = 0x9
  unitId    = 0x1
###[ Read Holding Registers Answer ]###
     funcCode  = 0x3
     byteCount = 6
     registerVal= [21760, 21760, 12345]

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU03_Read_Holding_Registers_Answer, b'\x00\x02\x00\x00\x00\t\x01\x03\x06U\x00U\x0009'
PDU: ModbusADU_Response / ModbusPDU03_Read_Holding_Registers_Answer</msg>
<msg time="2024-12-20T09:39:40.971716" level="INFO">${packet} = ModbusADU_Response / ModbusPDU03_Read_Holding_Registers_Answer</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:40.968853" elapsed="0.003008"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:40.972555" elapsed="0.005412"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:40.981791" level="INFO">PDU is ModbusADU_Response, funcCode: 3
func code: &lt;class 'int'&gt; 3
MB exception: 0, Undefined</msg>
<msg time="2024-12-20T09:39:40.982293" level="INFO">${exception} = 0</msg>
<msg time="2024-12-20T09:39:40.982537" level="INFO">${exp_message} = Undefined</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:40.978709" elapsed="0.003957"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:40.984530" level="INFO">exception: (0: Undefined), expected: 0</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:40.983383" elapsed="0.001416"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:39:40.986410" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:40.985418" elapsed="0.001323"/>
</kw>
<if>
<branch type="IF" condition="${exception} == ${0}">
<kw name="Convert To List" owner="Collections">
<msg time="2024-12-20T09:39:40.993139" level="INFO">${vallist} = [21760, 21760, 12345]</msg>
<var>${vallist}</var>
<arg>${packet.registerVal}</arg>
<doc>Converts the given ``item`` to a Python ``list`` type.</doc>
<status status="PASS" start="2024-12-20T09:39:40.989951" elapsed="0.003343"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:39:40.995564" level="INFO">Length is 3.</msg>
<arg>${vallist}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:39:40.993954" elapsed="0.001903"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:40.997406" level="INFO">Modbus register values:[21760, 21760, 12345]</msg>
<arg>Modbus register values:${vallist}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:40.996522" elapsed="0.001156"/>
</kw>
<for flavor="IN">
<iter>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:41.000698" level="INFO">Modbus register value:21760</msg>
<arg>Modbus register value:${item}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:40.999230" elapsed="0.002588"/>
</kw>
<var name="${item}">21760</var>
<status status="PASS" start="2024-12-20T09:39:40.998726" elapsed="0.003425"/>
</iter>
<iter>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:41.004121" level="INFO">Modbus register value:21760</msg>
<arg>Modbus register value:${item}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:41.003265" elapsed="0.001137"/>
</kw>
<var name="${item}">21760</var>
<status status="PASS" start="2024-12-20T09:39:41.002722" elapsed="0.001904"/>
</iter>
<iter>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:41.006426" level="INFO">Modbus register value:12345</msg>
<arg>Modbus register value:${item}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:41.005624" elapsed="0.001073"/>
</kw>
<var name="${item}">12345</var>
<status status="PASS" start="2024-12-20T09:39:41.005128" elapsed="0.001845"/>
</iter>
<var>${item}</var>
<value>@{vallist}</value>
<status status="PASS" start="2024-12-20T09:39:40.998002" elapsed="0.009154"/>
</for>
<kw name="Get Length" owner="BuiltIn">
<msg time="2024-12-20T09:39:41.008556" level="INFO">Length is 3.</msg>
<msg time="2024-12-20T09:39:41.008989" level="INFO">${length} = 3</msg>
<var>${length}</var>
<arg>${vallist}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<status status="PASS" start="2024-12-20T09:39:41.007794" elapsed="0.001322"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:41.010846" level="INFO">Items count is: 3</msg>
<arg>Items count is: ${length}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:41.009995" elapsed="0.001124"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:39:41.012716" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${length}</arg>
<arg>${quantity}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:41.011751" elapsed="0.001296"/>
</kw>
<status status="PASS" start="2024-12-20T09:39:40.987246" elapsed="0.026038"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<arg>"Exception is evaluated correctly ${exception} == ${exception_expected}"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:39:41.014022" elapsed="0.000112"/>
</kw>
<status status="NOT RUN" start="2024-12-20T09:39:41.013444" elapsed="0.000893"/>
</branch>
<status status="PASS" start="2024-12-20T09:39:40.987139" elapsed="0.027324"/>
</if>
<arg>0x01</arg>
<arg>0x0002</arg>
<arg>3</arg>
<arg>0</arg>
<status status="PASS" start="2024-12-20T09:39:38.638383" elapsed="2.376391"/>
</kw>
<doc>Test reading holding registers from different addresses with different quantities</doc>
<tag>multi_dut_modbus_generic</tag>
<status status="PASS" start="2024-12-20T09:39:35.953886" elapsed="5.061558"/>
</test>
<test id="s1-t2" name="Test Write Holding Registers With Different Addresses And Quantities" line="20">
<kw name="Write Holding Registers" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:41.024404" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:39:41.023635" elapsed="0.000923"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:41.026017" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:41.025192" elapsed="0.001099"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:41.028263" level="INFO">Write Hold Registers with parameters UID:0x01, offs:0x0003, quantity:2, data:[0x1122, 0x3344]</msg>
<arg>Write Hold Registers with parameters UID:${uid}, offs:${start_addr}, quantity:${quantity}, data:${data}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:41.026969" elapsed="0.001575"/>
</kw>
<kw name="Create Holding Write Registers Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:41.032907" level="INFO">Packet created: ModbusADU_Request / ModbusPDU10_Write_Multiple_Registers</msg>
<msg time="2024-12-20T09:39:41.033285" level="INFO">${packet} = ModbusADU_Request / ModbusPDU10_Write_Multiple_Registers</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0)/ModbusPDU10_Write_Multiple_Registers(funcCode=${FUNC_WRITE_HOLDING_REGISTERS}, startAddr=${startAddr}, quantityRegisters=${quantity}, outputsValue=${data})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:39:41.030991" elapsed="0.002393"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:41.034564" level="INFO">Packet: ModbusADU_Request / ModbusPDU10_Write_Multiple_Registers</msg>
<arg>Packet: ${packet}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:41.033894" elapsed="0.000870"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:39:41.034975" elapsed="0.000122"/>
</return>
<msg time="2024-12-20T09:39:41.035672" level="INFO">${req} = ModbusADU_Request / ModbusPDU10_Write_Multiple_Registers</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${quantity}</arg>
<arg>${data}</arg>
<status status="PASS" start="2024-12-20T09:39:41.029312" elapsed="0.006458"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:43.302364" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0x3
  protoId   = 0x0
  len       = None
  unitId    = 0x1
###[ Write Multiple Registers ]###
     funcCode  = 0x10
     startAddr = 0x3
     quantityRegisters= 2
     byteCount = None
     outputsValue= [0x1122, 0x3344]

Packet get: ###[ ModbusADU Response ]###
  transId   = 0x3
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Write Multiple Registers Answer ]###
     funcCode  = 0x10
     startAddr = 0x3
     quantityRegisters= 0x2

Answer bin: b'\x00\x03\x00\x00\x00\x06\x01\x10\x00\x03\x00\x02'
Answer hex: 000300000006011000030002</msg>
<msg time="2024-12-20T09:39:43.302938" level="INFO">${response} = </msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:41.037686" elapsed="2.265406"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:43.304787" level="INFO">Got response </msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:43.303879" elapsed="0.001196"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:39:43.305368" elapsed="0.000170"/>
</return>
<msg time="2024-12-20T09:39:43.306335" level="INFO">${response_frame} = </msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:39:41.036453" elapsed="2.270031"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:39:43.308022" level="INFO">Length is 12.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:39:43.307189" elapsed="0.001107"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:43.311176" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0x3
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Write Multiple Registers Answer ]###
     funcCode  = 0x10
     startAddr = 0x3
     quantityRegisters= 0x2

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU10_Write_Multiple_Registers_Answer, b'\x00\x03\x00\x00\x00\x06\x01\x10\x00\x03\x00\x02'
PDU: ModbusADU_Response / ModbusPDU10_Write_Multiple_Registers_Answer</msg>
<msg time="2024-12-20T09:39:43.311708" level="INFO">${packet} = ModbusADU_Response / ModbusPDU10_Write_Multiple_Registers_Answer</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:43.308941" elapsed="0.002908"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:43.312530" elapsed="0.005916"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:39:43.320018" level="INFO">Length is 12.</msg>
<arg>${packet}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:39:43.319162" elapsed="0.001358"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:43.325074" level="INFO">Response is: ###[ ModbusADU Response ]###
  transId   = 0x3
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Write Multiple Registers Answer ]###
     funcCode  = 0x10
     startAddr = 0x3
     quantityRegisters= 0x2
</msg>
<arg>Response is: ${packet.show(dump=True)}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:43.321204" elapsed="0.004169"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:43.329269" level="INFO">PDU is ModbusADU_Response, funcCode: 16
func code: &lt;class 'int'&gt; 16
MB exception: 0, Undefined</msg>
<msg time="2024-12-20T09:39:43.329776" level="INFO">${exception} = 0</msg>
<msg time="2024-12-20T09:39:43.330019" level="INFO">${exp_message} = Undefined</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:43.326075" elapsed="0.004072"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:43.332047" level="INFO">exception: (0: Undefined), expected: 0</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:43.330879" elapsed="0.001444"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:39:43.333926" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:43.332944" elapsed="0.001310"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:39:43.342772" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${${packet.quantityRegisters}}</arg>
<arg>${quantity}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:43.338083" elapsed="0.005036"/>
</kw>
<arg>${exception} == ${0}</arg>
<arg>Should Be Equal As Integers</arg>
<arg>${${packet.quantityRegisters}}</arg>
<arg>${quantity}</arg>
<arg>ELSE</arg>
<arg>Log</arg>
<arg>"Exception is evaluated correctly ${exception} == ${exception_expected}"</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2024-12-20T09:39:43.334957" elapsed="0.008511"/>
</kw>
<arg>0x01</arg>
<arg>0x0003</arg>
<arg>2</arg>
<arg>[0x1122, 0x3344]</arg>
<arg>0</arg>
<status status="PASS" start="2024-12-20T09:39:41.021633" elapsed="2.322288"/>
</kw>
<kw name="Write Holding Registers" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:43.347953" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:39:43.347190" elapsed="0.000916"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:43.349519" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:43.348723" elapsed="0.001059"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:43.351611" level="INFO">Write Hold Registers with parameters UID:0x01, offs:0x0004, quantity:3, data:[0x1122, 0x3344, 0x5566]</msg>
<arg>Write Hold Registers with parameters UID:${uid}, offs:${start_addr}, quantity:${quantity}, data:${data}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:43.350396" elapsed="0.001479"/>
</kw>
<kw name="Create Holding Write Registers Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:43.357698" level="INFO">Packet created: ModbusADU_Request / ModbusPDU10_Write_Multiple_Registers</msg>
<msg time="2024-12-20T09:39:43.358220" level="INFO">${packet} = ModbusADU_Request / ModbusPDU10_Write_Multiple_Registers</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0)/ModbusPDU10_Write_Multiple_Registers(funcCode=${FUNC_WRITE_HOLDING_REGISTERS}, startAddr=${startAddr}, quantityRegisters=${quantity}, outputsValue=${data})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:39:43.355098" elapsed="0.003261"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:43.359932" level="INFO">Packet: ModbusADU_Request / ModbusPDU10_Write_Multiple_Registers</msg>
<arg>Packet: ${packet}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:43.359049" elapsed="0.001160"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:39:43.360496" elapsed="0.000161"/>
</return>
<msg time="2024-12-20T09:39:43.361457" level="INFO">${req} = ModbusADU_Request / ModbusPDU10_Write_Multiple_Registers</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${quantity}</arg>
<arg>${data}</arg>
<status status="PASS" start="2024-12-20T09:39:43.352749" elapsed="0.008851"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:45.662363" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0x4
  protoId   = 0x0
  len       = None
  unitId    = 0x1
###[ Write Multiple Registers ]###
     funcCode  = 0x10
     startAddr = 0x4
     quantityRegisters= 3
     byteCount = None
     outputsValue= [0x1122, 0x3344, 0x5566]

Packet get: ###[ ModbusADU Response ]###
  transId   = 0x4
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Write Multiple Registers Answer ]###
     funcCode  = 0x10
     startAddr = 0x4
     quantityRegisters= 0x3

Answer bin: b'\x00\x04\x00\x00\x00\x06\x01\x10\x00\x04\x00\x03'
Answer hex: 000400000006011000040003</msg>
<msg time="2024-12-20T09:39:45.662957" level="INFO">${response} = </msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:43.364190" elapsed="2.298923"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:45.664821" level="INFO">Got response </msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:45.663916" elapsed="0.001196"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:39:45.665405" elapsed="0.000173"/>
</return>
<msg time="2024-12-20T09:39:45.666363" level="INFO">${response_frame} = </msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:39:43.362545" elapsed="2.303966"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:39:45.668037" level="INFO">Length is 12.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:39:45.667206" elapsed="0.001336"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:45.671483" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0x4
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Write Multiple Registers Answer ]###
     funcCode  = 0x10
     startAddr = 0x4
     quantityRegisters= 0x3

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU10_Write_Multiple_Registers_Answer, b'\x00\x04\x00\x00\x00\x06\x01\x10\x00\x04\x00\x03'
PDU: ModbusADU_Response / ModbusPDU10_Write_Multiple_Registers_Answer</msg>
<msg time="2024-12-20T09:39:45.672033" level="INFO">${packet} = ModbusADU_Response / ModbusPDU10_Write_Multiple_Registers_Answer</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:45.669230" elapsed="0.002946"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:45.672874" elapsed="0.005424"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:39:45.679879" level="INFO">Length is 12.</msg>
<arg>${packet}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:39:45.679016" elapsed="0.001142"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:45.685033" level="INFO">Response is: ###[ ModbusADU Response ]###
  transId   = 0x4
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Write Multiple Registers Answer ]###
     funcCode  = 0x10
     startAddr = 0x4
     quantityRegisters= 0x3
</msg>
<arg>Response is: ${packet.show(dump=True)}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:45.681179" elapsed="0.004154"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:45.689220" level="INFO">PDU is ModbusADU_Response, funcCode: 16
func code: &lt;class 'int'&gt; 16
MB exception: 0, Undefined</msg>
<msg time="2024-12-20T09:39:45.689737" level="INFO">${exception} = 0</msg>
<msg time="2024-12-20T09:39:45.689981" level="INFO">${exp_message} = Undefined</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:45.686039" elapsed="0.004072"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:45.692015" level="INFO">exception: (0: Undefined), expected: 0</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:45.690852" elapsed="0.001437"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:39:45.693900" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:45.692926" elapsed="0.001297"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:39:45.702641" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${${packet.quantityRegisters}}</arg>
<arg>${quantity}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:45.698000" elapsed="0.004991"/>
</kw>
<arg>${exception} == ${0}</arg>
<arg>Should Be Equal As Integers</arg>
<arg>${${packet.quantityRegisters}}</arg>
<arg>${quantity}</arg>
<arg>ELSE</arg>
<arg>Log</arg>
<arg>"Exception is evaluated correctly ${exception} == ${exception_expected}"</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2024-12-20T09:39:45.694918" elapsed="0.008417"/>
</kw>
<arg>0x01</arg>
<arg>0x0004</arg>
<arg>3</arg>
<arg>[0x1122, 0x3344, 0x5566]</arg>
<arg>0</arg>
<status status="PASS" start="2024-12-20T09:39:43.345198" elapsed="2.358596"/>
</kw>
<doc>Test write holding registers for different addresses with different quantities</doc>
<tag>multi_dut_modbus_generic</tag>
<status status="PASS" start="2024-12-20T09:39:41.017674" elapsed="4.686790"/>
</test>
<test id="s1-t3" name="Test Read Input Registers With Different Addresses And Quantities" line="26">
<kw name="Read Input Registers" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:45.713448" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:39:45.712647" elapsed="0.000955"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:45.715063" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:45.714238" elapsed="0.001095"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:45.717136" level="INFO">Read Input Registers with parameters UID:0x01, offs:0x0003, quantity:2</msg>
<arg>Read Input Registers with parameters UID:${uid}, offs:${start_addr}, quantity:${quantity}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:45.715964" elapsed="0.001486"/>
</kw>
<kw name="Create Input Read Registers Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:45.723897" level="INFO">Packet created: ModbusADU_Request / ModbusPDU04_Read_Input_Registers</msg>
<msg time="2024-12-20T09:39:45.724435" level="INFO">${packet} = ModbusADU_Request / ModbusPDU04_Read_Input_Registers</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0, len=6)/ModbusPDU04_Read_Input_Registers(funcCode=${FUNC_READ_INPUT_REGISTERS}, startAddr=${startAddr}, quantity=${quantity})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:39:45.720491" elapsed="0.004084"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:39:45.724918" elapsed="0.000175"/>
</return>
<msg time="2024-12-20T09:39:45.725901" level="INFO">${req} = ModbusADU_Request / ModbusPDU04_Read_Input_Registers</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${quantity}</arg>
<status status="PASS" start="2024-12-20T09:39:45.718328" elapsed="0.007718"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:48.022254" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0x5
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Read Input Registers ]###
     funcCode  = 0x4
     startAddr = 0x3
     quantity  = 0x2

Packet get: ###[ ModbusADU Response ]###
  transId   = 0x5
  protoId   = 0x0
  len       = 0x7
  unitId    = 0x1
###[ Read Input Registers Response ]###
     funcCode  = 0x4
     byteCount = 4
     registerVal= [16405, 55050]

Answer bin: b'\x00\x05\x00\x00\x00\x07\x01\x04\x04@\x15\xd7\n'
Answer hex: 0005000000070104044015d70a</msg>
<msg time="2024-12-20T09:39:48.023081" level="INFO">${response} = @\xd7
</msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:45.728749" elapsed="2.294500"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:48.025013" level="INFO">Got response @\xd7
</msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:48.024058" elapsed="0.001252"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:39:48.025617" elapsed="0.000178"/>
</return>
<msg time="2024-12-20T09:39:48.026629" level="INFO">${response_frame} = @\xd7
</msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:39:45.727040" elapsed="2.299742"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:39:48.028319" level="INFO">Length is 13.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:39:48.027487" elapsed="0.001113"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:48.031533" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0x5
  protoId   = 0x0
  len       = 0x7
  unitId    = 0x1
###[ Read Input Registers Response ]###
     funcCode  = 0x4
     byteCount = 4
     registerVal= [16405, 55050]

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU04_Read_Input_Registers_Answer, b'\x00\x05\x00\x00\x00\x07\x01\x04\x04@\x15\xd7\n'
PDU: ModbusADU_Response / ModbusPDU04_Read_Input_Registers_Answer</msg>
<msg time="2024-12-20T09:39:48.032078" level="INFO">${packet} = ModbusADU_Response / ModbusPDU04_Read_Input_Registers_Answer</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:48.029246" elapsed="0.002973"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:48.032904" elapsed="0.005378"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:48.042114" level="INFO">PDU is ModbusADU_Response, funcCode: 4
func code: &lt;class 'int'&gt; 4
MB exception: 0, Undefined</msg>
<msg time="2024-12-20T09:39:48.042618" level="INFO">${exception} = 0</msg>
<msg time="2024-12-20T09:39:48.042857" level="INFO">${exp_message} = Undefined</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:48.039031" elapsed="0.003955"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:39:48.044716" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:48.043708" elapsed="0.001339"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:48.046920" level="INFO">exception: (0: Undefined), expected: 0</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:48.045707" elapsed="0.002450"/>
</kw>
<if>
<branch type="IF" condition="${exception} == ${0}">
<kw name="Convert To List" owner="Collections">
<msg time="2024-12-20T09:39:48.054650" level="INFO">${vallist} = [16405, 55050]</msg>
<var>${vallist}</var>
<arg>${packet.registerVal}</arg>
<doc>Converts the given ``item`` to a Python ``list`` type.</doc>
<status status="PASS" start="2024-12-20T09:39:48.051442" elapsed="0.003366"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:39:48.056289" level="INFO">Length is 2.</msg>
<arg>${vallist}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:39:48.055491" elapsed="0.001067"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:48.058128" level="INFO">Modbus register values:[16405, 55050]</msg>
<arg>Modbus register values:${vallist}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:48.057253" elapsed="0.001146"/>
</kw>
<for flavor="IN">
<iter>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:48.060755" level="INFO">Modbus register value:16405</msg>
<arg>Modbus register value:${item}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:48.059961" elapsed="0.001063"/>
</kw>
<var name="${item}">16405</var>
<status status="PASS" start="2024-12-20T09:39:48.059448" elapsed="0.001798"/>
</iter>
<iter>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:48.063965" level="INFO">Modbus register value:55050</msg>
<arg>Modbus register value:${item}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:48.062242" elapsed="0.002015"/>
</kw>
<var name="${item}">55050</var>
<status status="PASS" start="2024-12-20T09:39:48.061745" elapsed="0.002742"/>
</iter>
<var>${item}</var>
<value>@{vallist}</value>
<status status="PASS" start="2024-12-20T09:39:48.058723" elapsed="0.005942"/>
</for>
<kw name="Get Length" owner="BuiltIn">
<msg time="2024-12-20T09:39:48.066072" level="INFO">Length is 2.</msg>
<msg time="2024-12-20T09:39:48.066511" level="INFO">${length} = 2</msg>
<var>${length}</var>
<arg>${vallist}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<status status="PASS" start="2024-12-20T09:39:48.065312" elapsed="0.001330"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:48.068152" level="INFO">Items count is: 2</msg>
<arg>Items count is: ${length}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:48.067341" elapsed="0.001080"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:39:48.070003" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${length}</arg>
<arg>${quantity}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:48.069048" elapsed="0.001279"/>
</kw>
<status status="PASS" start="2024-12-20T09:39:48.048720" elapsed="0.021845"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<arg>"Exception is evaluated correctly (${exception}: ${exp_message}) == ${exception_expected}"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:39:48.071308" elapsed="0.000114"/>
</kw>
<status status="NOT RUN" start="2024-12-20T09:39:48.070727" elapsed="0.000897"/>
</branch>
<status status="PASS" start="2024-12-20T09:39:48.048604" elapsed="0.023147"/>
</if>
<arg>0x01</arg>
<arg>0x0003</arg>
<arg>2</arg>
<arg>0</arg>
<status status="PASS" start="2024-12-20T09:39:45.710741" elapsed="2.361322"/>
</kw>
<kw name="Read Input Registers" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:48.076747" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:39:48.076021" elapsed="0.000870"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:48.077974" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:48.077362" elapsed="0.000804"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:48.079396" level="INFO">Read Input Registers with parameters UID:0x01, offs:0x0004, quantity:3</msg>
<arg>Read Input Registers with parameters UID:${uid}, offs:${start_addr}, quantity:${quantity}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:48.078618" elapsed="0.000972"/>
</kw>
<kw name="Create Input Read Registers Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:48.083428" level="INFO">Packet created: ModbusADU_Request / ModbusPDU04_Read_Input_Registers</msg>
<msg time="2024-12-20T09:39:48.083800" level="INFO">${packet} = ModbusADU_Request / ModbusPDU04_Read_Input_Registers</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0, len=6)/ModbusPDU04_Read_Input_Registers(funcCode=${FUNC_READ_INPUT_REGISTERS}, startAddr=${startAddr}, quantity=${quantity})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:39:48.081738" elapsed="0.002159"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:39:48.084135" elapsed="0.000126"/>
</return>
<msg time="2024-12-20T09:39:48.084831" level="INFO">${req} = ModbusADU_Request / ModbusPDU04_Read_Input_Registers</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${quantity}</arg>
<status status="PASS" start="2024-12-20T09:39:48.080220" elapsed="0.004709"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:50.382420" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0x6
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Read Input Registers ]###
     funcCode  = 0x4
     startAddr = 0x4
     quantity  = 0x3

Packet get: ###[ ModbusADU Response ]###
  transId   = 0x6
  protoId   = 0x0
  len       = 0x9
  unitId    = 0x1
###[ Read Input Registers Response ]###
     funcCode  = 0x4
     byteCount = 6
     registerVal= [55050, 16483, 62915]

Answer bin: b'\x00\x06\x00\x00\x00\t\x01\x04\x06\xd7\n@c\xf5\xc3'
Answer hex: 000600000009010406d70a4063f5c3</msg>
<msg time="2024-12-20T09:39:50.383036" level="INFO">${response} = 	\xd7
@c\xf5\xc3</msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:48.086833" elapsed="2.296360"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:50.384916" level="INFO">Got response 	\xd7
@c\xf5\xc3</msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:50.383983" elapsed="0.001217"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:39:50.385492" elapsed="0.000172"/>
</return>
<msg time="2024-12-20T09:39:50.386480" level="INFO">${response_frame} = 	\xd7
@c\xf5\xc3</msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:39:48.085604" elapsed="2.301024"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:39:50.388142" level="INFO">Length is 15.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:39:50.387325" elapsed="0.001097"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:50.392246" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0x6
  protoId   = 0x0
  len       = 0x9
  unitId    = 0x1
###[ Read Input Registers Response ]###
     funcCode  = 0x4
     byteCount = 6
     registerVal= [55050, 16483, 62915]

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU04_Read_Input_Registers_Answer, b'\x00\x06\x00\x00\x00\t\x01\x04\x06\xd7\n@c\xf5\xc3'
PDU: ModbusADU_Response / ModbusPDU04_Read_Input_Registers_Answer</msg>
<msg time="2024-12-20T09:39:50.392798" level="INFO">${packet} = ModbusADU_Response / ModbusPDU04_Read_Input_Registers_Answer</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:50.389061" elapsed="0.003880"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:50.393652" elapsed="0.005312"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:50.402791" level="INFO">PDU is ModbusADU_Response, funcCode: 4
func code: &lt;class 'int'&gt; 4
MB exception: 0, Undefined</msg>
<msg time="2024-12-20T09:39:50.403301" level="INFO">${exception} = 0</msg>
<msg time="2024-12-20T09:39:50.403543" level="INFO">${exp_message} = Undefined</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:50.399703" elapsed="0.003967"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:39:50.405388" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:50.404380" elapsed="0.001335"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:50.407563" level="INFO">exception: (0: Undefined), expected: 0</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:50.406372" elapsed="0.001465"/>
</kw>
<if>
<branch type="IF" condition="${exception} == ${0}">
<kw name="Convert To List" owner="Collections">
<msg time="2024-12-20T09:39:50.414115" level="INFO">${vallist} = [55050, 16483, 62915]</msg>
<var>${vallist}</var>
<arg>${packet.registerVal}</arg>
<doc>Converts the given ``item`` to a Python ``list`` type.</doc>
<status status="PASS" start="2024-12-20T09:39:50.410915" elapsed="0.003359"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:39:50.415738" level="INFO">Length is 3.</msg>
<arg>${vallist}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:39:50.414950" elapsed="0.001060"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:50.417789" level="INFO">Modbus register values:[55050, 16483, 62915]</msg>
<arg>Modbus register values:${vallist}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:50.416922" elapsed="0.001141"/>
</kw>
<for flavor="IN">
<iter>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:50.420409" level="INFO">Modbus register value:55050</msg>
<arg>Modbus register value:${item}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:50.419619" elapsed="0.001057"/>
</kw>
<var name="${item}">55050</var>
<status status="PASS" start="2024-12-20T09:39:50.419110" elapsed="0.001782"/>
</iter>
<iter>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:50.422653" level="INFO">Modbus register value:16483</msg>
<arg>Modbus register value:${item}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:50.421876" elapsed="0.001045"/>
</kw>
<var name="${item}">16483</var>
<status status="PASS" start="2024-12-20T09:39:50.421382" elapsed="0.001753"/>
</iter>
<iter>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:50.424880" level="INFO">Modbus register value:62915</msg>
<arg>Modbus register value:${item}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:50.424104" elapsed="0.001040"/>
</kw>
<var name="${item}">62915</var>
<status status="PASS" start="2024-12-20T09:39:50.423620" elapsed="0.001751"/>
</iter>
<var>${item}</var>
<value>@{vallist}</value>
<status status="PASS" start="2024-12-20T09:39:50.418384" elapsed="0.007161"/>
</for>
<kw name="Get Length" owner="BuiltIn">
<msg time="2024-12-20T09:39:50.426942" level="INFO">Length is 3.</msg>
<msg time="2024-12-20T09:39:50.427385" level="INFO">${length} = 3</msg>
<var>${length}</var>
<arg>${vallist}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<status status="PASS" start="2024-12-20T09:39:50.426169" elapsed="0.001348"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:50.428961" level="INFO">Items count is: 3</msg>
<arg>Items count is: ${length}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:50.428172" elapsed="0.001053"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:39:50.430768" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${length}</arg>
<arg>${quantity}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:50.429831" elapsed="0.001257"/>
</kw>
<status status="PASS" start="2024-12-20T09:39:50.408263" elapsed="0.023057"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<arg>"Exception is evaluated correctly (${exception}: ${exp_message}) == ${exception_expected}"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:39:50.432049" elapsed="0.000115"/>
</kw>
<status status="NOT RUN" start="2024-12-20T09:39:50.431479" elapsed="0.000894"/>
</branch>
<status status="PASS" start="2024-12-20T09:39:50.408157" elapsed="0.024342"/>
</if>
<arg>0x01</arg>
<arg>0x0004</arg>
<arg>3</arg>
<arg>0</arg>
<status status="PASS" start="2024-12-20T09:39:48.073850" elapsed="2.358962"/>
</kw>
<kw name="Read Input Registers" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:50.437207" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:39:50.436413" elapsed="0.000946"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:50.438786" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:50.437984" elapsed="0.001069"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:50.440764" level="INFO">Read Input Registers with parameters UID:0x01, offs:0x0001, quantity:200</msg>
<arg>Read Input Registers with parameters UID:${uid}, offs:${start_addr}, quantity:${quantity}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:50.439675" elapsed="0.001357"/>
</kw>
<kw name="Create Input Read Registers Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:50.446429" level="INFO">Packet created: ModbusADU_Request / ModbusPDU04_Read_Input_Registers</msg>
<msg time="2024-12-20T09:39:50.446993" level="INFO">${packet} = ModbusADU_Request / ModbusPDU04_Read_Input_Registers</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0, len=6)/ModbusPDU04_Read_Input_Registers(funcCode=${FUNC_READ_INPUT_REGISTERS}, startAddr=${startAddr}, quantity=${quantity})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:39:50.444053" elapsed="0.003087"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:39:50.447479" elapsed="0.000170"/>
</return>
<msg time="2024-12-20T09:39:50.448443" level="INFO">${req} = ModbusADU_Request / ModbusPDU04_Read_Input_Registers</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${quantity}</arg>
<status status="PASS" start="2024-12-20T09:39:50.441911" elapsed="0.006676"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:52.780772" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0x7
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Read Input Registers ]###
     funcCode  = 0x4
     startAddr = 0x1
     quantity  = 0xc8

Packet get: ###[ ModbusADU Response ]###
  transId   = 0x7
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Input Registers Exception ]###
     funcCode  = 0x84
     exceptCode= Illegal data value

Answer bin: b'\x00\x07\x00\x00\x00\x03\x01\x84\x03'
Answer hex: 000700000003018403</msg>
<msg time="2024-12-20T09:39:52.781227" level="INFO">${response} = \x84</msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:50.451172" elapsed="2.330162"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:52.782585" level="INFO">Got response \x84</msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:52.781899" elapsed="0.000892"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:39:52.783008" elapsed="0.000125"/>
</return>
<msg time="2024-12-20T09:39:52.783713" level="INFO">${response_frame} = \x84</msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:39:50.449518" elapsed="2.334299"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:39:52.784853" level="INFO">Length is 9.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:39:52.784270" elapsed="0.000773"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:52.787078" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0x7
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Input Registers Exception ]###
     funcCode  = 0x84
     exceptCode= Illegal data value

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU04_Read_Input_Registers_Exception, b'\x00\x07\x00\x00\x00\x03\x01\x84\x03'
PDU: ModbusADU_Response / ModbusPDU04_Read_Input_Registers_Exception</msg>
<msg time="2024-12-20T09:39:52.787661" level="INFO">${packet} = ModbusADU_Response / ModbusPDU04_Read_Input_Registers_Exception</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:52.785496" elapsed="0.002267"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:52.788273" elapsed="0.003622"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:52.794621" level="INFO">PDU is ModbusADU_Response, funcCode: 132
func code: &lt;class 'int'&gt; 132
MB exception: 3, Illegal data value</msg>
<msg time="2024-12-20T09:39:52.794981" level="INFO">${exception} = 3</msg>
<msg time="2024-12-20T09:39:52.795142" level="INFO">${exp_message} = Illegal data value</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:52.792428" elapsed="0.002801"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:39:52.796464" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:52.795748" elapsed="0.000950"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:52.798012" level="INFO">exception: (3: Illegal data value), expected: 3</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:52.797204" elapsed="0.000997"/>
</kw>
<if>
<branch type="IF" condition="${exception} == ${0}">
<kw name="Convert To List" owner="Collections">
<var>${vallist}</var>
<arg>${packet.registerVal}</arg>
<doc>Converts the given ``item`` to a Python ``list`` type.</doc>
<status status="NOT RUN" start="2024-12-20T09:39:52.800376" elapsed="0.000087"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<arg>${vallist}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="NOT RUN" start="2024-12-20T09:39:52.800866" elapsed="0.000076"/>
</kw>
<kw name="Log" owner="BuiltIn">
<arg>Modbus register values:${vallist}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:39:52.801308" elapsed="0.000075"/>
</kw>
<for flavor="IN">
<iter>
<kw name="Log" owner="BuiltIn">
<arg>Modbus register value:${item}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:39:52.802102" elapsed="0.000078"/>
</kw>
<var name="${item}"/>
<status status="NOT RUN" start="2024-12-20T09:39:52.801790" elapsed="0.000528"/>
</iter>
<var>${item}</var>
<value>@{vallist}</value>
<status status="NOT RUN" start="2024-12-20T09:39:52.801576" elapsed="0.000845"/>
</for>
<kw name="Get Length" owner="BuiltIn">
<var>${length}</var>
<arg>${vallist}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<status status="NOT RUN" start="2024-12-20T09:39:52.802801" elapsed="0.000076"/>
</kw>
<kw name="Log" owner="BuiltIn">
<arg>Items count is: ${length}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:39:52.803247" elapsed="0.000072"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${length}</arg>
<arg>${quantity}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="NOT RUN" start="2024-12-20T09:39:52.803663" elapsed="0.000071"/>
</kw>
<status status="NOT RUN" start="2024-12-20T09:39:52.798535" elapsed="0.005336"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:52.805505" level="INFO">"Exception is evaluated correctly (3: Illegal data value) == 3"</msg>
<arg>"Exception is evaluated correctly (${exception}: ${exp_message}) == ${exception_expected}"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:52.804308" elapsed="0.001392"/>
</kw>
<status status="PASS" start="2024-12-20T09:39:52.803973" elapsed="0.001888"/>
</branch>
<status status="PASS" start="2024-12-20T09:39:52.798458" elapsed="0.007494"/>
</if>
<arg>0x01</arg>
<arg>0x0001</arg>
<arg>200</arg>
<arg>3</arg>
<status status="PASS" start="2024-12-20T09:39:50.434583" elapsed="2.371584"/>
</kw>
<kw name="Read Input Registers" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:52.809368" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:39:52.808784" elapsed="0.000693"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:52.810541" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:52.809936" elapsed="0.000876"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:52.812544" level="INFO">Read Input Registers with parameters UID:0x01, offs:0x2344, quantity:3</msg>
<arg>Read Input Registers with parameters UID:${uid}, offs:${start_addr}, quantity:${quantity}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:52.811449" elapsed="0.001363"/>
</kw>
<kw name="Create Input Read Registers Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:52.818168" level="INFO">Packet created: ModbusADU_Request / ModbusPDU04_Read_Input_Registers</msg>
<msg time="2024-12-20T09:39:52.818673" level="INFO">${packet} = ModbusADU_Request / ModbusPDU04_Read_Input_Registers</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0, len=6)/ModbusPDU04_Read_Input_Registers(funcCode=${FUNC_READ_INPUT_REGISTERS}, startAddr=${startAddr}, quantity=${quantity})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:39:52.815769" elapsed="0.003040"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:39:52.819137" elapsed="0.000166"/>
</return>
<msg time="2024-12-20T09:39:52.820084" level="INFO">${req} = ModbusADU_Request / ModbusPDU04_Read_Input_Registers</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${quantity}</arg>
<status status="PASS" start="2024-12-20T09:39:52.813666" elapsed="0.006562"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:55.100640" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0x8
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Read Input Registers ]###
     funcCode  = 0x4
     startAddr = 0x2344
     quantity  = 0x3

Packet get: ###[ ModbusADU Response ]###
  transId   = 0x8
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Input Registers Exception ]###
     funcCode  = 0x84
     exceptCode= Illegal data address

Answer bin: b'\x00\x08\x00\x00\x00\x03\x01\x84\x02'
Answer hex: 000800000003018402</msg>
<msg time="2024-12-20T09:39:55.101243" level="INFO">${response} = \x84</msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:52.822800" elapsed="2.278556"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:55.102624" level="INFO">Got response \x84</msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:55.101928" elapsed="0.000900"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:39:55.103036" elapsed="0.000148"/>
</return>
<msg time="2024-12-20T09:39:55.103773" level="INFO">${response_frame} = \x84</msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:39:52.821157" elapsed="2.282718"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:39:55.104926" level="INFO">Length is 9.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:39:55.104336" elapsed="0.000780"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:55.107162" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0x8
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Input Registers Exception ]###
     funcCode  = 0x84
     exceptCode= Illegal data address

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU04_Read_Input_Registers_Exception, b'\x00\x08\x00\x00\x00\x03\x01\x84\x02'
PDU: ModbusADU_Response / ModbusPDU04_Read_Input_Registers_Exception</msg>
<msg time="2024-12-20T09:39:55.107556" level="INFO">${packet} = ModbusADU_Response / ModbusPDU04_Read_Input_Registers_Exception</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:55.105577" elapsed="0.002076"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:55.108183" elapsed="0.003692"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:55.114624" level="INFO">PDU is ModbusADU_Response, funcCode: 132
func code: &lt;class 'int'&gt; 132
MB exception: 2, Illegal data address</msg>
<msg time="2024-12-20T09:39:55.114988" level="INFO">${exception} = 2</msg>
<msg time="2024-12-20T09:39:55.115149" level="INFO">${exp_message} = Illegal data address</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:55.112418" elapsed="0.002819"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:39:55.116491" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:55.115758" elapsed="0.000971"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:55.118061" level="INFO">exception: (2: Illegal data address), expected: 2</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:55.117242" elapsed="0.001013"/>
</kw>
<if>
<branch type="IF" condition="${exception} == ${0}">
<kw name="Convert To List" owner="Collections">
<var>${vallist}</var>
<arg>${packet.registerVal}</arg>
<doc>Converts the given ``item`` to a Python ``list`` type.</doc>
<status status="NOT RUN" start="2024-12-20T09:39:55.120412" elapsed="0.000091"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<arg>${vallist}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="NOT RUN" start="2024-12-20T09:39:55.120913" elapsed="0.000075"/>
</kw>
<kw name="Log" owner="BuiltIn">
<arg>Modbus register values:${vallist}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:39:55.121348" elapsed="0.000071"/>
</kw>
<for flavor="IN">
<iter>
<kw name="Log" owner="BuiltIn">
<arg>Modbus register value:${item}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:39:55.122134" elapsed="0.000077"/>
</kw>
<var name="${item}"/>
<status status="NOT RUN" start="2024-12-20T09:39:55.121825" elapsed="0.000522"/>
</iter>
<var>${item}</var>
<value>@{vallist}</value>
<status status="NOT RUN" start="2024-12-20T09:39:55.121612" elapsed="0.000838"/>
</for>
<kw name="Get Length" owner="BuiltIn">
<var>${length}</var>
<arg>${vallist}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<status status="NOT RUN" start="2024-12-20T09:39:55.122828" elapsed="0.000074"/>
</kw>
<kw name="Log" owner="BuiltIn">
<arg>Items count is: ${length}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:39:55.123277" elapsed="0.000073"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${length}</arg>
<arg>${quantity}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="NOT RUN" start="2024-12-20T09:39:55.123696" elapsed="0.000072"/>
</kw>
<status status="NOT RUN" start="2024-12-20T09:39:55.118562" elapsed="0.005346"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:55.125546" level="INFO">"Exception is evaluated correctly (2: Illegal data address) == 2"</msg>
<arg>"Exception is evaluated correctly (${exception}: ${exp_message}) == ${exception_expected}"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:55.124346" elapsed="0.001399"/>
</kw>
<status status="PASS" start="2024-12-20T09:39:55.124012" elapsed="0.001889"/>
</branch>
<status status="PASS" start="2024-12-20T09:39:55.118486" elapsed="0.007508"/>
</if>
<arg>0x01</arg>
<arg>0x2344</arg>
<arg>3</arg>
<arg>2</arg>
<status status="PASS" start="2024-12-20T09:39:52.807456" elapsed="2.318756"/>
</kw>
<doc>Test read input registers for different addresses with different quantities</doc>
<tag>multi_dut_modbus_generic</tag>
<status status="PASS" start="2024-12-20T09:39:45.706351" elapsed="9.420321"/>
</test>
<test id="s1-t4" name="Test Write Single Holding Register" line="34">
<kw name="Write Single Holding Register" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:55.131879" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:39:55.131319" elapsed="0.000669"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:55.133033" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:55.132436" elapsed="0.000787"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:55.134606" level="INFO">Write Single Holding Register with parameters UID:0x01, offs:0x0001</msg>
<arg>Write Single Holding Register with parameters UID:${uid}, offs:${start_addr}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:55.133870" elapsed="0.000934"/>
</kw>
<kw name="Create Holding Write Register Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:55.139475" level="INFO">Packet created: ModbusADU_Request / ModbusPDU06_Write_Single_Register</msg>
<msg time="2024-12-20T09:39:55.139850" level="INFO">${packet} = ModbusADU_Request / ModbusPDU06_Write_Single_Register</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0)/ModbusPDU06_Write_Single_Register(funcCode=${FUNC_WRITE_HOLDING_REGISTER}, registerAddr=${startAddr}, registerValue=${data})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:39:55.137662" elapsed="0.002283"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:55.141123" level="INFO">Packet: ModbusADU_Request / ModbusPDU06_Write_Single_Register</msg>
<arg>Packet: ${packet}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:55.140456" elapsed="0.000863"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:39:55.141523" elapsed="0.000122"/>
</return>
<msg time="2024-12-20T09:39:55.142221" level="INFO">${req} = ModbusADU_Request / ModbusPDU06_Write_Single_Register</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${data}</arg>
<status status="PASS" start="2024-12-20T09:39:55.135459" elapsed="0.006869"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:57.452315" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0x9
  protoId   = 0x0
  len       = None
  unitId    = 0x1
###[ Write Single Register ]###
     funcCode  = 0x6
     registerAddr= 0x1
     registerValue= 0x1122

Packet get: ###[ ModbusADU Response ]###
  transId   = 0x9
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Write Single Register Answer ]###
     funcCode  = 0x6
     registerAddr= 0x1
     registerValue= 0x1122

Answer bin: b'\x00\t\x00\x00\x00\x06\x01\x06\x00\x01\x11"'
Answer hex: 000900000006010600011122</msg>
<msg time="2024-12-20T09:39:57.452890" level="INFO">${response} = 	"</msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:55.144262" elapsed="2.308784"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:57.454728" level="INFO">Got response 	"</msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:57.453828" elapsed="0.001190"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:39:57.455310" elapsed="0.000167"/>
</return>
<msg time="2024-12-20T09:39:57.456258" level="INFO">${response_frame} = 	"</msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:39:55.143050" elapsed="2.313357"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:39:57.457915" level="INFO">Length is 12.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:39:57.457092" elapsed="0.001097"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:57.462017" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0x9
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Write Single Register Answer ]###
     funcCode  = 0x6
     registerAddr= 0x1
     registerValue= 0x1122

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU06_Write_Single_Register_Answer, b'\x00\t\x00\x00\x00\x06\x01\x06\x00\x01\x11"'
PDU: ModbusADU_Response / ModbusPDU06_Write_Single_Register_Answer</msg>
<msg time="2024-12-20T09:39:57.462613" level="INFO">${packet} = ModbusADU_Response / ModbusPDU06_Write_Single_Register_Answer</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:57.458834" elapsed="0.003926"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:39:57.464352" level="INFO">Length is 12.</msg>
<arg>${packet}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:39:57.463471" elapsed="0.001162"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:57.469228" level="INFO">Response is: ###[ ModbusADU Response ]###
  transId   = 0x9
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Write Single Register Answer ]###
     funcCode  = 0x6
     registerAddr= 0x1
     registerValue= 0x1122
</msg>
<arg>Response is: ${packet.show(dump=True)}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:57.465305" elapsed="0.004230"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:57.470218" elapsed="0.005233"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:57.479336" level="INFO">PDU is ModbusADU_Response, funcCode: 6
func code: &lt;class 'int'&gt; 6
MB exception: 0, Undefined</msg>
<msg time="2024-12-20T09:39:57.479847" level="INFO">${exception} = 0</msg>
<msg time="2024-12-20T09:39:57.480088" level="INFO">${exp_message} = Undefined</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:57.476189" elapsed="0.004027"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:57.482120" level="INFO">exception: (0: Undefined), expected: 0</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:57.480955" elapsed="0.001439"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:39:57.484001" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:57.483023" elapsed="0.001300"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:39:57.492895" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${${packet.registerValue}}</arg>
<arg>${data}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:57.488050" elapsed="0.005200"/>
</kw>
<arg>${exception} == ${0}</arg>
<arg>Should Be Equal As Integers</arg>
<arg>${${packet.registerValue}}</arg>
<arg>${data}</arg>
<arg>ELSE</arg>
<arg>Log</arg>
<arg>"Exception is evaluated correctly ${exception} == ${exception_expected}"</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2024-12-20T09:39:57.485014" elapsed="0.008819"/>
</kw>
<arg>0x01</arg>
<arg>0x0001</arg>
<arg>0x1122</arg>
<arg>0</arg>
<status status="PASS" start="2024-12-20T09:39:55.129950" elapsed="2.364346"/>
</kw>
<kw name="Write Single Holding Register" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:57.498242" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:39:57.497475" elapsed="0.000920"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:57.499812" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:57.499019" elapsed="0.001062"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:57.502551" level="INFO">Write Single Holding Register with parameters UID:0x01, offs:0x2344</msg>
<arg>Write Single Holding Register with parameters UID:${uid}, offs:${start_addr}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:57.500703" elapsed="0.002140"/>
</kw>
<kw name="Create Holding Write Register Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:57.508304" level="INFO">Packet created: ModbusADU_Request / ModbusPDU06_Write_Single_Register</msg>
<msg time="2024-12-20T09:39:57.508815" level="INFO">${packet} = ModbusADU_Request / ModbusPDU06_Write_Single_Register</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0)/ModbusPDU06_Write_Single_Register(funcCode=${FUNC_WRITE_HOLDING_REGISTER}, registerAddr=${startAddr}, registerValue=${data})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:39:57.505896" elapsed="0.003058"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:57.511454" level="INFO">Packet: ModbusADU_Request / ModbusPDU06_Write_Single_Register</msg>
<arg>Packet: ${packet}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:57.509666" elapsed="0.002098"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:39:57.512073" elapsed="0.000177"/>
</return>
<msg time="2024-12-20T09:39:57.513109" level="INFO">${req} = ModbusADU_Request / ModbusPDU06_Write_Single_Register</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${data}</arg>
<status status="PASS" start="2024-12-20T09:39:57.503768" elapsed="0.009490"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:59.800714" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0xa
  protoId   = 0x0
  len       = None
  unitId    = 0x1
###[ Write Single Register ]###
     funcCode  = 0x6
     registerAddr= 0x2344
     registerValue= 0x1122

Packet get: ###[ ModbusADU Response ]###
  transId   = 0xa
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Write Single Register Exception ]###
     funcCode  = 0x86
     exceptCode= Illegal data address

Answer bin: b'\x00\n\x00\x00\x00\x03\x01\x86\x02'
Answer hex: 000a00000003018602</msg>
<msg time="2024-12-20T09:39:59.801171" level="INFO">${response} = 
\x86</msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:57.515905" elapsed="2.285374"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:59.802547" level="INFO">Got response 
\x86</msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:59.801858" elapsed="0.000898"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:39:59.802967" elapsed="0.000128"/>
</return>
<msg time="2024-12-20T09:39:59.803679" level="INFO">${response_frame} = 
\x86</msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:39:57.514231" elapsed="2.289554"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:39:59.804835" level="INFO">Length is 9.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:39:59.804244" elapsed="0.000786"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:59.807067" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0xa
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Write Single Register Exception ]###
     funcCode  = 0x86
     exceptCode= Illegal data address

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU06_Write_Single_Register_Exception, b'\x00\n\x00\x00\x00\x03\x01\x86\x02'
PDU: ModbusADU_Response / ModbusPDU06_Write_Single_Register_Exception</msg>
<msg time="2024-12-20T09:39:59.807464" level="INFO">${packet} = ModbusADU_Response / ModbusPDU06_Write_Single_Register_Exception</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:59.805489" elapsed="0.002074"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:39:59.808704" level="INFO">Length is 9.</msg>
<arg>${packet}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:39:59.808063" elapsed="0.000838"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:59.812004" level="INFO">Response is: ###[ ModbusADU Response ]###
  transId   = 0xa
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Write Single Register Exception ]###
     funcCode  = 0x86
     exceptCode= Illegal data address
</msg>
<arg>Response is: ${packet.show(dump=True)}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:59.809368" elapsed="0.002855"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:59.812715" elapsed="0.003621"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:59.819133" level="INFO">PDU is ModbusADU_Response, funcCode: 134
func code: &lt;class 'int'&gt; 134
MB exception: 2, Illegal data address</msg>
<msg time="2024-12-20T09:39:59.819490" level="INFO">${exception} = 2</msg>
<msg time="2024-12-20T09:39:59.819650" level="INFO">${exp_message} = Illegal data address</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:59.816933" elapsed="0.002805"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:59.821311" level="INFO">exception: (2: Illegal data address), expected: 2</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:59.820454" elapsed="0.001053"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:39:59.822833" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:39:59.821975" elapsed="0.001312"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:59.827804" level="INFO">"Exception is evaluated correctly 2 == 2"</msg>
<arg>"Exception is evaluated correctly ${exception} == ${exception_expected}"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:59.826769" elapsed="0.001244"/>
</kw>
<arg>${exception} == ${0}</arg>
<arg>Should Be Equal As Integers</arg>
<arg>${${packet.registerValue}}</arg>
<arg>${data}</arg>
<arg>ELSE</arg>
<arg>Log</arg>
<arg>"Exception is evaluated correctly ${exception} == ${exception_expected}"</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2024-12-20T09:39:59.823924" elapsed="0.004315"/>
</kw>
<arg>0x01</arg>
<arg>0x2344</arg>
<arg>0x1122</arg>
<arg>2</arg>
<status status="PASS" start="2024-12-20T09:39:57.495554" elapsed="2.332995"/>
</kw>
<kw name="Write Single Holding Register" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:59.831291" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:39:59.830743" elapsed="0.000656"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:59.832426" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:59.831839" elapsed="0.000778"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:59.833783" level="INFO">Write Single Holding Register with parameters UID:0x01, offs:0x0010</msg>
<arg>Write Single Holding Register with parameters UID:${uid}, offs:${start_addr}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:59.833088" elapsed="0.000888"/>
</kw>
<kw name="Create Holding Write Register Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:39:59.837846" level="INFO">Packet created: ModbusADU_Request / ModbusPDU06_Write_Single_Register</msg>
<msg time="2024-12-20T09:39:59.838219" level="INFO">${packet} = ModbusADU_Request / ModbusPDU06_Write_Single_Register</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0)/ModbusPDU06_Write_Single_Register(funcCode=${FUNC_WRITE_HOLDING_REGISTER}, registerAddr=${startAddr}, registerValue=${data})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:39:59.836131" elapsed="0.002187"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:39:59.839493" level="INFO">Packet: ModbusADU_Request / ModbusPDU06_Write_Single_Register</msg>
<arg>Packet: ${packet}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:39:59.838829" elapsed="0.000861"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:39:59.839897" elapsed="0.000123"/>
</return>
<msg time="2024-12-20T09:39:59.840594" level="INFO">${req} = ModbusADU_Request / ModbusPDU06_Write_Single_Register</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${data}</arg>
<status status="PASS" start="2024-12-20T09:39:59.834620" elapsed="0.006073"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:02.122129" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0xb
  protoId   = 0x0
  len       = None
  unitId    = 0x1
###[ Write Single Register ]###
     funcCode  = 0x6
     registerAddr= 0x10
     registerValue= 0x3344

Packet get: ###[ ModbusADU Response ]###
  transId   = 0xb
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Write Single Register Answer ]###
     funcCode  = 0x6
     registerAddr= 0x10
     registerValue= 0x3344

Answer bin: b'\x00\x0b\x00\x00\x00\x06\x01\x06\x00\x103D'
Answer hex: 000b00000006010600103344</msg>
<msg time="2024-12-20T09:40:02.122706" level="INFO">${response} = 3D</msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:39:59.842577" elapsed="2.280281"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:02.124565" level="INFO">Got response 3D</msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:02.123660" elapsed="0.001197"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:40:02.125148" elapsed="0.000170"/>
</return>
<msg time="2024-12-20T09:40:02.126099" level="INFO">${response_frame} = 3D</msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:39:59.841370" elapsed="2.284874"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:02.127781" level="INFO">Length is 12.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:02.126932" elapsed="0.001133"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:02.131749" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0xb
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Write Single Register Answer ]###
     funcCode  = 0x6
     registerAddr= 0x10
     registerValue= 0x3344

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU06_Write_Single_Register_Answer, b'\x00\x0b\x00\x00\x00\x06\x01\x06\x00\x103D'
PDU: ModbusADU_Response / ModbusPDU06_Write_Single_Register_Answer</msg>
<msg time="2024-12-20T09:40:02.132330" level="INFO">${packet} = ModbusADU_Response / ModbusPDU06_Write_Single_Register_Answer</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:02.128718" elapsed="0.003754"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:02.134276" level="INFO">Length is 12.</msg>
<arg>${packet}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:02.133163" elapsed="0.001402"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:02.139133" level="INFO">Response is: ###[ ModbusADU Response ]###
  transId   = 0xb
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Write Single Register Answer ]###
     funcCode  = 0x6
     registerAddr= 0x10
     registerValue= 0x3344
</msg>
<arg>Response is: ${packet.show(dump=True)}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:02.135236" elapsed="0.004206"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:02.140124" elapsed="0.005246"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:02.149243" level="INFO">PDU is ModbusADU_Response, funcCode: 6
func code: &lt;class 'int'&gt; 6
MB exception: 0, Undefined</msg>
<msg time="2024-12-20T09:40:02.149745" level="INFO">${exception} = 0</msg>
<msg time="2024-12-20T09:40:02.149986" level="INFO">${exp_message} = Undefined</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:02.146113" elapsed="0.004002"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:02.152007" level="INFO">exception: (0: Undefined), expected: 0</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:02.150846" elapsed="0.001435"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:40:02.153928" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:02.152924" elapsed="0.001336"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:40:02.162993" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${${packet.registerValue}}</arg>
<arg>${data}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:02.158021" elapsed="0.005328"/>
</kw>
<arg>${exception} == ${0}</arg>
<arg>Should Be Equal As Integers</arg>
<arg>${${packet.registerValue}}</arg>
<arg>${data}</arg>
<arg>ELSE</arg>
<arg>Log</arg>
<arg>"Exception is evaluated correctly ${exception} == ${exception_expected}"</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2024-12-20T09:40:02.154954" elapsed="0.008740"/>
</kw>
<arg>0x01</arg>
<arg>0x0010</arg>
<arg>0x3344</arg>
<arg>0</arg>
<status status="PASS" start="2024-12-20T09:39:59.829435" elapsed="2.334723"/>
</kw>
<doc>Test write one single holding register</doc>
<tag>multi_dut_modbus_generic</tag>
<status status="PASS" start="2024-12-20T09:39:55.127799" elapsed="7.037012"/>
</test>
<test id="s1-t5" name="Test Read Coils With Different Addresses And Quantities" line="41">
<kw name="Read Coil Registers" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:02.172460" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:40:02.171690" elapsed="0.000928"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:02.174070" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:02.173244" elapsed="0.001096"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:02.176065" level="INFO">Read Coil Registers with parameters UID:0x01, offs:0x0001, quantity:0</msg>
<arg>Read Coil Registers with parameters UID:${uid}, offs:${start_addr}, quantity:${quantity}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:02.174970" elapsed="0.001368"/>
</kw>
<kw name="Create Coils Read Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:02.181839" level="INFO">Packet created: ModbusADU_Request / ModbusPDU01_Read_Coils</msg>
<msg time="2024-12-20T09:40:02.182294" level="INFO">${packet} = ModbusADU_Request / ModbusPDU01_Read_Coils</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0)/ModbusPDU01_Read_Coils(funcCode=${FUNC_READ_COILS}, startAddr=${startAddr}, quantity=${quantity})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:40:02.179416" elapsed="0.002975"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:02.183582" level="INFO">Packet: ModbusADU_Request / ModbusPDU01_Read_Coils</msg>
<arg>Packet: ${packet}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:02.182909" elapsed="0.000870"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:40:02.183984" elapsed="0.000122"/>
</return>
<msg time="2024-12-20T09:40:02.184693" level="INFO">${req} = ModbusADU_Request / ModbusPDU01_Read_Coils</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${quantity}</arg>
<status status="PASS" start="2024-12-20T09:40:02.177271" elapsed="0.007524"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:04.460615" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0xc
  protoId   = 0x0
  len       = None
  unitId    = 0x1
###[ Read Coils Request ]###
     funcCode  = 0x1
     startAddr = 0x1
     quantity  = 0x0

Packet get: ###[ ModbusADU Response ]###
  transId   = 0xc
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Coils Exception ]###
     funcCode  = 0x81
     exceptCode= Illegal data value

Answer bin: b'\x00\x0c\x00\x00\x00\x03\x01\x81\x03'
Answer hex: 000c00000003018103</msg>
<msg time="2024-12-20T09:40:04.461058" level="INFO">${response} = \x81</msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:02.186679" elapsed="2.274479"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:04.462361" level="INFO">Got response \x81</msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:04.461712" elapsed="0.000842"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:40:04.462747" elapsed="0.000119"/>
</return>
<msg time="2024-12-20T09:40:04.463407" level="INFO">${response_frame} = \x81</msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:40:02.185477" elapsed="2.278184"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:04.464712" level="INFO">Length is 9.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:04.464136" elapsed="0.000760"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:04.466769" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0xc
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Coils Exception ]###
     funcCode  = 0x81
     exceptCode= Illegal data value

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU01_Read_Coils_Exception, b'\x00\x0c\x00\x00\x00\x03\x01\x81\x03'
PDU: ModbusADU_Response / ModbusPDU01_Read_Coils_Exception</msg>
<msg time="2024-12-20T09:40:04.467234" level="INFO">${packet} = ModbusADU_Response / ModbusPDU01_Read_Coils_Exception</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:04.465319" elapsed="0.002011"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:04.468476" level="INFO">Length is 9.</msg>
<arg>${packet}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:04.467834" elapsed="0.000838"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:04.471788" level="INFO">Response is: ###[ ModbusADU Response ]###
  transId   = 0xc
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Coils Exception ]###
     funcCode  = 0x81
     exceptCode= Illegal data value
</msg>
<arg>Response is: ${packet.show(dump=True)}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:04.469139" elapsed="0.002861"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:04.472497" elapsed="0.003661"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:04.478969" level="INFO">PDU is ModbusADU_Response, funcCode: 129
func code: &lt;class 'int'&gt; 129
MB exception: 3, Illegal data value</msg>
<msg time="2024-12-20T09:40:04.479328" level="INFO">${exception} = 3</msg>
<msg time="2024-12-20T09:40:04.479489" level="INFO">${exp_message} = Illegal data value</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:04.476725" elapsed="0.002850"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:04.480921" level="INFO">exception: (3: Illegal data value), expected: 3</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:04.480101" elapsed="0.001012"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:40:04.482267" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:04.481563" elapsed="0.000935"/>
</kw>
<if>
<branch type="IF" condition="${exception} == ${0}">
<kw name="Get Bits From PDU" owner="ModbusTestLib">
<var>${coils}</var>
<arg>${packet}</arg>
<doc>Check PDU frame, extract bits (coils or discrete) from PDU.
Args:
    pdu: A Modbus PDU frame.
Returns:
    bits: The list of bits of boolean type.
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:04.484678" elapsed="0.000090"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<arg>${coils}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:04.485176" elapsed="0.000076"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${${coils.__len__()}}</arg>
<arg>${${packet.byteCount} * 8}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:04.485601" elapsed="0.000072"/>
</kw>
<kw name="Log" owner="BuiltIn">
<arg>Returned modbus coils: ${coils}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:04.486040" elapsed="0.000073"/>
</kw>
<status status="NOT RUN" start="2024-12-20T09:40:04.482819" elapsed="0.003420"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:04.487675" level="INFO">"Exception is evaluated correctly 3 == 3"</msg>
<arg>"Exception is evaluated correctly ${exception} == ${exception_expected}"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:04.486680" elapsed="0.001195"/>
</kw>
<status status="PASS" start="2024-12-20T09:40:04.486340" elapsed="0.001693"/>
</branch>
<status status="PASS" start="2024-12-20T09:40:04.482741" elapsed="0.005384"/>
</if>
<arg>0x01</arg>
<arg>0x0001</arg>
<arg>0</arg>
<arg>3</arg>
<status status="PASS" start="2024-12-20T09:40:02.169777" elapsed="2.318563"/>
</kw>
<kw name="Read Coil Registers" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:04.491354" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:40:04.490815" elapsed="0.000644"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:04.492475" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:04.491897" elapsed="0.000764"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:04.493847" level="INFO">Read Coil Registers with parameters UID:0x01, offs:0x0001, quantity:16</msg>
<arg>Read Coil Registers with parameters UID:${uid}, offs:${start_addr}, quantity:${quantity}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:04.493095" elapsed="0.000939"/>
</kw>
<kw name="Create Coils Read Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:04.497848" level="INFO">Packet created: ModbusADU_Request / ModbusPDU01_Read_Coils</msg>
<msg time="2024-12-20T09:40:04.498216" level="INFO">${packet} = ModbusADU_Request / ModbusPDU01_Read_Coils</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0)/ModbusPDU01_Read_Coils(funcCode=${FUNC_READ_COILS}, startAddr=${startAddr}, quantity=${quantity})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:40:04.496129" elapsed="0.002181"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:04.499483" level="INFO">Packet: ModbusADU_Request / ModbusPDU01_Read_Coils</msg>
<arg>Packet: ${packet}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:04.498824" elapsed="0.000853"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:40:04.500062" elapsed="0.000135"/>
</return>
<msg time="2024-12-20T09:40:04.500872" level="INFO">${req} = ModbusADU_Request / ModbusPDU01_Read_Coils</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${quantity}</arg>
<status status="PASS" start="2024-12-20T09:40:04.494658" elapsed="0.006364"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:06.792386" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0xd
  protoId   = 0x0
  len       = None
  unitId    = 0x1
###[ Read Coils Request ]###
     funcCode  = 0x1
     startAddr = 0x1
     quantity  = 0x10

Packet get: ###[ ModbusADU Response ]###
  transId   = 0xd
  protoId   = 0x0
  len       = 0x5
  unitId    = 0x1
###[ Read Coils Answer ]###
     funcCode  = 0x1
     byteCount = 2
     coilStatus= [42, 85]

Answer bin: b'\x00\r\x00\x00\x00\x05\x01\x01\x02*U'
Answer hex: 000d000000050101022a55</msg>
<msg time="2024-12-20T09:40:06.792964" level="INFO">${response} = *U</msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:04.503576" elapsed="2.289542"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:06.794812" level="INFO">Got response *U</msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:06.793905" elapsed="0.001195"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:40:06.795388" elapsed="0.000168"/>
</return>
<msg time="2024-12-20T09:40:06.796339" level="INFO">${response_frame} = *U</msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:40:04.502299" elapsed="2.294186"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:06.798048" level="INFO">Length is 11.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:06.797204" elapsed="0.001119"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:06.801262" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0xd
  protoId   = 0x0
  len       = 0x5
  unitId    = 0x1
###[ Read Coils Answer ]###
     funcCode  = 0x1
     byteCount = 2
     coilStatus= [42, 85]

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU01_Read_Coils_Answer, b'\x00\r\x00\x00\x00\x05\x01\x01\x02*U'
PDU: ModbusADU_Response / ModbusPDU01_Read_Coils_Answer</msg>
<msg time="2024-12-20T09:40:06.801794" level="INFO">${packet} = ModbusADU_Response / ModbusPDU01_Read_Coils_Answer</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:06.798971" elapsed="0.002964"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:06.803493" level="INFO">Length is 11.</msg>
<arg>${packet}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:06.802616" elapsed="0.001159"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:06.808299" level="INFO">Response is: ###[ ModbusADU Response ]###
  transId   = 0xd
  protoId   = 0x0
  len       = 0x5
  unitId    = 0x1
###[ Read Coils Answer ]###
     funcCode  = 0x1
     byteCount = 2
     coilStatus= [42, 85]
</msg>
<arg>Response is: ${packet.show(dump=True)}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:06.804415" elapsed="0.004195"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:06.809302" elapsed="0.005214"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:06.818529" level="INFO">PDU is ModbusADU_Response, funcCode: 1
func code: &lt;class 'int'&gt; 1
MB exception: 0, Undefined</msg>
<msg time="2024-12-20T09:40:06.819035" level="INFO">${exception} = 0</msg>
<msg time="2024-12-20T09:40:06.819276" level="INFO">${exp_message} = Undefined</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:06.815288" elapsed="0.004116"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:06.821282" level="INFO">exception: (0: Undefined), expected: 0</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:06.820127" elapsed="0.001424"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:40:06.823141" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:06.822169" elapsed="0.001295"/>
</kw>
<if>
<branch type="IF" condition="${exception} == ${0}">
<kw name="Get Bits From PDU" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:06.827829" level="INFO">${coils} = [False, True, False, True, False, True, False, False, True, False, True, False, True, False, True, False]</msg>
<var>${coils}</var>
<arg>${packet}</arg>
<doc>Check PDU frame, extract bits (coils or discrete) from PDU.
Args:
    pdu: A Modbus PDU frame.
Returns:
    bits: The list of bits of boolean type.
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:06.826598" elapsed="0.001391"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:06.829411" level="INFO">Length is 16.</msg>
<arg>${coils}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:06.828645" elapsed="0.001032"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${${coils.__len__()}}</arg>
<arg>${${packet.byteCount} * 8}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:06.830283" elapsed="0.010433"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:06.842321" level="INFO">Returned modbus coils: [False, True, False, True, False, True, False, False, True, False, True, False, True, False, True, False]</msg>
<arg>Returned modbus coils: ${coils}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:06.841478" elapsed="0.001113"/>
</kw>
<status status="PASS" start="2024-12-20T09:40:06.823909" elapsed="0.018898"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<arg>"Exception is evaluated correctly ${exception} == ${exception_expected}"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:06.843539" elapsed="0.000114"/>
</kw>
<status status="NOT RUN" start="2024-12-20T09:40:06.842962" elapsed="0.001106"/>
</branch>
<status status="PASS" start="2024-12-20T09:40:06.823806" elapsed="0.020401"/>
</if>
<arg>0x01</arg>
<arg>0x0001</arg>
<arg>16</arg>
<arg>0</arg>
<status status="PASS" start="2024-12-20T09:40:04.489499" elapsed="2.355039"/>
</kw>
<kw name="Read Coil Registers" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:06.848830" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:40:06.848075" elapsed="0.000906"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:06.850393" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:06.849597" elapsed="0.001061"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:06.852343" level="INFO">Read Coil Registers with parameters UID:0x01, offs:0x0010, quantity:20</msg>
<arg>Read Coil Registers with parameters UID:${uid}, offs:${start_addr}, quantity:${quantity}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:06.851273" elapsed="0.001338"/>
</kw>
<kw name="Create Coils Read Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:06.859080" level="INFO">Packet created: ModbusADU_Request / ModbusPDU01_Read_Coils</msg>
<msg time="2024-12-20T09:40:06.859619" level="INFO">${packet} = ModbusADU_Request / ModbusPDU01_Read_Coils</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0)/ModbusPDU01_Read_Coils(funcCode=${FUNC_READ_COILS}, startAddr=${startAddr}, quantity=${quantity})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:40:06.856517" elapsed="0.003243"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:06.861418" level="INFO">Packet: ModbusADU_Request / ModbusPDU01_Read_Coils</msg>
<arg>Packet: ${packet}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:06.860481" elapsed="0.001219"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:40:06.862002" elapsed="0.000171"/>
</return>
<msg time="2024-12-20T09:40:06.862997" level="INFO">${req} = ModbusADU_Request / ModbusPDU01_Read_Coils</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${quantity}</arg>
<status status="PASS" start="2024-12-20T09:40:06.853504" elapsed="0.009640"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:09.700692" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0xe
  protoId   = 0x0
  len       = None
  unitId    = 0x1
###[ Read Coils Request ]###
     funcCode  = 0x1
     startAddr = 0x10
     quantity  = 0x14

Packet get: ###[ ModbusADU Response ]###
  transId   = 0xe
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Coils Exception ]###
     funcCode  = 0x81
     exceptCode= Illegal data address

Answer bin: b'\x00\x0e\x00\x00\x00\x03\x01\x81\x02'
Answer hex: 000e00000003018102</msg>
<msg time="2024-12-20T09:40:09.701146" level="INFO">${response} = \x81</msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:06.866044" elapsed="2.835206"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:09.702552" level="INFO">Got response \x81</msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:09.701847" elapsed="0.000910"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:40:09.702966" elapsed="0.000124"/>
</return>
<msg time="2024-12-20T09:40:09.703681" level="INFO">${response_frame} = \x81</msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:40:06.864152" elapsed="2.839636"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:09.704866" level="INFO">Length is 9.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:09.704258" elapsed="0.000805"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:09.707096" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0xe
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Coils Exception ]###
     funcCode  = 0x81
     exceptCode= Illegal data address

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU01_Read_Coils_Exception, b'\x00\x0e\x00\x00\x00\x03\x01\x81\x02'
PDU: ModbusADU_Response / ModbusPDU01_Read_Coils_Exception</msg>
<msg time="2024-12-20T09:40:09.707492" level="INFO">${packet} = ModbusADU_Response / ModbusPDU01_Read_Coils_Exception</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:09.705533" elapsed="0.002057"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:09.708723" level="INFO">Length is 9.</msg>
<arg>${packet}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:09.708092" elapsed="0.000824"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:09.711993" level="INFO">Response is: ###[ ModbusADU Response ]###
  transId   = 0xe
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Coils Exception ]###
     funcCode  = 0x81
     exceptCode= Illegal data address
</msg>
<arg>Response is: ${packet.show(dump=True)}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:09.709373" elapsed="0.002829"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:09.712687" elapsed="0.003622"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:09.719085" level="INFO">PDU is ModbusADU_Response, funcCode: 129
func code: &lt;class 'int'&gt; 129
MB exception: 2, Illegal data address</msg>
<msg time="2024-12-20T09:40:09.719440" level="INFO">${exception} = 2</msg>
<msg time="2024-12-20T09:40:09.719601" level="INFO">${exp_message} = Illegal data address</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:09.716875" elapsed="0.002814"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:09.721069" level="INFO">exception: (2: Illegal data address), expected: 2</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:09.720222" elapsed="0.001222"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:40:09.722675" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:09.721941" elapsed="0.000969"/>
</kw>
<if>
<branch type="IF" condition="${exception} == ${0}">
<kw name="Get Bits From PDU" owner="ModbusTestLib">
<var>${coils}</var>
<arg>${packet}</arg>
<doc>Check PDU frame, extract bits (coils or discrete) from PDU.
Args:
    pdu: A Modbus PDU frame.
Returns:
    bits: The list of bits of boolean type.
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:09.725090" elapsed="0.000092"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<arg>${coils}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:09.725591" elapsed="0.000077"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${${coils.__len__()}}</arg>
<arg>${${packet.byteCount} * 8}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:09.726020" elapsed="0.000072"/>
</kw>
<kw name="Log" owner="BuiltIn">
<arg>Returned modbus coils: ${coils}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:09.726482" elapsed="0.000078"/>
</kw>
<status status="NOT RUN" start="2024-12-20T09:40:09.723237" elapsed="0.003452"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:09.728182" level="INFO">"Exception is evaluated correctly 2 == 2"</msg>
<arg>"Exception is evaluated correctly ${exception} == ${exception_expected}"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:09.727213" elapsed="0.001166"/>
</kw>
<status status="PASS" start="2024-12-20T09:40:09.726817" elapsed="0.001722"/>
</branch>
<status status="PASS" start="2024-12-20T09:40:09.723157" elapsed="0.005475"/>
</if>
<arg>0x01</arg>
<arg>0x0010</arg>
<arg>20</arg>
<arg>2</arg>
<status status="PASS" start="2024-12-20T09:40:06.846171" elapsed="2.882678"/>
</kw>
<kw name="Read Coil Registers" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:09.732572" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:40:09.732006" elapsed="0.000673"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:09.733770" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:09.733137" elapsed="0.000852"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:09.735906" level="INFO">Read Coil Registers with parameters UID:0x01, offs:0x0002, quantity:300</msg>
<arg>Read Coil Registers with parameters UID:${uid}, offs:${start_addr}, quantity:${quantity}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:09.734574" elapsed="0.001552"/>
</kw>
<kw name="Create Coils Read Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:09.740098" level="INFO">Packet created: ModbusADU_Request / ModbusPDU01_Read_Coils</msg>
<msg time="2024-12-20T09:40:09.740470" level="INFO">${packet} = ModbusADU_Request / ModbusPDU01_Read_Coils</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0)/ModbusPDU01_Read_Coils(funcCode=${FUNC_READ_COILS}, startAddr=${startAddr}, quantity=${quantity})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:40:09.738418" elapsed="0.002147"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:09.741735" level="INFO">Packet: ModbusADU_Request / ModbusPDU01_Read_Coils</msg>
<arg>Packet: ${packet}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:09.741072" elapsed="0.000859"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:40:09.742136" elapsed="0.000121"/>
</return>
<msg time="2024-12-20T09:40:09.742838" level="INFO">${req} = ModbusADU_Request / ModbusPDU01_Read_Coils</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${quantity}</arg>
<status status="PASS" start="2024-12-20T09:40:09.736851" elapsed="0.006084"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:12.000717" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0xf
  protoId   = 0x0
  len       = None
  unitId    = 0x1
###[ Read Coils Request ]###
     funcCode  = 0x1
     startAddr = 0x2
     quantity  = 0x12c

Packet get: ###[ ModbusADU Response ]###
  transId   = 0xf
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Coils Exception ]###
     funcCode  = 0x81
     exceptCode= Illegal data address

Answer bin: b'\x00\x0f\x00\x00\x00\x03\x01\x81\x02'
Answer hex: 000f00000003018102</msg>
<msg time="2024-12-20T09:40:12.001170" level="INFO">${response} = \x81</msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:09.744797" elapsed="2.256479"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:12.002560" level="INFO">Got response \x81</msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:12.001869" elapsed="0.000897"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:40:12.002976" elapsed="0.000122"/>
</return>
<msg time="2024-12-20T09:40:12.003680" level="INFO">${response_frame} = \x81</msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:40:09.743605" elapsed="2.260177"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:12.004830" level="INFO">Length is 9.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:12.004239" elapsed="0.000779"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:12.007030" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0xf
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Coils Exception ]###
     funcCode  = 0x81
     exceptCode= Illegal data address

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU01_Read_Coils_Exception, b'\x00\x0f\x00\x00\x00\x03\x01\x81\x02'
PDU: ModbusADU_Response / ModbusPDU01_Read_Coils_Exception</msg>
<msg time="2024-12-20T09:40:12.007415" level="INFO">${packet} = ModbusADU_Response / ModbusPDU01_Read_Coils_Exception</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:12.005475" elapsed="0.002035"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:12.008871" level="INFO">Length is 9.</msg>
<arg>${packet}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:12.008193" elapsed="0.000877"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:12.012186" level="INFO">Response is: ###[ ModbusADU Response ]###
  transId   = 0xf
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Coils Exception ]###
     funcCode  = 0x81
     exceptCode= Illegal data address
</msg>
<arg>Response is: ${packet.show(dump=True)}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:12.009540" elapsed="0.002857"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:12.012881" elapsed="0.004250"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:12.019892" level="INFO">PDU is ModbusADU_Response, funcCode: 129
func code: &lt;class 'int'&gt; 129
MB exception: 2, Illegal data address</msg>
<msg time="2024-12-20T09:40:12.020250" level="INFO">${exception} = 2</msg>
<msg time="2024-12-20T09:40:12.020407" level="INFO">${exp_message} = Illegal data address</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:12.017689" elapsed="0.002801"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:12.021838" level="INFO">exception: (2: Illegal data address), expected: 2</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:12.021017" elapsed="0.001016"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:40:12.023187" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:12.022483" elapsed="0.000934"/>
</kw>
<if>
<branch type="IF" condition="${exception} == ${0}">
<kw name="Get Bits From PDU" owner="ModbusTestLib">
<var>${coils}</var>
<arg>${packet}</arg>
<doc>Check PDU frame, extract bits (coils or discrete) from PDU.
Args:
    pdu: A Modbus PDU frame.
Returns:
    bits: The list of bits of boolean type.
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:12.025624" elapsed="0.000090"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<arg>${coils}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:12.026129" elapsed="0.000079"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${${coils.__len__()}}</arg>
<arg>${${packet.byteCount} * 8}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:12.026562" elapsed="0.000075"/>
</kw>
<kw name="Log" owner="BuiltIn">
<arg>Returned modbus coils: ${coils}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:12.027045" elapsed="0.000081"/>
</kw>
<status status="NOT RUN" start="2024-12-20T09:40:12.023739" elapsed="0.003522"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:12.028682" level="INFO">"Exception is evaluated correctly 2 == 2"</msg>
<arg>"Exception is evaluated correctly ${exception} == ${exception_expected}"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:12.027714" elapsed="0.001164"/>
</kw>
<status status="PASS" start="2024-12-20T09:40:12.027366" elapsed="0.001667"/>
</branch>
<status status="PASS" start="2024-12-20T09:40:12.023662" elapsed="0.005467"/>
</if>
<arg>0x01</arg>
<arg>0x0002</arg>
<arg>300</arg>
<arg>2</arg>
<status status="PASS" start="2024-12-20T09:40:09.730626" elapsed="2.298719"/>
</kw>
<kw name="Read Coil Registers" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:12.032340" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:40:12.031798" elapsed="0.000648"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:12.033479" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:12.032895" elapsed="0.000773"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:12.034888" level="INFO">Read Coil Registers with parameters UID:0x01, offs:0x0008, quantity:30</msg>
<arg>Read Coil Registers with parameters UID:${uid}, offs:${start_addr}, quantity:${quantity}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:12.034113" elapsed="0.000963"/>
</kw>
<kw name="Create Coils Read Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:12.038897" level="INFO">Packet created: ModbusADU_Request / ModbusPDU01_Read_Coils</msg>
<msg time="2024-12-20T09:40:12.039263" level="INFO">${packet} = ModbusADU_Request / ModbusPDU01_Read_Coils</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0)/ModbusPDU01_Read_Coils(funcCode=${FUNC_READ_COILS}, startAddr=${startAddr}, quantity=${quantity})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:40:12.037239" elapsed="0.002115"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:12.040526" level="INFO">Packet: ModbusADU_Request / ModbusPDU01_Read_Coils</msg>
<arg>Packet: ${packet}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:12.039855" elapsed="0.000865"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:40:12.040927" elapsed="0.000120"/>
</return>
<msg time="2024-12-20T09:40:12.041617" level="INFO">${req} = ModbusADU_Request / ModbusPDU01_Read_Coils</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${quantity}</arg>
<status status="PASS" start="2024-12-20T09:40:12.035717" elapsed="0.005998"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:14.320593" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0x10
  protoId   = 0x0
  len       = None
  unitId    = 0x1
###[ Read Coils Request ]###
     funcCode  = 0x1
     startAddr = 0x8
     quantity  = 0x1e

Packet get: ###[ ModbusADU Response ]###
  transId   = 0x10
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Coils Exception ]###
     funcCode  = 0x81
     exceptCode= Illegal data address

Answer bin: b'\x00\x10\x00\x00\x00\x03\x01\x81\x02'
Answer hex: 001000000003018102</msg>
<msg time="2024-12-20T09:40:14.321052" level="INFO">${response} = \x81</msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:12.043580" elapsed="2.277577"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:14.322612" level="INFO">Got response \x81</msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:14.321897" elapsed="0.000920"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:40:14.323027" elapsed="0.000124"/>
</return>
<msg time="2024-12-20T09:40:14.323736" level="INFO">${response_frame} = \x81</msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:40:12.042387" elapsed="2.281452"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:14.324880" level="INFO">Length is 9.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:14.324294" elapsed="0.000777"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:14.327115" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0x10
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Coils Exception ]###
     funcCode  = 0x81
     exceptCode= Illegal data address

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU01_Read_Coils_Exception, b'\x00\x10\x00\x00\x00\x03\x01\x81\x02'
PDU: ModbusADU_Response / ModbusPDU01_Read_Coils_Exception</msg>
<msg time="2024-12-20T09:40:14.327506" level="INFO">${packet} = ModbusADU_Response / ModbusPDU01_Read_Coils_Exception</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:14.325529" elapsed="0.002072"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:14.328769" level="INFO">Length is 9.</msg>
<arg>${packet}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:14.328110" elapsed="0.000860"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:14.332068" level="INFO">Response is: ###[ ModbusADU Response ]###
  transId   = 0x10
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Coils Exception ]###
     funcCode  = 0x81
     exceptCode= Illegal data address
</msg>
<arg>Response is: ${packet.show(dump=True)}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:14.329435" elapsed="0.002847"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:14.332776" elapsed="0.003576"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:14.339157" level="INFO">PDU is ModbusADU_Response, funcCode: 129
func code: &lt;class 'int'&gt; 129
MB exception: 2, Illegal data address</msg>
<msg time="2024-12-20T09:40:14.339515" level="INFO">${exception} = 2</msg>
<msg time="2024-12-20T09:40:14.339676" level="INFO">${exp_message} = Illegal data address</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:14.336951" elapsed="0.002812"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:14.341160" level="INFO">exception: (2: Illegal data address), expected: 2</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:14.340320" elapsed="0.001031"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:40:14.342503" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:14.341805" elapsed="0.000921"/>
</kw>
<if>
<branch type="IF" condition="${exception} == ${0}">
<kw name="Get Bits From PDU" owner="ModbusTestLib">
<var>${coils}</var>
<arg>${packet}</arg>
<doc>Check PDU frame, extract bits (coils or discrete) from PDU.
Args:
    pdu: A Modbus PDU frame.
Returns:
    bits: The list of bits of boolean type.
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:14.344905" elapsed="0.000094"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<arg>${coils}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:14.345405" elapsed="0.000077"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${${coils.__len__()}}</arg>
<arg>${${packet.byteCount} * 8}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:14.345831" elapsed="0.000072"/>
</kw>
<kw name="Log" owner="BuiltIn">
<arg>Returned modbus coils: ${coils}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:14.346272" elapsed="0.000071"/>
</kw>
<status status="NOT RUN" start="2024-12-20T09:40:14.343042" elapsed="0.003427"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:14.347918" level="INFO">"Exception is evaluated correctly 2 == 2"</msg>
<arg>"Exception is evaluated correctly ${exception} == ${exception_expected}"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:14.346950" elapsed="0.001166"/>
</kw>
<status status="PASS" start="2024-12-20T09:40:14.346570" elapsed="0.001702"/>
</branch>
<status status="PASS" start="2024-12-20T09:40:14.342966" elapsed="0.005396"/>
</if>
<arg>0x01</arg>
<arg>0x0008</arg>
<arg>30</arg>
<arg>2</arg>
<status status="PASS" start="2024-12-20T09:40:12.030481" elapsed="2.318097"/>
</kw>
<doc>Test read coil registers for different addresses with different quantities</doc>
<tag>multi_dut_modbus_generic</tag>
<status status="PASS" start="2024-12-20T09:40:02.165983" elapsed="12.183052"/>
</test>
<test id="s1-t6" name="Test Read Discrete Inputs With Different Addresses And Quantities" line="50">
<kw name="Read Discrete Input Registers" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:14.355141" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:40:14.354573" elapsed="0.000676"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:14.356329" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:14.355725" elapsed="0.000797"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:14.357832" level="INFO">Read Discrete Input Registers with parameters UID:0x01, offs:0x0001, quantity:0</msg>
<arg>Read Discrete Input Registers with parameters UID:${uid}, offs:${start_addr}, quantity:${quantity}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:14.357036" elapsed="0.000984"/>
</kw>
<kw name="Create Discrete Read Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:14.362145" level="INFO">Packet created: ModbusADU_Request / ModbusPDU02_Read_Discrete_Inputs</msg>
<msg time="2024-12-20T09:40:14.362520" level="INFO">${packet} = ModbusADU_Request / ModbusPDU02_Read_Discrete_Inputs</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0)/ModbusPDU02_Read_Discrete_Inputs(funcCode=${FUNC_READ_DISCRETE_INPUTS}, startAddr=${startAddr}, quantity=${quantity})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:40:14.360417" elapsed="0.002197"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:14.363859" level="INFO">Packet: ModbusADU_Request / ModbusPDU02_Read_Discrete_Inputs</msg>
<arg>Packet: ${packet}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:14.363176" elapsed="0.000879"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:40:14.364267" elapsed="0.000123"/>
</return>
<msg time="2024-12-20T09:40:14.364969" level="INFO">${req} = ModbusADU_Request / ModbusPDU02_Read_Discrete_Inputs</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${quantity}</arg>
<status status="PASS" start="2024-12-20T09:40:14.358867" elapsed="0.006200"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:16.650683" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0x11
  protoId   = 0x0
  len       = None
  unitId    = 0x1
###[ Read Discrete Inputs ]###
     funcCode  = 0x2
     startAddr = 0x1
     quantity  = 0x0

Packet get: ###[ ModbusADU Response ]###
  transId   = 0x11
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Discrete Inputs Exception ]###
     funcCode  = 0x82
     exceptCode= Illegal data value

Answer bin: b'\x00\x11\x00\x00\x00\x03\x01\x82\x03'
Answer hex: 001100000003018203</msg>
<msg time="2024-12-20T09:40:16.651141" level="INFO">${response} = \x82</msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:14.367544" elapsed="2.283704"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:16.652536" level="INFO">Got response \x82</msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:16.651841" elapsed="0.000904"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:40:16.652958" elapsed="0.000125"/>
</return>
<msg time="2024-12-20T09:40:16.653669" level="INFO">${response_frame} = \x82</msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:40:14.365784" elapsed="2.287988"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:16.654826" level="INFO">Length is 9.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:16.654233" elapsed="0.000790"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:16.657071" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0x11
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Discrete Inputs Exception ]###
     funcCode  = 0x82
     exceptCode= Illegal data value

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU02_Read_Discrete_Inputs_Exception, b'\x00\x11\x00\x00\x00\x03\x01\x82\x03'
PDU: ModbusADU_Response / ModbusPDU02_Read_Discrete_Inputs_Exception</msg>
<msg time="2024-12-20T09:40:16.657474" level="INFO">${packet} = ModbusADU_Response / ModbusPDU02_Read_Discrete_Inputs_Exception</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:16.655483" elapsed="0.002086"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:16.658699" level="INFO">Length is 9.</msg>
<arg>${packet}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:16.658065" elapsed="0.000828"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:16.662022" level="INFO">Response is: ###[ ModbusADU Response ]###
  transId   = 0x11
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Discrete Inputs Exception ]###
     funcCode  = 0x82
     exceptCode= Illegal data value
</msg>
<arg>Response is: ${packet.show(dump=True)}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:16.659375" elapsed="0.002861"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:16.662725" elapsed="0.003610"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:16.669096" level="INFO">PDU is ModbusADU_Response, funcCode: 130
func code: &lt;class 'int'&gt; 130
MB exception: 3, Illegal data value</msg>
<msg time="2024-12-20T09:40:16.669451" level="INFO">${exception} = 3</msg>
<msg time="2024-12-20T09:40:16.669610" level="INFO">${exp_message} = Illegal data value</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:16.666898" elapsed="0.002795"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:16.671036" level="INFO">exception: (3: Illegal data value), expected: 3</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:16.670214" elapsed="0.001017"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:40:16.672376" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:16.671679" elapsed="0.000925"/>
</kw>
<if>
<branch type="IF" condition="${exception} == ${0}">
<kw name="Get Bits From PDU" owner="ModbusTestLib">
<var>${dicretes}</var>
<arg>${packet}</arg>
<doc>Check PDU frame, extract bits (coils or discrete) from PDU.
Args:
    pdu: A Modbus PDU frame.
Returns:
    bits: The list of bits of boolean type.
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:16.674769" elapsed="0.000089"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<arg>${dicretes}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:16.675269" elapsed="0.000075"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${${dicretes.__len__()}}</arg>
<arg>${${packet.byteCount} * 8}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:16.675908" elapsed="0.000088"/>
</kw>
<kw name="Log" owner="BuiltIn">
<arg>Returned modbus dicretes: ${dicretes}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:16.676377" elapsed="0.000076"/>
</kw>
<status status="NOT RUN" start="2024-12-20T09:40:16.672922" elapsed="0.003660"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:16.678097" level="INFO">"Exception is evaluated correctly 3 == 3"</msg>
<arg>"Exception is evaluated correctly ${exception} == ${exception_expected}"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:16.677111" elapsed="0.001186"/>
</kw>
<status status="PASS" start="2024-12-20T09:40:16.676685" elapsed="0.001769"/>
</branch>
<status status="PASS" start="2024-12-20T09:40:16.672846" elapsed="0.005699"/>
</if>
<arg>0x01</arg>
<arg>0x0001</arg>
<arg>0</arg>
<arg>3</arg>
<status status="PASS" start="2024-12-20T09:40:14.353160" elapsed="2.325602"/>
</kw>
<kw name="Read Discrete Input Registers" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:16.681804" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:40:16.681252" elapsed="0.000658"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:16.682938" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:16.682359" elapsed="0.000768"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:16.684348" level="INFO">Read Discrete Input Registers with parameters UID:0x01, offs:0x0001, quantity:16</msg>
<arg>Read Discrete Input Registers with parameters UID:${uid}, offs:${start_addr}, quantity:${quantity}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:16.683573" elapsed="0.000985"/>
</kw>
<kw name="Create Discrete Read Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:16.689346" level="INFO">Packet created: ModbusADU_Request / ModbusPDU02_Read_Discrete_Inputs</msg>
<msg time="2024-12-20T09:40:16.689724" level="INFO">${packet} = ModbusADU_Request / ModbusPDU02_Read_Discrete_Inputs</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0)/ModbusPDU02_Read_Discrete_Inputs(funcCode=${FUNC_READ_DISCRETE_INPUTS}, startAddr=${startAddr}, quantity=${quantity})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:40:16.687638" elapsed="0.002178"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:16.691001" level="INFO">Packet: ModbusADU_Request / ModbusPDU02_Read_Discrete_Inputs</msg>
<arg>Packet: ${packet}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:16.690333" elapsed="0.000861"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:40:16.691394" elapsed="0.000121"/>
</return>
<msg time="2024-12-20T09:40:16.692103" level="INFO">${req} = ModbusADU_Request / ModbusPDU02_Read_Discrete_Inputs</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${quantity}</arg>
<status status="PASS" start="2024-12-20T09:40:16.685826" elapsed="0.006375"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:18.980751" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0x12
  protoId   = 0x0
  len       = None
  unitId    = 0x1
###[ Read Discrete Inputs ]###
     funcCode  = 0x2
     startAddr = 0x1
     quantity  = 0x10

Packet get: ###[ ModbusADU Response ]###
  transId   = 0x12
  protoId   = 0x0
  len       = 0x5
  unitId    = 0x1
###[ Read Discrete Inputs Answer ]###
     funcCode  = 0x2
     byteCount = 2
     inputStatus= [42, 0]

Answer bin: b'\x00\x12\x00\x00\x00\x05\x01\x02\x02*\x00'
Answer hex: 0012000000050102022a00</msg>
<msg time="2024-12-20T09:40:18.981187" level="INFO">${response} = *</msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:16.694059" elapsed="2.287233"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:18.982541" level="INFO">Got response *</msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:18.981869" elapsed="0.000880"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:40:18.982961" elapsed="0.000125"/>
</return>
<msg time="2024-12-20T09:40:18.983645" level="INFO">${response_frame} = *</msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:40:16.692871" elapsed="2.290880"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:18.984819" level="INFO">Length is 11.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:18.984221" elapsed="0.000793"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:18.987187" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0x12
  protoId   = 0x0
  len       = 0x5
  unitId    = 0x1
###[ Read Discrete Inputs Answer ]###
     funcCode  = 0x2
     byteCount = 2
     inputStatus= [42, 0]

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU02_Read_Discrete_Inputs_Answer, b'\x00\x12\x00\x00\x00\x05\x01\x02\x02*\x00'
PDU: ModbusADU_Response / ModbusPDU02_Read_Discrete_Inputs_Answer</msg>
<msg time="2024-12-20T09:40:18.987591" level="INFO">${packet} = ModbusADU_Response / ModbusPDU02_Read_Discrete_Inputs_Answer</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:18.985480" elapsed="0.002206"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:18.988832" level="INFO">Length is 11.</msg>
<arg>${packet}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:18.988185" elapsed="0.000846"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:18.992172" level="INFO">Response is: ###[ ModbusADU Response ]###
  transId   = 0x12
  protoId   = 0x0
  len       = 0x5
  unitId    = 0x1
###[ Read Discrete Inputs Answer ]###
     funcCode  = 0x2
     byteCount = 2
     inputStatus= [42, 0]
</msg>
<arg>Response is: ${packet.show(dump=True)}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:18.989494" elapsed="0.002891"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:18.993049" elapsed="0.003641"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:18.999455" level="INFO">PDU is ModbusADU_Response, funcCode: 2
func code: &lt;class 'int'&gt; 2
MB exception: 0, Undefined</msg>
<msg time="2024-12-20T09:40:18.999829" level="INFO">${exception} = 0</msg>
<msg time="2024-12-20T09:40:18.999989" level="INFO">${exp_message} = Undefined</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:18.997271" elapsed="0.002805"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:19.001442" level="INFO">exception: (0: Undefined), expected: 0</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:19.000603" elapsed="0.001031"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:40:19.002792" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:19.002086" elapsed="0.000936"/>
</kw>
<if>
<branch type="IF" condition="${exception} == ${0}">
<kw name="Get Bits From PDU" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:19.006098" level="INFO">${dicretes} = [False, True, False, True, False, True, False, False, False, False, False, False, False, False, False, False]</msg>
<var>${dicretes}</var>
<arg>${packet}</arg>
<doc>Check PDU frame, extract bits (coils or discrete) from PDU.
Args:
    pdu: A Modbus PDU frame.
Returns:
    bits: The list of bits of boolean type.
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:19.005222" elapsed="0.000988"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:19.007425" level="INFO">Length is 16.</msg>
<arg>${dicretes}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:19.006704" elapsed="0.001565"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${${dicretes.__len__()}}</arg>
<arg>${${packet.byteCount} * 8}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:19.008876" elapsed="0.007178"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:19.017310" level="INFO">Returned modbus dicretes: [False, True, False, True, False, True, False, False, False, False, False, False, False, False, False, False]</msg>
<arg>Returned modbus dicretes: ${dicretes}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:19.016606" elapsed="0.000904"/>
</kw>
<status status="PASS" start="2024-12-20T09:40:19.003346" elapsed="0.014323"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<arg>"Exception is evaluated correctly ${exception} == ${exception_expected}"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:19.018220" elapsed="0.000084"/>
</kw>
<status status="NOT RUN" start="2024-12-20T09:40:19.017782" elapsed="0.000662"/>
</branch>
<status status="PASS" start="2024-12-20T09:40:19.003269" elapsed="0.015264"/>
</if>
<arg>0x01</arg>
<arg>0x0001</arg>
<arg>16</arg>
<arg>0</arg>
<status status="PASS" start="2024-12-20T09:40:16.679900" elapsed="2.338857"/>
</kw>
<kw name="Read Discrete Input Registers" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:19.021754" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:40:19.021204" elapsed="0.000658"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:19.022888" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:19.022298" elapsed="0.000779"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:19.024976" level="INFO">Read Discrete Input Registers with parameters UID:0x01, offs:0x0010, quantity:20</msg>
<arg>Read Discrete Input Registers with parameters UID:${uid}, offs:${start_addr}, quantity:${quantity}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:19.023522" elapsed="0.001664"/>
</kw>
<kw name="Create Discrete Read Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:19.029131" level="INFO">Packet created: ModbusADU_Request / ModbusPDU02_Read_Discrete_Inputs</msg>
<msg time="2024-12-20T09:40:19.029505" level="INFO">${packet} = ModbusADU_Request / ModbusPDU02_Read_Discrete_Inputs</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0)/ModbusPDU02_Read_Discrete_Inputs(funcCode=${FUNC_READ_DISCRETE_INPUTS}, startAddr=${startAddr}, quantity=${quantity})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:40:19.027438" elapsed="0.002163"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:19.030769" level="INFO">Packet: ModbusADU_Request / ModbusPDU02_Read_Discrete_Inputs</msg>
<arg>Packet: ${packet}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:19.030110" elapsed="0.000859"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:40:19.031174" elapsed="0.000123"/>
</return>
<msg time="2024-12-20T09:40:19.031887" level="INFO">${req} = ModbusADU_Request / ModbusPDU02_Read_Discrete_Inputs</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${quantity}</arg>
<status status="PASS" start="2024-12-20T09:40:19.025863" elapsed="0.006126"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:21.300589" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0x13
  protoId   = 0x0
  len       = None
  unitId    = 0x1
###[ Read Discrete Inputs ]###
     funcCode  = 0x2
     startAddr = 0x10
     quantity  = 0x14

Packet get: ###[ ModbusADU Response ]###
  transId   = 0x13
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Discrete Inputs Exception ]###
     funcCode  = 0x82
     exceptCode= Illegal data address

Answer bin: b'\x00\x13\x00\x00\x00\x03\x01\x82\x02'
Answer hex: 001300000003018202</msg>
<msg time="2024-12-20T09:40:21.301046" level="INFO">${response} = \x82</msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:19.033879" elapsed="2.267275"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:21.302409" level="INFO">Got response \x82</msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:21.301722" elapsed="0.001072"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:40:21.303021" elapsed="0.000127"/>
</return>
<msg time="2024-12-20T09:40:21.303762" level="INFO">${response_frame} = \x82</msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:40:19.032672" elapsed="2.271198"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:21.304936" level="INFO">Length is 9.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:21.304338" elapsed="0.000792"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:21.307211" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0x13
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Discrete Inputs Exception ]###
     funcCode  = 0x82
     exceptCode= Illegal data address

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU02_Read_Discrete_Inputs_Exception, b'\x00\x13\x00\x00\x00\x03\x01\x82\x02'
PDU: ModbusADU_Response / ModbusPDU02_Read_Discrete_Inputs_Exception</msg>
<msg time="2024-12-20T09:40:21.307610" level="INFO">${packet} = ModbusADU_Response / ModbusPDU02_Read_Discrete_Inputs_Exception</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:21.305592" elapsed="0.002115"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:21.308859" level="INFO">Length is 9.</msg>
<arg>${packet}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:21.308209" elapsed="0.000848"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:21.312140" level="INFO">Response is: ###[ ModbusADU Response ]###
  transId   = 0x13
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Discrete Inputs Exception ]###
     funcCode  = 0x82
     exceptCode= Illegal data address
</msg>
<arg>Response is: ${packet.show(dump=True)}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:21.309524" elapsed="0.002833"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:21.312853" elapsed="0.003592"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:21.319244" level="INFO">PDU is ModbusADU_Response, funcCode: 130
func code: &lt;class 'int'&gt; 130
MB exception: 2, Illegal data address</msg>
<msg time="2024-12-20T09:40:21.319609" level="INFO">${exception} = 2</msg>
<msg time="2024-12-20T09:40:21.319771" level="INFO">${exp_message} = Illegal data address</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:21.317017" elapsed="0.002839"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:21.321221" level="INFO">exception: (2: Illegal data address), expected: 2</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:21.320388" elapsed="0.001026"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:40:21.322575" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:21.321866" elapsed="0.000944"/>
</kw>
<if>
<branch type="IF" condition="${exception} == ${0}">
<kw name="Get Bits From PDU" owner="ModbusTestLib">
<var>${dicretes}</var>
<arg>${packet}</arg>
<doc>Check PDU frame, extract bits (coils or discrete) from PDU.
Args:
    pdu: A Modbus PDU frame.
Returns:
    bits: The list of bits of boolean type.
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:21.324987" elapsed="0.000093"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<arg>${dicretes}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:21.325495" elapsed="0.000075"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${${dicretes.__len__()}}</arg>
<arg>${${packet.byteCount} * 8}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:21.325919" elapsed="0.000074"/>
</kw>
<kw name="Log" owner="BuiltIn">
<arg>Returned modbus dicretes: ${dicretes}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:21.326359" elapsed="0.000073"/>
</kw>
<status status="NOT RUN" start="2024-12-20T09:40:21.323135" elapsed="0.003425"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:21.328725" level="INFO">"Exception is evaluated correctly 2 == 2"</msg>
<arg>"Exception is evaluated correctly ${exception} == ${exception_expected}"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:21.327095" elapsed="0.001842"/>
</kw>
<status status="PASS" start="2024-12-20T09:40:21.326662" elapsed="0.002442"/>
</branch>
<status status="PASS" start="2024-12-20T09:40:21.323058" elapsed="0.006140"/>
</if>
<arg>0x01</arg>
<arg>0x0010</arg>
<arg>20</arg>
<arg>2</arg>
<status status="PASS" start="2024-12-20T09:40:19.019870" elapsed="2.309548"/>
</kw>
<kw name="Read Discrete Input Registers" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:21.332438" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:40:21.331882" elapsed="0.000665"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:21.333606" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:21.333001" elapsed="0.000823"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:21.335104" level="INFO">Read Discrete Input Registers with parameters UID:0x01, offs:0x0002, quantity:300</msg>
<arg>Read Discrete Input Registers with parameters UID:${uid}, offs:${start_addr}, quantity:${quantity}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:21.334305" elapsed="0.000989"/>
</kw>
<kw name="Create Discrete Read Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:21.339252" level="INFO">Packet created: ModbusADU_Request / ModbusPDU02_Read_Discrete_Inputs</msg>
<msg time="2024-12-20T09:40:21.339623" level="INFO">${packet} = ModbusADU_Request / ModbusPDU02_Read_Discrete_Inputs</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0)/ModbusPDU02_Read_Discrete_Inputs(funcCode=${FUNC_READ_DISCRETE_INPUTS}, startAddr=${startAddr}, quantity=${quantity})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:40:21.337546" elapsed="0.002172"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:21.341122" level="INFO">Packet: ModbusADU_Request / ModbusPDU02_Read_Discrete_Inputs</msg>
<arg>Packet: ${packet}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:21.340410" elapsed="0.000911"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:40:21.341525" elapsed="0.000122"/>
</return>
<msg time="2024-12-20T09:40:21.342225" level="INFO">${req} = ModbusADU_Request / ModbusPDU02_Read_Discrete_Inputs</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${quantity}</arg>
<status status="PASS" start="2024-12-20T09:40:21.335966" elapsed="0.006358"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:23.640721" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0x14
  protoId   = 0x0
  len       = None
  unitId    = 0x1
###[ Read Discrete Inputs ]###
     funcCode  = 0x2
     startAddr = 0x2
     quantity  = 0x12c

Packet get: ###[ ModbusADU Response ]###
  transId   = 0x14
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Discrete Inputs Exception ]###
     funcCode  = 0x82
     exceptCode= Illegal data address

Answer bin: b'\x00\x14\x00\x00\x00\x03\x01\x82\x02'
Answer hex: 001400000003018202</msg>
<msg time="2024-12-20T09:40:23.641182" level="INFO">${response} = \x82</msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:21.344181" elapsed="2.297107"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:23.642565" level="INFO">Got response \x82</msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:23.641864" elapsed="0.000907"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:40:23.642981" elapsed="0.000126"/>
</return>
<msg time="2024-12-20T09:40:23.643698" level="INFO">${response_frame} = \x82</msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:40:21.342996" elapsed="2.300807"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:23.644848" level="INFO">Length is 9.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:23.644260" elapsed="0.000784"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:23.647110" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0x14
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Discrete Inputs Exception ]###
     funcCode  = 0x82
     exceptCode= Illegal data address

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU02_Read_Discrete_Inputs_Exception, b'\x00\x14\x00\x00\x00\x03\x01\x82\x02'
PDU: ModbusADU_Response / ModbusPDU02_Read_Discrete_Inputs_Exception</msg>
<msg time="2024-12-20T09:40:23.648148" level="INFO">${packet} = ModbusADU_Response / ModbusPDU02_Read_Discrete_Inputs_Exception</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:23.645504" elapsed="0.002753"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:23.649432" level="INFO">Length is 9.</msg>
<arg>${packet}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:23.648771" elapsed="0.000864"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:23.652798" level="INFO">Response is: ###[ ModbusADU Response ]###
  transId   = 0x14
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Discrete Inputs Exception ]###
     funcCode  = 0x82
     exceptCode= Illegal data address
</msg>
<arg>Response is: ${packet.show(dump=True)}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:23.650130" elapsed="0.002883"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:23.653511" elapsed="0.003811"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:23.660102" level="INFO">PDU is ModbusADU_Response, funcCode: 130
func code: &lt;class 'int'&gt; 130
MB exception: 2, Illegal data address</msg>
<msg time="2024-12-20T09:40:23.660468" level="INFO">${exception} = 2</msg>
<msg time="2024-12-20T09:40:23.660627" level="INFO">${exp_message} = Illegal data address</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:23.657880" elapsed="0.002834"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:23.662086" level="INFO">exception: (2: Illegal data address), expected: 2</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:23.661249" elapsed="0.001030"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:40:23.663442" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:23.662731" elapsed="0.000945"/>
</kw>
<if>
<branch type="IF" condition="${exception} == ${0}">
<kw name="Get Bits From PDU" owner="ModbusTestLib">
<var>${dicretes}</var>
<arg>${packet}</arg>
<doc>Check PDU frame, extract bits (coils or discrete) from PDU.
Args:
    pdu: A Modbus PDU frame.
Returns:
    bits: The list of bits of boolean type.
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:23.665883" elapsed="0.000092"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<arg>${dicretes}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:23.666388" elapsed="0.000076"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${${dicretes.__len__()}}</arg>
<arg>${${packet.byteCount} * 8}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:23.666869" elapsed="0.000084"/>
</kw>
<kw name="Log" owner="BuiltIn">
<arg>Returned modbus dicretes: ${dicretes}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:23.667341" elapsed="0.000073"/>
</kw>
<status status="NOT RUN" start="2024-12-20T09:40:23.663999" elapsed="0.003544"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:23.669188" level="INFO">"Exception is evaluated correctly 2 == 2"</msg>
<arg>"Exception is evaluated correctly ${exception} == ${exception_expected}"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:23.668200" elapsed="0.001192"/>
</kw>
<status status="PASS" start="2024-12-20T09:40:23.667794" elapsed="0.001756"/>
</branch>
<status status="PASS" start="2024-12-20T09:40:23.663921" elapsed="0.005721"/>
</if>
<arg>0x01</arg>
<arg>0x0002</arg>
<arg>300</arg>
<arg>2</arg>
<status status="PASS" start="2024-12-20T09:40:21.330551" elapsed="2.339304"/>
</kw>
<kw name="Read Discrete Input Registers" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:23.672913" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:40:23.672351" elapsed="0.000670"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:23.674053" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:23.673463" elapsed="0.000782"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:23.675462" level="INFO">Read Discrete Input Registers with parameters UID:0x01, offs:0x0008, quantity:30</msg>
<arg>Read Discrete Input Registers with parameters UID:${uid}, offs:${start_addr}, quantity:${quantity}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:23.674689" elapsed="0.000964"/>
</kw>
<kw name="Create Discrete Read Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:23.679529" level="INFO">Packet created: ModbusADU_Request / ModbusPDU02_Read_Discrete_Inputs</msg>
<msg time="2024-12-20T09:40:23.679898" level="INFO">${packet} = ModbusADU_Request / ModbusPDU02_Read_Discrete_Inputs</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0)/ModbusPDU02_Read_Discrete_Inputs(funcCode=${FUNC_READ_DISCRETE_INPUTS}, startAddr=${startAddr}, quantity=${quantity})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:40:23.677846" elapsed="0.002146"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:23.681163" level="INFO">Packet: ModbusADU_Request / ModbusPDU02_Read_Discrete_Inputs</msg>
<arg>Packet: ${packet}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:23.680500" elapsed="0.000858"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:40:23.681563" elapsed="0.000123"/>
</return>
<msg time="2024-12-20T09:40:23.682260" level="INFO">${req} = ModbusADU_Request / ModbusPDU02_Read_Discrete_Inputs</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${quantity}</arg>
<status status="PASS" start="2024-12-20T09:40:23.676293" elapsed="0.006064"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:26.010700" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0x15
  protoId   = 0x0
  len       = None
  unitId    = 0x1
###[ Read Discrete Inputs ]###
     funcCode  = 0x2
     startAddr = 0x8
     quantity  = 0x1e

Packet get: ###[ ModbusADU Response ]###
  transId   = 0x15
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Discrete Inputs Exception ]###
     funcCode  = 0x82
     exceptCode= Illegal data address

Answer bin: b'\x00\x15\x00\x00\x00\x03\x01\x82\x02'
Answer hex: 001500000003018202</msg>
<msg time="2024-12-20T09:40:26.011154" level="INFO">${response} = \x82</msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:23.684230" elapsed="2.327030"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:26.012540" level="INFO">Got response \x82</msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:26.011836" elapsed="0.000907"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:40:26.012955" elapsed="0.000129"/>
</return>
<msg time="2024-12-20T09:40:26.013676" level="INFO">${response_frame} = \x82</msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:40:23.683032" elapsed="2.330749"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:26.014839" level="INFO">Length is 9.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:26.014237" elapsed="0.000797"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:26.017113" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0x15
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Discrete Inputs Exception ]###
     funcCode  = 0x82
     exceptCode= Illegal data address

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU02_Read_Discrete_Inputs_Exception, b'\x00\x15\x00\x00\x00\x03\x01\x82\x02'
PDU: ModbusADU_Response / ModbusPDU02_Read_Discrete_Inputs_Exception</msg>
<msg time="2024-12-20T09:40:26.017520" level="INFO">${packet} = ModbusADU_Response / ModbusPDU02_Read_Discrete_Inputs_Exception</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:26.015504" elapsed="0.002112"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:26.018758" level="INFO">Length is 9.</msg>
<arg>${packet}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:26.018112" elapsed="0.000848"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:26.022043" level="INFO">Response is: ###[ ModbusADU Response ]###
  transId   = 0x15
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Read Discrete Inputs Exception ]###
     funcCode  = 0x82
     exceptCode= Illegal data address
</msg>
<arg>Response is: ${packet.show(dump=True)}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:26.019424" elapsed="0.002835"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:26.022755" elapsed="0.003631"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:26.029176" level="INFO">PDU is ModbusADU_Response, funcCode: 130
func code: &lt;class 'int'&gt; 130
MB exception: 2, Illegal data address</msg>
<msg time="2024-12-20T09:40:26.029527" level="INFO">${exception} = 2</msg>
<msg time="2024-12-20T09:40:26.029691" level="INFO">${exp_message} = Illegal data address</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:26.026964" elapsed="0.002812"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:26.031358" level="INFO">exception: (2: Illegal data address), expected: 2</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:26.030486" elapsed="0.001075"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:40:26.032920" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:26.032064" elapsed="0.001245"/>
</kw>
<if>
<branch type="IF" condition="${exception} == ${0}">
<kw name="Get Bits From PDU" owner="ModbusTestLib">
<var>${dicretes}</var>
<arg>${packet}</arg>
<doc>Check PDU frame, extract bits (coils or discrete) from PDU.
Args:
    pdu: A Modbus PDU frame.
Returns:
    bits: The list of bits of boolean type.
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:26.035711" elapsed="0.000096"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<arg>${dicretes}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:26.036218" elapsed="0.000081"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${${dicretes.__len__()}}</arg>
<arg>${${packet.byteCount} * 8}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:26.036660" elapsed="0.000072"/>
</kw>
<kw name="Log" owner="BuiltIn">
<arg>Returned modbus dicretes: ${dicretes}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:26.037206" elapsed="0.000080"/>
</kw>
<status status="NOT RUN" start="2024-12-20T09:40:26.033743" elapsed="0.003676"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:26.038876" level="INFO">"Exception is evaluated correctly 2 == 2"</msg>
<arg>"Exception is evaluated correctly ${exception} == ${exception_expected}"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:26.037878" elapsed="0.001204"/>
</kw>
<status status="PASS" start="2024-12-20T09:40:26.037525" elapsed="0.001721"/>
</branch>
<status status="PASS" start="2024-12-20T09:40:26.033654" elapsed="0.005686"/>
</if>
<arg>0x01</arg>
<arg>0x0008</arg>
<arg>30</arg>
<arg>2</arg>
<status status="PASS" start="2024-12-20T09:40:23.670981" elapsed="2.368579"/>
</kw>
<doc>Test read discrete registers for different addresses with different quantities</doc>
<tag>multi_dut_modbus_generic</tag>
<status status="PASS" start="2024-12-20T09:40:14.350288" elapsed="11.689735"/>
</test>
<test id="s1-t7" name="Test Write Coils With Different Addresses And Quantities" line="59">
<kw name="Write Coil Registers" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:26.045620" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:40:26.045054" elapsed="0.000675"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:26.046813" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:26.046183" elapsed="0.000868"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:26.048416" level="INFO">Write Coil Registers with parameters UID:0x01, offs:0x0000, quantity:8, coil_data:[0xFF]</msg>
<arg>Write Coil Registers with parameters UID:${uid}, offs:${start_addr}, quantity:${quantity}, coil_data:${coil_data}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:26.047523" elapsed="0.001085"/>
</kw>
<kw name="Create Coils Write Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:26.052824" level="INFO">Packet created: ModbusADU_Request / ModbusPDU0F_Write_Multiple_Coils</msg>
<msg time="2024-12-20T09:40:26.053210" level="INFO">${packet} = ModbusADU_Request / ModbusPDU0F_Write_Multiple_Coils</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0)/ModbusPDU0F_Write_Multiple_Coils(funcCode=${FUNC_WRITE_COILS}, startAddr=${startAddr}, quantityOutput=${quantity}, outputsValue=${coil_data})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:40:26.050920" elapsed="0.002385"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:26.054489" level="INFO">Packet: ModbusADU_Request / ModbusPDU0F_Write_Multiple_Coils</msg>
<arg>Packet: ${packet}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:26.053820" elapsed="0.000866"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:40:26.054895" elapsed="0.000123"/>
</return>
<msg time="2024-12-20T09:40:26.055613" level="INFO">${req} = ModbusADU_Request / ModbusPDU0F_Write_Multiple_Coils</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${quantity}</arg>
<arg>${coil_data}</arg>
<status status="PASS" start="2024-12-20T09:40:26.049251" elapsed="0.006459"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:28.351917" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0x16
  protoId   = 0x0
  len       = None
  unitId    = 0x1
###[ Write Multiple Coils ]###
     funcCode  = 0xf
     startAddr = 0x0
     quantityOutput= 0x8
     byteCount = None
     outputsValue= [0xff]

Packet get: ###[ ModbusADU Response ]###
  transId   = 0x16
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Write Multiple Coils Answer ]###
     funcCode  = 0xf
     startAddr = 0x0
     quantityOutput= 0x8

Answer bin: b'\x00\x16\x00\x00\x00\x06\x01\x0f\x00\x00\x00\x08'
Answer hex: 001600000006010f00000008</msg>
<msg time="2024-12-20T09:40:28.352514" level="INFO">${response} = </msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:26.057669" elapsed="2.295018"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:28.354394" level="INFO">Got response </msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:28.353483" elapsed="0.001200"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:40:28.354974" elapsed="0.000169"/>
</return>
<msg time="2024-12-20T09:40:28.355917" level="INFO">${response_frame} = </msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:40:26.056402" elapsed="2.299661"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:28.358071" level="INFO">Length is 12.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:28.356689" elapsed="0.001667"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:28.361239" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0x16
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Write Multiple Coils Answer ]###
     funcCode  = 0xf
     startAddr = 0x0
     quantityOutput= 0x8

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU0F_Write_Multiple_Coils_Answer, b'\x00\x16\x00\x00\x00\x06\x01\x0f\x00\x00\x00\x08'
PDU: ModbusADU_Response / ModbusPDU0F_Write_Multiple_Coils_Answer</msg>
<msg time="2024-12-20T09:40:28.361766" level="INFO">${packet} = ModbusADU_Response / ModbusPDU0F_Write_Multiple_Coils_Answer</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:28.359036" elapsed="0.002869"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:28.363430" level="INFO">Length is 12.</msg>
<arg>${packet}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:28.362582" elapsed="0.001120"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:28.368196" level="INFO">Response is: ###[ ModbusADU Response ]###
  transId   = 0x16
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Write Multiple Coils Answer ]###
     funcCode  = 0xf
     startAddr = 0x0
     quantityOutput= 0x8
</msg>
<arg>Response is: ${packet.show(dump=True)}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:28.364338" elapsed="0.004151"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:28.369156" elapsed="0.005269"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:28.378373" level="INFO">PDU is ModbusADU_Response, funcCode: 15
func code: &lt;class 'int'&gt; 15
MB exception: 0, Undefined</msg>
<msg time="2024-12-20T09:40:28.378880" level="INFO">${exception} = 0</msg>
<msg time="2024-12-20T09:40:28.379119" level="INFO">${exp_message} = Undefined</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:28.375172" elapsed="0.004076"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:28.381137" level="INFO">exception: (0: Undefined), expected: 0</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:28.379979" elapsed="0.001425"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:40:28.383003" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:28.382031" elapsed="0.001291"/>
</kw>
<if>
<branch type="IF" condition="${exception} == ${0}">
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:28.391013" level="INFO">8</msg>
<arg>${${packet.quantityOutput}}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:28.386443" elapsed="0.004860"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:40:28.396695" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${${packet.quantityOutput}}</arg>
<arg>${quantity}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:28.391968" elapsed="0.005106"/>
</kw>
<status status="PASS" start="2024-12-20T09:40:28.383780" elapsed="0.013541"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<arg>"Exception is evaluated correctly ${exception} == ${exception_expected}"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:28.398090" elapsed="0.000122"/>
</kw>
<status status="NOT RUN" start="2024-12-20T09:40:28.397483" elapsed="0.000938"/>
</branch>
<status status="PASS" start="2024-12-20T09:40:28.383670" elapsed="0.014878"/>
</if>
<arg>0x01</arg>
<arg>0x0000</arg>
<arg>8</arg>
<arg>[0xFF]</arg>
<arg>0</arg>
<status status="PASS" start="2024-12-20T09:40:26.043614" elapsed="2.355242"/>
</kw>
<kw name="Write Coil Registers" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:28.403110" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:40:28.402308" elapsed="0.000976"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:28.405527" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:28.404523" elapsed="0.001297"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:28.407838" level="INFO">Write Coil Registers with parameters UID:0x01, offs:0x0005, quantity:300, coil_data:[0xFF]</msg>
<arg>Write Coil Registers with parameters UID:${uid}, offs:${start_addr}, quantity:${quantity}, coil_data:${coil_data}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:28.406502" elapsed="0.001613"/>
</kw>
<kw name="Create Coils Write Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:28.414808" level="INFO">Packet created: ModbusADU_Request / ModbusPDU0F_Write_Multiple_Coils</msg>
<msg time="2024-12-20T09:40:28.415360" level="INFO">${packet} = ModbusADU_Request / ModbusPDU0F_Write_Multiple_Coils</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0)/ModbusPDU0F_Write_Multiple_Coils(funcCode=${FUNC_WRITE_COILS}, startAddr=${startAddr}, quantityOutput=${quantity}, outputsValue=${coil_data})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:40:28.411357" elapsed="0.004144"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:28.417180" level="INFO">Packet: ModbusADU_Request / ModbusPDU0F_Write_Multiple_Coils</msg>
<arg>Packet: ${packet}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:28.416216" elapsed="0.001244"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:40:28.417750" elapsed="0.000167"/>
</return>
<msg time="2024-12-20T09:40:28.418723" level="INFO">${req} = ModbusADU_Request / ModbusPDU0F_Write_Multiple_Coils</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${quantity}</arg>
<arg>${coil_data}</arg>
<status status="PASS" start="2024-12-20T09:40:28.409016" elapsed="0.009851"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:30.750570" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0x17
  protoId   = 0x0
  len       = None
  unitId    = 0x1
###[ Write Multiple Coils ]###
     funcCode  = 0xf
     startAddr = 0x5
     quantityOutput= 0x12c
     byteCount = None
     outputsValue= [0xff]

Packet get: ###[ ModbusADU Response ]###
  transId   = 0x17
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Write Multiple Coils Exception ]###
     funcCode  = 0x8f
     exceptCode= Illegal data value

Answer bin: b'\x00\x17\x00\x00\x00\x03\x01\x8f\x03'
Answer hex: 001700000003018f03</msg>
<msg time="2024-12-20T09:40:30.751033" level="INFO">${response} = \x8f</msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:28.421754" elapsed="2.329385"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:30.752418" level="INFO">Got response \x8f</msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:30.751718" elapsed="0.000906"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:40:30.752834" elapsed="0.000124"/>
</return>
<msg time="2024-12-20T09:40:30.753543" level="INFO">${response_frame} = \x8f</msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:40:28.420050" elapsed="2.333597"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:30.754697" level="INFO">Length is 9.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:30.754105" elapsed="0.000782"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:30.757091" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0x17
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Write Multiple Coils Exception ]###
     funcCode  = 0x8f
     exceptCode= Illegal data value

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU0F_Write_Multiple_Coils_Exception, b'\x00\x17\x00\x00\x00\x03\x01\x8f\x03'
PDU: ModbusADU_Response / ModbusPDU0F_Write_Multiple_Coils_Exception</msg>
<msg time="2024-12-20T09:40:30.757501" level="INFO">${packet} = ModbusADU_Response / ModbusPDU0F_Write_Multiple_Coils_Exception</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:30.755352" elapsed="0.002246"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:30.758749" level="INFO">Length is 9.</msg>
<arg>${packet}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:30.758103" elapsed="0.000852"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:30.762083" level="INFO">Response is: ###[ ModbusADU Response ]###
  transId   = 0x17
  protoId   = 0x0
  len       = 0x3
  unitId    = 0x1
###[ Write Multiple Coils Exception ]###
     funcCode  = 0x8f
     exceptCode= Illegal data value
</msg>
<arg>Response is: ${packet.show(dump=True)}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:30.759426" elapsed="0.002876"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:30.762790" elapsed="0.003689"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:30.769966" level="INFO">PDU is ModbusADU_Response, funcCode: 143
func code: &lt;class 'int'&gt; 143
MB exception: 3, Illegal data value</msg>
<msg time="2024-12-20T09:40:30.770340" level="INFO">${exception} = 3</msg>
<msg time="2024-12-20T09:40:30.770502" level="INFO">${exp_message} = Illegal data value</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:30.767253" elapsed="0.003337"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:30.771983" level="INFO">exception: (3: Illegal data value), expected: 3</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:30.771141" elapsed="0.001037"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:40:30.773341" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:30.772638" elapsed="0.000938"/>
</kw>
<if>
<branch type="IF" condition="${exception} == ${0}">
<kw name="Log" owner="BuiltIn">
<arg>${${packet.quantityOutput}}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:30.775800" elapsed="0.000091"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${${packet.quantityOutput}}</arg>
<arg>${quantity}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:30.776285" elapsed="0.000074"/>
</kw>
<status status="NOT RUN" start="2024-12-20T09:40:30.773898" elapsed="0.002602"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:30.777954" level="INFO">"Exception is evaluated correctly 3 == 3"</msg>
<arg>"Exception is evaluated correctly ${exception} == ${exception_expected}"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:30.776990" elapsed="0.001161"/>
</kw>
<status status="PASS" start="2024-12-20T09:40:30.776602" elapsed="0.001709"/>
</branch>
<status status="PASS" start="2024-12-20T09:40:30.773820" elapsed="0.004581"/>
</if>
<arg>0x01</arg>
<arg>0x0005</arg>
<arg>300</arg>
<arg>[0xFF]</arg>
<arg>3</arg>
<status status="PASS" start="2024-12-20T09:40:28.400386" elapsed="2.378234"/>
</kw>
<kw name="Write Coil Registers" owner="ModbusTestSuite">
<kw name="Get Class Id" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:30.782411" level="INFO">${classId} = 6</msg>
<var>${classId}</var>
<doc>Return unique class ID for robot suit debugging.
Args:
    None
Returns:
    Class instance ID</doc>
<status status="PASS" start="2024-12-20T09:40:30.781776" elapsed="0.000745"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:30.783600" level="INFO">Library ClassId: 6</msg>
<arg>Library ClassId: ${classId}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:30.782992" elapsed="0.000801"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:30.785125" level="INFO">Write Coil Registers with parameters UID:0x01, offs:0x0008, quantity:16, coil_data:[0xFF, 0x55]</msg>
<arg>Write Coil Registers with parameters UID:${uid}, offs:${start_addr}, quantity:${quantity}, coil_data:${coil_data}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:30.784244" elapsed="0.001072"/>
</kw>
<kw name="Create Coils Write Request" owner="ModbusTestSuite">
<kw name="Create Request" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:30.789783" level="INFO">Packet created: ModbusADU_Request / ModbusPDU0F_Write_Multiple_Coils</msg>
<msg time="2024-12-20T09:40:30.790162" level="INFO">${packet} = ModbusADU_Request / ModbusPDU0F_Write_Multiple_Coils</msg>
<var>${packet}</var>
<arg>ModbusADU_Request(unitId=${uid}, protoId=0)/ModbusPDU0F_Write_Multiple_Coils(funcCode=${FUNC_WRITE_COILS}, startAddr=${startAddr}, quantityOutput=${quantity}, outputsValue=${coil_data})</arg>
<doc>Create a Modbus packet based on the given string representation.
Args:
    packet_str (str): A string representing the Modbus packet.
Returns:
    ModbusADU_Request: The created Modbus packet.
Raises:
    ValueError: If the packet creation fails.</doc>
<status status="PASS" start="2024-12-20T09:40:30.787927" elapsed="0.002331"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:30.791458" level="INFO">Packet: ModbusADU_Request / ModbusPDU0F_Write_Multiple_Coils</msg>
<arg>Packet: ${packet}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:30.790774" elapsed="0.000880"/>
</kw>
<return>
<value>${packet}</value>
<status status="PASS" start="2024-12-20T09:40:30.791863" elapsed="0.000121"/>
</return>
<msg time="2024-12-20T09:40:30.792565" level="INFO">${req} = ModbusADU_Request / ModbusPDU0F_Write_Multiple_Coils</msg>
<var>${req}</var>
<arg>${uid}</arg>
<arg>${start_addr}</arg>
<arg>${quantity}</arg>
<arg>${coil_data}</arg>
<status status="PASS" start="2024-12-20T09:40:30.786183" elapsed="0.006483"/>
</kw>
<kw name="Send Packet And Get Response" owner="ModbusTestSuite">
<kw name="Send Packet" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:33.075345" level="INFO">Packet sent: ###[ ModbusADU Request ]###
  transId   = 0x18
  protoId   = 0x0
  len       = None
  unitId    = 0x1
###[ Write Multiple Coils ]###
     funcCode  = 0xf
     startAddr = 0x8
     quantityOutput= 0x10
     byteCount = None
     outputsValue= [0xff, 0x55]

Packet get: ###[ ModbusADU Response ]###
  transId   = 0x18
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Write Multiple Coils Answer ]###
     funcCode  = 0xf
     startAddr = 0x8
     quantityOutput= 0x10

Answer bin: b'\x00\x18\x00\x00\x00\x06\x01\x0f\x00\x08\x00\x10'
Answer hex: 001800000006010f00080010</msg>
<msg time="2024-12-20T09:40:33.076206" level="INFO">${response} = </msg>
<var>${response}</var>
<arg>${packet}</arg>
<arg>timeout=3</arg>
<arg>verbose=1</arg>
<doc>Wrapped send and receive function used as the robot framework keyword.
Args:
    pkt: A Modbus packet.
    timeout: timeout to send the data
    verbose: logging information
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:30.794561" elapsed="2.281880"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:33.079126" level="INFO">Got response </msg>
<arg>Got response ${response}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:33.077782" elapsed="0.001780"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-12-20T09:40:33.079996" elapsed="0.000249"/>
</return>
<msg time="2024-12-20T09:40:33.081421" level="INFO">${response_frame} = </msg>
<var>${response_frame}</var>
<arg>${req}</arg>
<status status="PASS" start="2024-12-20T09:40:30.793354" elapsed="2.288297"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:33.083751" level="INFO">Length is 12.</msg>
<arg>${response_frame}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:33.082594" elapsed="0.001557"/>
</kw>
<kw name="Translate Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:33.088518" level="INFO">Packet received: ###[ ModbusADU Response ]###
  transId   = 0x18
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Write Multiple Coils Answer ]###
     funcCode  = 0xf
     startAddr = 0x8
     quantityOutput= 0x10

Test received: pdu: &lt;class 'ModbusSupport.ModbusADU_Response'&gt; ModbusADU_Response / ModbusPDU0F_Write_Multiple_Coils_Answer, b'\x00\x18\x00\x00\x00\x06\x01\x0f\x00\x08\x00\x10'
PDU: ModbusADU_Response / ModbusPDU0F_Write_Multiple_Coils_Answer</msg>
<msg time="2024-12-20T09:40:33.089325" level="INFO">${packet} = ModbusADU_Response / ModbusPDU0F_Write_Multiple_Coils_Answer</msg>
<var>${packet}</var>
<arg>${response_frame}</arg>
<doc>Translates response received from server. Does dissection of the received packet.
Args:
    pkt: A Modbus packet.
Returns:
    bytes: The created Modbus socket as Raw bytes.
Raises:
    Scapy_Exception: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:33.085091" elapsed="0.004448"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2024-12-20T09:40:33.091820" level="INFO">Length is 12.</msg>
<arg>${packet}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2024-12-20T09:40:33.090567" elapsed="0.001665"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:33.099300" level="INFO">Response is: ###[ ModbusADU Response ]###
  transId   = 0x18
  protoId   = 0x0
  len       = 0x6
  unitId    = 0x1
###[ Write Multiple Coils Answer ]###
     funcCode  = 0xf
     startAddr = 0x8
     quantityOutput= 0x10
</msg>
<arg>Response is: ${packet.show(dump=True)}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:33.093184" elapsed="0.006572"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${req.transId}</arg>
<arg>${packet.transId}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:33.100764" elapsed="0.008356"/>
</kw>
<kw name="Check Response" owner="ModbusTestLib">
<msg time="2024-12-20T09:40:33.114978" level="INFO">PDU is ModbusADU_Response, funcCode: 15
func code: &lt;class 'int'&gt; 15
MB exception: 0, Undefined</msg>
<msg time="2024-12-20T09:40:33.115724" level="INFO">${exception} = 0</msg>
<msg time="2024-12-20T09:40:33.116099" level="INFO">${exp_message} = Undefined</msg>
<var>${exception}</var>
<var>${exp_message}</var>
<arg>${packet}</arg>
<arg>${req.funcCode}</arg>
<doc>Check PDU frame from response. Check exception code
Args:
    pdu: A Modbus PDU frame.
    expected_func: timeout to send the data
Returns:
    exception: The exception code from Modbus frame
    exception_message: exception message
Raises:
    ValueError: If the packet send or receive fail.</doc>
<status status="PASS" start="2024-12-20T09:40:33.110193" elapsed="0.006107"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:33.119299" level="INFO">exception: (0: Undefined), expected: 0</msg>
<arg>exception: (${exception}: ${exp_message}), expected: ${exception_expected}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:33.117544" elapsed="0.002159"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:40:33.122041" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exception}</arg>
<arg>${exception_expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:33.120617" elapsed="0.003238"/>
</kw>
<if>
<branch type="IF" condition="${exception} == ${0}">
<kw name="Log" owner="BuiltIn">
<msg time="2024-12-20T09:40:33.136173" level="INFO">16</msg>
<arg>${${packet.quantityOutput}}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-12-20T09:40:33.128930" elapsed="0.007711"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2024-12-20T09:40:33.142038" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${${packet.quantityOutput}}</arg>
<arg>${quantity}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2024-12-20T09:40:33.137728" elapsed="0.004724"/>
</kw>
<status status="PASS" start="2024-12-20T09:40:33.124570" elapsed="0.018062"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<arg>"Exception is evaluated correctly ${exception} == ${exception_expected}"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2024-12-20T09:40:33.143184" elapsed="0.000077"/>
</kw>
<status status="NOT RUN" start="2024-12-20T09:40:33.142744" elapsed="0.000648"/>
</branch>
<status status="PASS" start="2024-12-20T09:40:33.124407" elapsed="0.019067"/>
</if>
<arg>0x01</arg>
<arg>0x0008</arg>
<arg>16</arg>
<arg>[0xFF, 0x55]</arg>
<arg>0</arg>
<status status="PASS" start="2024-12-20T09:40:30.779712" elapsed="2.363976"/>
</kw>
<doc>Test write coil registers for different addresses with different quantities</doc>
<tag>multi_dut_modbus_generic</tag>
<status status="PASS" start="2024-12-20T09:40:26.040914" elapsed="7.103238"/>
</test>
<kw name="Disconnect" owner="ModbusTestLib" type="TEARDOWN">
<msg time="2024-12-20T09:40:33.146689" level="INFO">Disconnect from server.</msg>
<doc>The disconnect from socket method to work as robot framework keyword.
Args:
    None
Returns:
    None
Raises:
    Scapy_Exception: If the connection close fail.</doc>
<status status="PASS" start="2024-12-20T09:40:33.146274" elapsed="0.000787"/>
</kw>
<doc>A test suite for Modbus commands.

Keywords are imported from the resource file</doc>
<status status="PASS" start="2024-12-20T09:39:33.907579" elapsed="59.239646"/>
</suite>
<statistics>
<total>
<stat pass="7" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="7" fail="0" skip="0">multi_dut_modbus_generic</stat>
</tag>
<suite>
<stat pass="7" fail="0" skip="0" id="s1" name="ModbusTestSuite">ModbusTestSuite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
